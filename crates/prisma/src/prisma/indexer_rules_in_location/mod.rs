// File generated by Prisma Client Rust. DO NOT EDIT

pub mod _count;
pub mod indexer_rule;
pub mod indexer_rule_id;
pub mod location;
pub mod location_id;
use super::{_prisma::*, *};
pub const NAME: &str = "IndexerRulesInLocation";
pub fn location_id_indexer_rule_id<T: From<UniqueWhereParam>>(
	location_id: Int,
	indexer_rule_id: Int,
) -> T {
	UniqueWhereParam::LocationIdIndexerRuleIdEquals(location_id, indexer_rule_id).into()
}
#[derive(Debug, Clone)]
pub enum WhereParam {
	Not(Vec<WhereParam>),
	Or(Vec<WhereParam>),
	And(Vec<WhereParam>),
	LocationId(super::_prisma::read_filters::IntFilter),
	LocationIs(Vec<super::location::WhereParam>),
	LocationIsNot(Vec<super::location::WhereParam>),
	IndexerRuleId(super::_prisma::read_filters::IntFilter),
	IndexerRuleIs(Vec<super::indexer_rule::WhereParam>),
	IndexerRuleIsNot(Vec<super::indexer_rule::WhereParam>),
}
impl ::prisma_client_rust::WhereInput for WhereParam {
	fn serialize(self) -> ::prisma_client_rust::SerializedWhereInput {
		let (name, value) = match self {
			Self::Not(value) => (
				"NOT",
				::prisma_client_rust::SerializedWhereValue::Object(
					::prisma_client_rust::merge_fields(
						value
							.into_iter()
							.map(::prisma_client_rust::WhereInput::serialize)
							.map(Into::into)
							.collect(),
					),
				),
			),
			Self::Or(value) => (
				"OR",
				::prisma_client_rust::SerializedWhereValue::List(
					value
						.into_iter()
						.map(::prisma_client_rust::WhereInput::serialize)
						.map(|p| ::prisma_client_rust::PrismaValue::Object(vec![p.into()]))
						.collect(),
				),
			),
			Self::And(value) => (
				"AND",
				::prisma_client_rust::SerializedWhereValue::Object(
					::prisma_client_rust::merge_fields(
						value
							.into_iter()
							.map(::prisma_client_rust::WhereInput::serialize)
							.map(Into::into)
							.collect(),
					),
				),
			),
			Self::LocationId(value) => (location_id::NAME, value.into()),
			Self::LocationIs(where_params) => (
				location::NAME,
				::prisma_client_rust::SerializedWhereValue::Object(vec![(
					"is".to_string(),
					::prisma_client_rust::PrismaValue::Object(
						where_params
							.into_iter()
							.map(::prisma_client_rust::WhereInput::serialize)
							.map(::prisma_client_rust::SerializedWhereInput::transform_equals)
							.collect(),
					),
				)]),
			),
			Self::LocationIsNot(where_params) => (
				location::NAME,
				::prisma_client_rust::SerializedWhereValue::Object(vec![(
					"isNot".to_string(),
					::prisma_client_rust::PrismaValue::Object(
						where_params
							.into_iter()
							.map(::prisma_client_rust::WhereInput::serialize)
							.map(::prisma_client_rust::SerializedWhereInput::transform_equals)
							.collect(),
					),
				)]),
			),
			Self::IndexerRuleId(value) => (indexer_rule_id::NAME, value.into()),
			Self::IndexerRuleIs(where_params) => (
				indexer_rule::NAME,
				::prisma_client_rust::SerializedWhereValue::Object(vec![(
					"is".to_string(),
					::prisma_client_rust::PrismaValue::Object(
						where_params
							.into_iter()
							.map(::prisma_client_rust::WhereInput::serialize)
							.map(::prisma_client_rust::SerializedWhereInput::transform_equals)
							.collect(),
					),
				)]),
			),
			Self::IndexerRuleIsNot(where_params) => (
				indexer_rule::NAME,
				::prisma_client_rust::SerializedWhereValue::Object(vec![(
					"isNot".to_string(),
					::prisma_client_rust::PrismaValue::Object(
						where_params
							.into_iter()
							.map(::prisma_client_rust::WhereInput::serialize)
							.map(::prisma_client_rust::SerializedWhereInput::transform_equals)
							.collect(),
					),
				)]),
			),
		};
		::prisma_client_rust::SerializedWhereInput::new(name.to_string(), value.into())
	}
}
#[derive(Debug, Clone)]
pub enum UniqueWhereParam {
	LocationIdIndexerRuleIdEquals(Int, Int),
}
impl ::prisma_client_rust::WhereInput for UniqueWhereParam {
	fn serialize(self) -> ::prisma_client_rust::SerializedWhereInput {
		let (name, value) = match self {
			Self::LocationIdIndexerRuleIdEquals(location_id, indexer_rule_id) => (
				"location_id_indexer_rule_id",
				::prisma_client_rust::SerializedWhereValue::Object(vec![
					(
						location_id::NAME.to_string(),
						::prisma_client_rust::PrismaValue::Int(location_id),
					),
					(
						indexer_rule_id::NAME.to_string(),
						::prisma_client_rust::PrismaValue::Int(indexer_rule_id),
					),
				]),
			),
		};
		::prisma_client_rust::SerializedWhereInput::new(name.to_string(), value.into())
	}
}
impl From<::prisma_client_rust::Operator<Self>> for WhereParam {
	fn from(op: ::prisma_client_rust::Operator<Self>) -> Self {
		match op {
			::prisma_client_rust::Operator::Not(value) => Self::Not(value),
			::prisma_client_rust::Operator::And(value) => Self::And(value),
			::prisma_client_rust::Operator::Or(value) => Self::Or(value),
		}
	}
}
#[derive(Debug, Clone)]
pub enum OrderByWithRelationParam {
	LocationId(super::SortOrder),
	IndexerRuleId(super::SortOrder),
	Location(Vec<super::location::OrderByWithRelationParam>),
	IndexerRule(Vec<super::indexer_rule::OrderByWithRelationParam>),
}
impl Into<(String, ::prisma_client_rust::PrismaValue)> for OrderByWithRelationParam {
	fn into(self) -> (String, ::prisma_client_rust::PrismaValue) {
		let (k, v) = match self {
			Self::LocationId(param) => ("location_id", param.into()),
			Self::IndexerRuleId(param) => ("indexer_rule_id", param.into()),
			Self::Location(param) => (
				"location",
				::prisma_client_rust::PrismaValue::Object(
					param.into_iter().map(Into::into).collect(),
				),
			),
			Self::IndexerRule(param) => (
				"indexer_rule",
				::prisma_client_rust::PrismaValue::Object(
					param.into_iter().map(Into::into).collect(),
				),
			),
		};
		(k.to_string(), v)
	}
}
#[derive(Debug, Clone)]
pub enum OrderByRelationAggregateParam {
	_Count(super::SortOrder),
}
impl Into<(String, ::prisma_client_rust::PrismaValue)> for OrderByRelationAggregateParam {
	fn into(self) -> (String, ::prisma_client_rust::PrismaValue) {
		let (k, v) = match self {
			Self::_Count(param) => ("_count", param.into()),
		};
		(k.to_string(), v)
	}
}
#[derive(Debug, Clone)]
pub enum WithParam {
	Location(super::location::UniqueArgs),
	IndexerRule(super::indexer_rule::UniqueArgs),
}
impl Into<::prisma_client_rust::Selection> for WithParam {
	fn into(self) -> ::prisma_client_rust::Selection {
		match self {
			Self::Location(args) => {
				let mut selections =
					<super::location::Types as ::prisma_client_rust::ModelTypes>::scalar_selections(
					);
				selections.extend(
					args.with_params
						.into_iter()
						.map(Into::<::prisma_client_rust::Selection>::into),
				);
				::prisma_client_rust::Selection::new(location::NAME, None, [], selections)
			}
			Self::IndexerRule(args) => {
				let mut selections = < super :: indexer_rule :: Types as :: prisma_client_rust :: ModelTypes > :: scalar_selections () ;
				selections.extend(
					args.with_params
						.into_iter()
						.map(Into::<::prisma_client_rust::Selection>::into),
				);
				::prisma_client_rust::Selection::new(indexer_rule::NAME, None, [], selections)
			}
		}
	}
}
#[derive(Debug, Clone)]
pub enum SetParam {
	LocationId(super::_prisma::write_params::IntParam),
	ConnectLocation(super::location::UniqueWhereParam),
	IndexerRuleId(super::_prisma::write_params::IntParam),
	ConnectIndexerRule(super::indexer_rule::UniqueWhereParam),
}
impl Into<(String, ::prisma_client_rust::PrismaValue)> for SetParam {
	fn into(self) -> (String, ::prisma_client_rust::PrismaValue) {
		let (k, v) = match self {
			Self::LocationId(value) => (location_id::NAME, value.into()),
			Self::ConnectLocation(where_param) => (
				location::NAME,
				::prisma_client_rust::PrismaValue::Object(vec![(
					"connect".to_string(),
					::prisma_client_rust::PrismaValue::Object(
						[where_param]
							.into_iter()
							.map(::prisma_client_rust::WhereInput::serialize)
							.map(::prisma_client_rust::SerializedWhereInput::transform_equals)
							.collect(),
					),
				)]),
			),
			Self::IndexerRuleId(value) => (indexer_rule_id::NAME, value.into()),
			Self::ConnectIndexerRule(where_param) => (
				indexer_rule::NAME,
				::prisma_client_rust::PrismaValue::Object(vec![(
					"connect".to_string(),
					::prisma_client_rust::PrismaValue::Object(
						[where_param]
							.into_iter()
							.map(::prisma_client_rust::WhereInput::serialize)
							.map(::prisma_client_rust::SerializedWhereInput::transform_equals)
							.collect(),
					),
				)]),
			),
		};
		(k.to_string(), v)
	}
}
#[derive(Debug, Clone)]
pub enum UncheckedSetParam {
	LocationId(super::_prisma::write_params::IntParam),
	IndexerRuleId(super::_prisma::write_params::IntParam),
}
impl Into<(String, ::prisma_client_rust::PrismaValue)> for UncheckedSetParam {
	fn into(self) -> (String, ::prisma_client_rust::PrismaValue) {
		let (k, v) = match self {
			Self::LocationId(value) => ("location_id", value.into()),
			Self::IndexerRuleId(value) => ("indexer_rule_id", value.into()),
		};
		(k.to_string(), v)
	}
}
::prisma_client_rust::macros::select_factory!(
	_select_indexer_rules_in_location,
	select,
	prisma::indexer_rules_in_location,
	struct Data {
		#[serde(rename = "location_id")]
		location_id: location_id::Type,
		#[serde(rename = "location")]
		location: location::Type,
		#[serde(rename = "indexer_rule_id")]
		indexer_rule_id: indexer_rule_id::Type,
		#[serde(rename = "indexer_rule")]
		indexer_rule: indexer_rule::Type,
	},
	[
		(location_id, Scalar),
		(location, Relation(prisma::location, One)),
		(indexer_rule_id, Scalar),
		(indexer_rule, Relation(prisma::indexer_rule, One))
	]
);
pub enum SelectParam {
	LocationId(location_id::Select),
	Location(location::Select),
	IndexerRuleId(indexer_rule_id::Select),
	IndexerRule(indexer_rule::Select),
}
impl Into<::prisma_client_rust::Selection> for SelectParam {
	fn into(self) -> ::prisma_client_rust::Selection {
		match self {
			Self::LocationId(data) => data.into(),
			Self::Location(data) => data.into(),
			Self::IndexerRuleId(data) => data.into(),
			Self::IndexerRule(data) => data.into(),
		}
	}
}
::prisma_client_rust::macros::include_factory!(
	_include_indexer_rules_in_location,
	include,
	prisma::indexer_rules_in_location,
	struct Data {
		#[serde(rename = "location_id")]
		location_id: location_id::Type,
		#[serde(rename = "location")]
		location: location::Type,
		#[serde(rename = "indexer_rule_id")]
		indexer_rule_id: indexer_rule_id::Type,
		#[serde(rename = "indexer_rule")]
		indexer_rule: indexer_rule::Type,
	},
	[
		(location, Relation(prisma::location, One)),
		(indexer_rule, Relation(prisma::indexer_rule, One))
	]
);
pub enum IncludeParam {
	LocationId(location_id::Include),
	Location(location::Include),
	IndexerRuleId(indexer_rule_id::Include),
	IndexerRule(indexer_rule::Include),
}
impl Into<::prisma_client_rust::Selection> for IncludeParam {
	fn into(self) -> ::prisma_client_rust::Selection {
		match self {
			Self::LocationId(data) => data.into(),
			Self::Location(data) => data.into(),
			Self::IndexerRuleId(data) => data.into(),
			Self::IndexerRule(data) => data.into(),
		}
	}
}
#[derive(Debug, Clone)]
pub struct Create {
	pub location: super::location::UniqueWhereParam,
	pub indexer_rule: super::indexer_rule::UniqueWhereParam,
	pub _params: Vec<SetParam>,
}
impl Create {
	pub fn to_query<'a>(self, client: &'a PrismaClient) -> CreateQuery<'a> {
		client
			.indexer_rules_in_location()
			.create(self.location, self.indexer_rule, self._params)
	}
	pub fn to_params(mut self) -> Vec<SetParam> {
		self._params.extend([
			location::connect(self.location),
			indexer_rule::connect(self.indexer_rule),
		]);
		self._params
	}
}
pub fn create(
	location: super::location::UniqueWhereParam,
	indexer_rule: super::indexer_rule::UniqueWhereParam,
	_params: Vec<SetParam>,
) -> Create {
	Create {
		location,
		indexer_rule,
		_params,
	}
}
#[derive(Debug, Clone)]
pub struct CreateUnchecked {
	pub location_id: Int,
	pub indexer_rule_id: Int,
	pub _params: Vec<UncheckedSetParam>,
}
impl CreateUnchecked {
	pub fn to_query<'a>(self, client: &'a PrismaClient) -> CreateUncheckedQuery<'a> {
		client.indexer_rules_in_location().create_unchecked(
			self.location_id,
			self.indexer_rule_id,
			self._params,
		)
	}
	pub fn to_params(mut self) -> Vec<UncheckedSetParam> {
		self._params.extend([
			location_id::set(self.location_id),
			indexer_rule_id::set(self.indexer_rule_id),
		]);
		self._params
	}
}
pub fn create_unchecked(
	location_id: Int,
	indexer_rule_id: Int,
	_params: Vec<UncheckedSetParam>,
) -> CreateUnchecked {
	CreateUnchecked {
		location_id,
		indexer_rule_id,
		_params,
	}
}
#[derive(Debug, Clone)]
pub struct Types;
impl ::prisma_client_rust::ModelTypes for Types {
	type Data = Data;
	type Where = WhereParam;
	type WhereUnique = UniqueWhereParam;
	type UncheckedSet = UncheckedSetParam;
	type Set = SetParam;
	type With = WithParam;
	type OrderBy = OrderByWithRelationParam;
	type Cursor = UniqueWhereParam;
	const MODEL: &'static str = NAME;
	fn scalar_selections() -> Vec<::prisma_client_rust::Selection> {
		vec![
			::prisma_client_rust::sel(location_id::NAME),
			::prisma_client_rust::sel(indexer_rule_id::NAME),
		]
	}
}
#[derive(
	Debug,
	Clone,
	:: serde :: Serialize,
	:: serde :: Deserialize,
	:: prisma_client_rust :: specta :: Type,
)]
# [specta (rename = "IndexerRulesInLocation" , crate = prisma_client_rust :: specta)]
pub struct Data {
	#[serde(rename = "location_id")]
	pub location_id: location_id::Type,
	#[serde(rename = "location")]
	#[specta(skip)]
	pub location: Option<location::RecursiveSafeType>,
	#[serde(rename = "indexer_rule_id")]
	pub indexer_rule_id: indexer_rule_id::Type,
	#[serde(rename = "indexer_rule")]
	#[specta(skip)]
	pub indexer_rule: Option<indexer_rule::RecursiveSafeType>,
}
impl Data {
	pub fn location(
		&self,
	) -> Result<&super::location::Data, ::prisma_client_rust::RelationNotFetchedError> {
		self.location
			.as_ref()
			.ok_or(::prisma_client_rust::RelationNotFetchedError::new(
				stringify!(location),
			))
			.map(|v| v.as_ref())
	}
	pub fn indexer_rule(
		&self,
	) -> Result<&super::indexer_rule::Data, ::prisma_client_rust::RelationNotFetchedError> {
		self.indexer_rule
			.as_ref()
			.ok_or(::prisma_client_rust::RelationNotFetchedError::new(
				stringify!(indexer_rule),
			))
			.map(|v| v.as_ref())
	}
}
::prisma_client_rust::macros::partial_unchecked_factory!(
	_partial_unchecked_indexer_rules_in_location,
	prisma::indexer_rules_in_location,
	struct Data {
		#[serde(rename = "location_id")]
		pub location_id: prisma::indexer_rules_in_location::location_id::Type,
		#[serde(rename = "indexer_rule_id")]
		pub indexer_rule_id: prisma::indexer_rules_in_location::indexer_rule_id::Type,
	}
);
::prisma_client_rust::macros::filter_factory!(
	_indexer_rules_in_location_filter,
	prisma::indexer_rules_in_location,
	[
		(location_id, Scalar),
		(location, Relation(prisma::location, One)),
		(indexer_rule_id, Scalar),
		(indexer_rule, Relation(prisma::indexer_rule, One))
	]
);
pub type UniqueArgs = ::prisma_client_rust::UniqueArgs<Types>;
pub type ManyArgs = ::prisma_client_rust::ManyArgs<Types>;
pub type CountQuery<'a> = ::prisma_client_rust::Count<'a, Types>;
pub type CreateQuery<'a> = ::prisma_client_rust::Create<'a, Types>;
pub type CreateUncheckedQuery<'a> = ::prisma_client_rust::CreateUnchecked<'a, Types>;
pub type CreateManyQuery<'a> = ::prisma_client_rust::CreateMany<'a, Types>;
pub type FindUniqueQuery<'a> = ::prisma_client_rust::FindUnique<'a, Types>;
pub type FindManyQuery<'a> = ::prisma_client_rust::FindMany<'a, Types>;
pub type FindFirstQuery<'a> = ::prisma_client_rust::FindFirst<'a, Types>;
pub type UpdateQuery<'a> = ::prisma_client_rust::Update<'a, Types>;
pub type UpdateUncheckedQuery<'a> = ::prisma_client_rust::UpdateUnchecked<'a, Types>;
pub type UpdateManyQuery<'a> = ::prisma_client_rust::UpdateMany<'a, Types>;
pub type UpsertQuery<'a> = ::prisma_client_rust::Upsert<'a, Types>;
pub type DeleteQuery<'a> = ::prisma_client_rust::Delete<'a, Types>;
pub type DeleteManyQuery<'a> = ::prisma_client_rust::DeleteMany<'a, Types>;
#[derive(Clone)]
pub struct Actions<'a> {
	pub client: &'a ::prisma_client_rust::PrismaClientInternals,
}
impl<'a> Actions<'a> {
	pub fn find_unique(self, _where: UniqueWhereParam) -> FindUniqueQuery<'a> {
		FindUniqueQuery::new(self.client, _where)
	}
	pub fn find_first(self, _where: Vec<WhereParam>) -> FindFirstQuery<'a> {
		FindFirstQuery::new(self.client, _where)
	}
	pub fn find_many(self, _where: Vec<WhereParam>) -> FindManyQuery<'a> {
		FindManyQuery::new(self.client, _where)
	}
	pub fn create(
		self,
		location: super::location::UniqueWhereParam,
		indexer_rule: super::indexer_rule::UniqueWhereParam,
		mut _params: Vec<SetParam>,
	) -> CreateQuery<'a> {
		_params.extend([
			location::connect(location),
			indexer_rule::connect(indexer_rule),
		]);
		CreateQuery::new(self.client, _params)
	}
	pub fn create_unchecked(
		self,
		location_id: Int,
		indexer_rule_id: Int,
		mut _params: Vec<UncheckedSetParam>,
	) -> CreateUncheckedQuery<'a> {
		_params.extend([
			location_id::set(location_id),
			indexer_rule_id::set(indexer_rule_id),
		]);
		CreateUncheckedQuery::new(self.client, _params.into_iter().map(Into::into).collect())
	}
	pub fn create_many(self, data: Vec<CreateUnchecked>) -> CreateManyQuery<'a> {
		let data = data.into_iter().map(CreateUnchecked::to_params).collect();
		CreateManyQuery::new(self.client, data)
	}
	pub fn update(self, _where: UniqueWhereParam, _params: Vec<SetParam>) -> UpdateQuery<'a> {
		UpdateQuery::new(self.client, _where, _params, vec![])
	}
	pub fn update_unchecked(
		self,
		_where: UniqueWhereParam,
		_params: Vec<UncheckedSetParam>,
	) -> UpdateUncheckedQuery<'a> {
		UpdateUncheckedQuery::new(
			self.client,
			_where,
			_params.into_iter().map(Into::into).collect(),
			vec![],
		)
	}
	pub fn update_many(
		self,
		_where: Vec<WhereParam>,
		_params: Vec<SetParam>,
	) -> UpdateManyQuery<'a> {
		UpdateManyQuery::new(self.client, _where, _params)
	}
	pub fn upsert(
		self,
		_where: UniqueWhereParam,
		_create: Create,
		_update: Vec<SetParam>,
	) -> UpsertQuery<'a> {
		UpsertQuery::new(self.client, _where, _create.to_params(), _update)
	}
	pub fn delete(self, _where: UniqueWhereParam) -> DeleteQuery<'a> {
		DeleteQuery::new(self.client, _where, vec![])
	}
	pub fn delete_many(self, _where: Vec<WhereParam>) -> DeleteManyQuery<'a> {
		DeleteManyQuery::new(self.client, _where)
	}
	pub fn count(self, _where: Vec<WhereParam>) -> CountQuery<'a> {
		CountQuery::new(self.client, _where)
	}
}
