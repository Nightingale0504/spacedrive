// File generated by Prisma Client Rust. DO NOT EDIT

pub mod _count;
pub mod ffmpeg_data;
pub mod ffmpeg_data_id;
pub mod metadata;
pub mod name;
pub mod program_id;
pub mod streams;
use super::{_prisma::*, *};
pub const NAME: &str = "FfmpegMediaProgram";
pub fn ffmpeg_data_id_program_id<T: From<UniqueWhereParam>>(
	ffmpeg_data_id: Int,
	program_id: Int,
) -> T {
	UniqueWhereParam::FfmpegDataIdProgramIdEquals(ffmpeg_data_id, program_id).into()
}
#[derive(Debug, Clone)]
pub enum WhereParam {
	Not(Vec<WhereParam>),
	Or(Vec<WhereParam>),
	And(Vec<WhereParam>),
	ProgramId(super::_prisma::read_filters::IntFilter),
	StreamsSome(Vec<super::ffmpeg_media_stream::WhereParam>),
	StreamsEvery(Vec<super::ffmpeg_media_stream::WhereParam>),
	StreamsNone(Vec<super::ffmpeg_media_stream::WhereParam>),
	Name(super::_prisma::read_filters::StringNullableFilter),
	Metadata(super::_prisma::read_filters::BytesNullableFilter),
	FfmpegDataIs(Vec<super::ffmpeg_data::WhereParam>),
	FfmpegDataIsNot(Vec<super::ffmpeg_data::WhereParam>),
	FfmpegDataId(super::_prisma::read_filters::IntFilter),
}
impl ::prisma_client_rust::WhereInput for WhereParam {
	fn serialize(self) -> ::prisma_client_rust::SerializedWhereInput {
		let (name, value) = match self {
			Self::Not(value) => (
				"NOT",
				::prisma_client_rust::SerializedWhereValue::Object(
					::prisma_client_rust::merge_fields(
						value
							.into_iter()
							.map(::prisma_client_rust::WhereInput::serialize)
							.map(Into::into)
							.collect(),
					),
				),
			),
			Self::Or(value) => (
				"OR",
				::prisma_client_rust::SerializedWhereValue::List(
					value
						.into_iter()
						.map(::prisma_client_rust::WhereInput::serialize)
						.map(|p| ::prisma_client_rust::PrismaValue::Object(vec![p.into()]))
						.collect(),
				),
			),
			Self::And(value) => (
				"AND",
				::prisma_client_rust::SerializedWhereValue::Object(
					::prisma_client_rust::merge_fields(
						value
							.into_iter()
							.map(::prisma_client_rust::WhereInput::serialize)
							.map(Into::into)
							.collect(),
					),
				),
			),
			Self::ProgramId(value) => (program_id::NAME, value.into()),
			Self::StreamsSome(where_params) => (
				streams::NAME,
				::prisma_client_rust::SerializedWhereValue::Object(vec![(
					"some".to_string(),
					::prisma_client_rust::PrismaValue::Object(
						where_params
							.into_iter()
							.map(::prisma_client_rust::WhereInput::serialize)
							.map(::prisma_client_rust::SerializedWhereInput::transform_equals)
							.collect(),
					),
				)]),
			),
			Self::StreamsEvery(where_params) => (
				streams::NAME,
				::prisma_client_rust::SerializedWhereValue::Object(vec![(
					"every".to_string(),
					::prisma_client_rust::PrismaValue::Object(
						where_params
							.into_iter()
							.map(::prisma_client_rust::WhereInput::serialize)
							.map(::prisma_client_rust::SerializedWhereInput::transform_equals)
							.collect(),
					),
				)]),
			),
			Self::StreamsNone(where_params) => (
				streams::NAME,
				::prisma_client_rust::SerializedWhereValue::Object(vec![(
					"none".to_string(),
					::prisma_client_rust::PrismaValue::Object(
						where_params
							.into_iter()
							.map(::prisma_client_rust::WhereInput::serialize)
							.map(::prisma_client_rust::SerializedWhereInput::transform_equals)
							.collect(),
					),
				)]),
			),
			Self::Name(value) => (name::NAME, value.into()),
			Self::Metadata(value) => (metadata::NAME, value.into()),
			Self::FfmpegDataIs(where_params) => (
				ffmpeg_data::NAME,
				::prisma_client_rust::SerializedWhereValue::Object(vec![(
					"is".to_string(),
					::prisma_client_rust::PrismaValue::Object(
						where_params
							.into_iter()
							.map(::prisma_client_rust::WhereInput::serialize)
							.map(::prisma_client_rust::SerializedWhereInput::transform_equals)
							.collect(),
					),
				)]),
			),
			Self::FfmpegDataIsNot(where_params) => (
				ffmpeg_data::NAME,
				::prisma_client_rust::SerializedWhereValue::Object(vec![(
					"isNot".to_string(),
					::prisma_client_rust::PrismaValue::Object(
						where_params
							.into_iter()
							.map(::prisma_client_rust::WhereInput::serialize)
							.map(::prisma_client_rust::SerializedWhereInput::transform_equals)
							.collect(),
					),
				)]),
			),
			Self::FfmpegDataId(value) => (ffmpeg_data_id::NAME, value.into()),
		};
		::prisma_client_rust::SerializedWhereInput::new(name.to_string(), value.into())
	}
}
#[derive(Debug, Clone)]
pub enum UniqueWhereParam {
	FfmpegDataIdProgramIdEquals(Int, Int),
}
impl ::prisma_client_rust::WhereInput for UniqueWhereParam {
	fn serialize(self) -> ::prisma_client_rust::SerializedWhereInput {
		let (name, value) = match self {
			Self::FfmpegDataIdProgramIdEquals(ffmpeg_data_id, program_id) => (
				"ffmpeg_data_id_program_id",
				::prisma_client_rust::SerializedWhereValue::Object(vec![
					(
						ffmpeg_data_id::NAME.to_string(),
						::prisma_client_rust::PrismaValue::Int(ffmpeg_data_id),
					),
					(
						program_id::NAME.to_string(),
						::prisma_client_rust::PrismaValue::Int(program_id),
					),
				]),
			),
		};
		::prisma_client_rust::SerializedWhereInput::new(name.to_string(), value.into())
	}
}
impl From<::prisma_client_rust::Operator<Self>> for WhereParam {
	fn from(op: ::prisma_client_rust::Operator<Self>) -> Self {
		match op {
			::prisma_client_rust::Operator::Not(value) => Self::Not(value),
			::prisma_client_rust::Operator::And(value) => Self::And(value),
			::prisma_client_rust::Operator::Or(value) => Self::Or(value),
		}
	}
}
#[derive(Debug, Clone)]
pub enum OrderByWithRelationParam {
	ProgramId(super::SortOrder),
	Name(super::SortOrder),
	Metadata(super::SortOrder),
	FfmpegDataId(super::SortOrder),
	Streams(Vec<super::ffmpeg_media_stream::OrderByRelationAggregateParam>),
	FfmpegData(Vec<super::ffmpeg_data::OrderByWithRelationParam>),
}
impl Into<(String, ::prisma_client_rust::PrismaValue)> for OrderByWithRelationParam {
	fn into(self) -> (String, ::prisma_client_rust::PrismaValue) {
		let (k, v) = match self {
			Self::ProgramId(param) => ("program_id", param.into()),
			Self::Name(param) => ("name", param.into()),
			Self::Metadata(param) => ("metadata", param.into()),
			Self::FfmpegDataId(param) => ("ffmpeg_data_id", param.into()),
			Self::Streams(param) => (
				"streams",
				::prisma_client_rust::PrismaValue::Object(
					param.into_iter().map(Into::into).collect(),
				),
			),
			Self::FfmpegData(param) => (
				"ffmpeg_data",
				::prisma_client_rust::PrismaValue::Object(
					param.into_iter().map(Into::into).collect(),
				),
			),
		};
		(k.to_string(), v)
	}
}
#[derive(Debug, Clone)]
pub enum OrderByRelationAggregateParam {
	_Count(super::SortOrder),
}
impl Into<(String, ::prisma_client_rust::PrismaValue)> for OrderByRelationAggregateParam {
	fn into(self) -> (String, ::prisma_client_rust::PrismaValue) {
		let (k, v) = match self {
			Self::_Count(param) => ("_count", param.into()),
		};
		(k.to_string(), v)
	}
}
#[derive(Debug, Clone)]
pub enum WithParam {
	Streams(super::ffmpeg_media_stream::ManyArgs),
	FfmpegData(super::ffmpeg_data::UniqueArgs),
}
impl Into<::prisma_client_rust::Selection> for WithParam {
	fn into(self) -> ::prisma_client_rust::Selection {
		match self {
			Self::Streams(args) => {
				let (arguments, mut nested_selections) = args.to_graphql();
				nested_selections . extend (< super :: ffmpeg_media_stream :: Types as :: prisma_client_rust :: ModelTypes > :: scalar_selections ()) ;
				::prisma_client_rust::Selection::new(
					streams::NAME,
					None,
					arguments,
					nested_selections,
				)
			}
			Self::FfmpegData(args) => {
				let mut selections = < super :: ffmpeg_data :: Types as :: prisma_client_rust :: ModelTypes > :: scalar_selections () ;
				selections.extend(
					args.with_params
						.into_iter()
						.map(Into::<::prisma_client_rust::Selection>::into),
				);
				::prisma_client_rust::Selection::new(ffmpeg_data::NAME, None, [], selections)
			}
		}
	}
}
#[derive(Debug, Clone)]
pub enum SetParam {
	ProgramId(super::_prisma::write_params::IntParam),
	ConnectStreams(Vec<super::ffmpeg_media_stream::UniqueWhereParam>),
	DisconnectStreams(Vec<super::ffmpeg_media_stream::UniqueWhereParam>),
	SetStreams(Vec<super::ffmpeg_media_stream::UniqueWhereParam>),
	Name(super::_prisma::write_params::StringNullableParam),
	Metadata(super::_prisma::write_params::BytesNullableParam),
	ConnectFfmpegData(super::ffmpeg_data::UniqueWhereParam),
	FfmpegDataId(super::_prisma::write_params::IntParam),
}
impl Into<(String, ::prisma_client_rust::PrismaValue)> for SetParam {
	fn into(self) -> (String, ::prisma_client_rust::PrismaValue) {
		let (k, v) = match self {
			Self::ProgramId(value) => (program_id::NAME, value.into()),
			Self::ConnectStreams(where_params) => (
				streams::NAME,
				::prisma_client_rust::PrismaValue::Object(vec![(
					"connect".to_string(),
					::prisma_client_rust::PrismaValue::List(
						where_params
							.into_iter()
							.map(::prisma_client_rust::WhereInput::serialize)
							.map(::prisma_client_rust::SerializedWhereInput::transform_equals)
							.map(|v| ::prisma_client_rust::PrismaValue::Object(vec![v]))
							.collect(),
					),
				)]),
			),
			Self::DisconnectStreams(where_params) => (
				streams::NAME,
				::prisma_client_rust::PrismaValue::Object(vec![(
					"disconnect".to_string(),
					::prisma_client_rust::PrismaValue::List(
						where_params
							.into_iter()
							.map(::prisma_client_rust::WhereInput::serialize)
							.map(::prisma_client_rust::SerializedWhereInput::transform_equals)
							.map(|v| ::prisma_client_rust::PrismaValue::Object(vec![v]))
							.collect(),
					),
				)]),
			),
			Self::SetStreams(where_params) => (
				streams::NAME,
				::prisma_client_rust::PrismaValue::Object(vec![(
					"set".to_string(),
					::prisma_client_rust::PrismaValue::List(
						where_params
							.into_iter()
							.map(::prisma_client_rust::WhereInput::serialize)
							.map(::prisma_client_rust::SerializedWhereInput::transform_equals)
							.map(|v| ::prisma_client_rust::PrismaValue::Object(vec![v]))
							.collect(),
					),
				)]),
			),
			Self::Name(value) => (name::NAME, value.into()),
			Self::Metadata(value) => (metadata::NAME, value.into()),
			Self::ConnectFfmpegData(where_param) => (
				ffmpeg_data::NAME,
				::prisma_client_rust::PrismaValue::Object(vec![(
					"connect".to_string(),
					::prisma_client_rust::PrismaValue::Object(
						[where_param]
							.into_iter()
							.map(::prisma_client_rust::WhereInput::serialize)
							.map(::prisma_client_rust::SerializedWhereInput::transform_equals)
							.collect(),
					),
				)]),
			),
			Self::FfmpegDataId(value) => (ffmpeg_data_id::NAME, value.into()),
		};
		(k.to_string(), v)
	}
}
#[derive(Debug, Clone)]
pub enum UncheckedSetParam {
	ProgramId(super::_prisma::write_params::IntParam),
	Name(super::_prisma::write_params::StringNullableParam),
	Metadata(super::_prisma::write_params::BytesNullableParam),
	FfmpegDataId(super::_prisma::write_params::IntParam),
}
impl Into<(String, ::prisma_client_rust::PrismaValue)> for UncheckedSetParam {
	fn into(self) -> (String, ::prisma_client_rust::PrismaValue) {
		let (k, v) = match self {
			Self::ProgramId(value) => ("program_id", value.into()),
			Self::Name(value) => ("name", value.into()),
			Self::Metadata(value) => ("metadata", value.into()),
			Self::FfmpegDataId(value) => ("ffmpeg_data_id", value.into()),
		};
		(k.to_string(), v)
	}
}
::prisma_client_rust::macros::select_factory!(
	_select_ffmpeg_media_program,
	select,
	prisma::ffmpeg_media_program,
	struct Data {
		#[serde(rename = "program_id")]
		program_id: program_id::Type,
		#[serde(rename = "streams")]
		streams: streams::Type,
		#[serde(rename = "name")]
		name: name::Type,
		#[serde(rename = "metadata")]
		metadata: metadata::Type,
		#[serde(rename = "ffmpeg_data")]
		ffmpeg_data: ffmpeg_data::Type,
		#[serde(rename = "ffmpeg_data_id")]
		ffmpeg_data_id: ffmpeg_data_id::Type,
	},
	[
		(program_id, Scalar),
		(streams, Relation(prisma::ffmpeg_media_stream, Many)),
		(name, Scalar),
		(metadata, Scalar),
		(ffmpeg_data, Relation(prisma::ffmpeg_data, One)),
		(ffmpeg_data_id, Scalar)
	]
);
pub enum SelectParam {
	ProgramId(program_id::Select),
	Streams(streams::Select),
	Name(name::Select),
	Metadata(metadata::Select),
	FfmpegData(ffmpeg_data::Select),
	FfmpegDataId(ffmpeg_data_id::Select),
}
impl Into<::prisma_client_rust::Selection> for SelectParam {
	fn into(self) -> ::prisma_client_rust::Selection {
		match self {
			Self::ProgramId(data) => data.into(),
			Self::Streams(data) => data.into(),
			Self::Name(data) => data.into(),
			Self::Metadata(data) => data.into(),
			Self::FfmpegData(data) => data.into(),
			Self::FfmpegDataId(data) => data.into(),
		}
	}
}
::prisma_client_rust::macros::include_factory!(
	_include_ffmpeg_media_program,
	include,
	prisma::ffmpeg_media_program,
	struct Data {
		#[serde(rename = "program_id")]
		program_id: program_id::Type,
		#[serde(rename = "streams")]
		streams: streams::Type,
		#[serde(rename = "name")]
		name: name::Type,
		#[serde(rename = "metadata")]
		metadata: metadata::Type,
		#[serde(rename = "ffmpeg_data")]
		ffmpeg_data: ffmpeg_data::Type,
		#[serde(rename = "ffmpeg_data_id")]
		ffmpeg_data_id: ffmpeg_data_id::Type,
	},
	[
		(streams, Relation(prisma::ffmpeg_media_stream, Many)),
		(ffmpeg_data, Relation(prisma::ffmpeg_data, One))
	]
);
pub enum IncludeParam {
	ProgramId(program_id::Include),
	Streams(streams::Include),
	Name(name::Include),
	Metadata(metadata::Include),
	FfmpegData(ffmpeg_data::Include),
	FfmpegDataId(ffmpeg_data_id::Include),
}
impl Into<::prisma_client_rust::Selection> for IncludeParam {
	fn into(self) -> ::prisma_client_rust::Selection {
		match self {
			Self::ProgramId(data) => data.into(),
			Self::Streams(data) => data.into(),
			Self::Name(data) => data.into(),
			Self::Metadata(data) => data.into(),
			Self::FfmpegData(data) => data.into(),
			Self::FfmpegDataId(data) => data.into(),
		}
	}
}
#[derive(Debug, Clone)]
pub struct Create {
	pub program_id: Int,
	pub ffmpeg_data: super::ffmpeg_data::UniqueWhereParam,
	pub _params: Vec<SetParam>,
}
impl Create {
	pub fn to_query<'a>(self, client: &'a PrismaClient) -> CreateQuery<'a> {
		client
			.ffmpeg_media_program()
			.create(self.program_id, self.ffmpeg_data, self._params)
	}
	pub fn to_params(mut self) -> Vec<SetParam> {
		self._params.extend([
			program_id::set(self.program_id),
			ffmpeg_data::connect(self.ffmpeg_data),
		]);
		self._params
	}
}
pub fn create(
	program_id: Int,
	ffmpeg_data: super::ffmpeg_data::UniqueWhereParam,
	_params: Vec<SetParam>,
) -> Create {
	Create {
		program_id,
		ffmpeg_data,
		_params,
	}
}
#[derive(Debug, Clone)]
pub struct CreateUnchecked {
	pub program_id: Int,
	pub ffmpeg_data_id: Int,
	pub _params: Vec<UncheckedSetParam>,
}
impl CreateUnchecked {
	pub fn to_query<'a>(self, client: &'a PrismaClient) -> CreateUncheckedQuery<'a> {
		client.ffmpeg_media_program().create_unchecked(
			self.program_id,
			self.ffmpeg_data_id,
			self._params,
		)
	}
	pub fn to_params(mut self) -> Vec<UncheckedSetParam> {
		self._params.extend([
			program_id::set(self.program_id),
			ffmpeg_data_id::set(self.ffmpeg_data_id),
		]);
		self._params
	}
}
pub fn create_unchecked(
	program_id: Int,
	ffmpeg_data_id: Int,
	_params: Vec<UncheckedSetParam>,
) -> CreateUnchecked {
	CreateUnchecked {
		program_id,
		ffmpeg_data_id,
		_params,
	}
}
#[derive(Debug, Clone)]
pub struct Types;
impl ::prisma_client_rust::ModelTypes for Types {
	type Data = Data;
	type Where = WhereParam;
	type WhereUnique = UniqueWhereParam;
	type UncheckedSet = UncheckedSetParam;
	type Set = SetParam;
	type With = WithParam;
	type OrderBy = OrderByWithRelationParam;
	type Cursor = UniqueWhereParam;
	const MODEL: &'static str = NAME;
	fn scalar_selections() -> Vec<::prisma_client_rust::Selection> {
		vec![
			::prisma_client_rust::sel(program_id::NAME),
			::prisma_client_rust::sel(name::NAME),
			::prisma_client_rust::sel(metadata::NAME),
			::prisma_client_rust::sel(ffmpeg_data_id::NAME),
		]
	}
}
#[derive(
	Debug,
	Clone,
	:: serde :: Serialize,
	:: serde :: Deserialize,
	:: prisma_client_rust :: specta :: Type,
)]
# [specta (rename = "FfmpegMediaProgram" , crate = prisma_client_rust :: specta)]
pub struct Data {
	#[serde(rename = "program_id")]
	pub program_id: program_id::Type,
	#[serde(rename = "streams")]
	#[specta(skip)]
	pub streams: Option<streams::RecursiveSafeType>,
	#[serde(rename = "name")]
	pub name: name::Type,
	#[serde(rename = "metadata")]
	pub metadata: metadata::Type,
	#[serde(rename = "ffmpeg_data")]
	#[specta(skip)]
	pub ffmpeg_data: Option<ffmpeg_data::RecursiveSafeType>,
	#[serde(rename = "ffmpeg_data_id")]
	pub ffmpeg_data_id: ffmpeg_data_id::Type,
}
impl Data {
	pub fn streams(&self) -> Result<&streams::Type, ::prisma_client_rust::RelationNotFetchedError> {
		self.streams
			.as_ref()
			.ok_or(::prisma_client_rust::RelationNotFetchedError::new(
				stringify!(streams),
			))
	}
	pub fn ffmpeg_data(
		&self,
	) -> Result<&super::ffmpeg_data::Data, ::prisma_client_rust::RelationNotFetchedError> {
		self.ffmpeg_data
			.as_ref()
			.ok_or(::prisma_client_rust::RelationNotFetchedError::new(
				stringify!(ffmpeg_data),
			))
			.map(|v| v.as_ref())
	}
}
::prisma_client_rust::macros::partial_unchecked_factory!(
	_partial_unchecked_ffmpeg_media_program,
	prisma::ffmpeg_media_program,
	struct Data {
		#[serde(rename = "program_id")]
		pub program_id: prisma::ffmpeg_media_program::program_id::Type,
		#[serde(rename = "name")]
		#[serde(default, with = "::prisma_client_rust::serde::double_option")]
		pub name: prisma::ffmpeg_media_program::name::Type,
		#[serde(rename = "metadata")]
		#[serde(default, with = "::prisma_client_rust::serde::double_option")]
		pub metadata: prisma::ffmpeg_media_program::metadata::Type,
		#[serde(rename = "ffmpeg_data_id")]
		pub ffmpeg_data_id: prisma::ffmpeg_media_program::ffmpeg_data_id::Type,
	}
);
::prisma_client_rust::macros::filter_factory!(
	_ffmpeg_media_program_filter,
	prisma::ffmpeg_media_program,
	[
		(program_id, Scalar),
		(streams, Relation(prisma::ffmpeg_media_stream, Many)),
		(name, Scalar),
		(metadata, Scalar),
		(ffmpeg_data, Relation(prisma::ffmpeg_data, One)),
		(ffmpeg_data_id, Scalar)
	]
);
pub type UniqueArgs = ::prisma_client_rust::UniqueArgs<Types>;
pub type ManyArgs = ::prisma_client_rust::ManyArgs<Types>;
pub type CountQuery<'a> = ::prisma_client_rust::Count<'a, Types>;
pub type CreateQuery<'a> = ::prisma_client_rust::Create<'a, Types>;
pub type CreateUncheckedQuery<'a> = ::prisma_client_rust::CreateUnchecked<'a, Types>;
pub type CreateManyQuery<'a> = ::prisma_client_rust::CreateMany<'a, Types>;
pub type FindUniqueQuery<'a> = ::prisma_client_rust::FindUnique<'a, Types>;
pub type FindManyQuery<'a> = ::prisma_client_rust::FindMany<'a, Types>;
pub type FindFirstQuery<'a> = ::prisma_client_rust::FindFirst<'a, Types>;
pub type UpdateQuery<'a> = ::prisma_client_rust::Update<'a, Types>;
pub type UpdateUncheckedQuery<'a> = ::prisma_client_rust::UpdateUnchecked<'a, Types>;
pub type UpdateManyQuery<'a> = ::prisma_client_rust::UpdateMany<'a, Types>;
pub type UpsertQuery<'a> = ::prisma_client_rust::Upsert<'a, Types>;
pub type DeleteQuery<'a> = ::prisma_client_rust::Delete<'a, Types>;
pub type DeleteManyQuery<'a> = ::prisma_client_rust::DeleteMany<'a, Types>;
#[derive(Clone)]
pub struct Actions<'a> {
	pub client: &'a ::prisma_client_rust::PrismaClientInternals,
}
impl<'a> Actions<'a> {
	pub fn find_unique(self, _where: UniqueWhereParam) -> FindUniqueQuery<'a> {
		FindUniqueQuery::new(self.client, _where)
	}
	pub fn find_first(self, _where: Vec<WhereParam>) -> FindFirstQuery<'a> {
		FindFirstQuery::new(self.client, _where)
	}
	pub fn find_many(self, _where: Vec<WhereParam>) -> FindManyQuery<'a> {
		FindManyQuery::new(self.client, _where)
	}
	pub fn create(
		self,
		program_id: Int,
		ffmpeg_data: super::ffmpeg_data::UniqueWhereParam,
		mut _params: Vec<SetParam>,
	) -> CreateQuery<'a> {
		_params.extend([
			program_id::set(program_id),
			ffmpeg_data::connect(ffmpeg_data),
		]);
		CreateQuery::new(self.client, _params)
	}
	pub fn create_unchecked(
		self,
		program_id: Int,
		ffmpeg_data_id: Int,
		mut _params: Vec<UncheckedSetParam>,
	) -> CreateUncheckedQuery<'a> {
		_params.extend([
			program_id::set(program_id),
			ffmpeg_data_id::set(ffmpeg_data_id),
		]);
		CreateUncheckedQuery::new(self.client, _params.into_iter().map(Into::into).collect())
	}
	pub fn create_many(self, data: Vec<CreateUnchecked>) -> CreateManyQuery<'a> {
		let data = data.into_iter().map(CreateUnchecked::to_params).collect();
		CreateManyQuery::new(self.client, data)
	}
	pub fn update(self, _where: UniqueWhereParam, _params: Vec<SetParam>) -> UpdateQuery<'a> {
		UpdateQuery::new(self.client, _where, _params, vec![])
	}
	pub fn update_unchecked(
		self,
		_where: UniqueWhereParam,
		_params: Vec<UncheckedSetParam>,
	) -> UpdateUncheckedQuery<'a> {
		UpdateUncheckedQuery::new(
			self.client,
			_where,
			_params.into_iter().map(Into::into).collect(),
			vec![],
		)
	}
	pub fn update_many(
		self,
		_where: Vec<WhereParam>,
		_params: Vec<SetParam>,
	) -> UpdateManyQuery<'a> {
		UpdateManyQuery::new(self.client, _where, _params)
	}
	pub fn upsert(
		self,
		_where: UniqueWhereParam,
		_create: Create,
		_update: Vec<SetParam>,
	) -> UpsertQuery<'a> {
		UpsertQuery::new(self.client, _where, _create.to_params(), _update)
	}
	pub fn delete(self, _where: UniqueWhereParam) -> DeleteQuery<'a> {
		DeleteQuery::new(self.client, _where, vec![])
	}
	pub fn delete_many(self, _where: Vec<WhereParam>) -> DeleteManyQuery<'a> {
		DeleteManyQuery::new(self.client, _where)
	}
	pub fn count(self, _where: Vec<WhereParam>) -> CountQuery<'a> {
		CountQuery::new(self.client, _where)
	}
}
