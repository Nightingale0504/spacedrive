// File generated by Prisma Client Rust. DO NOT EDIT

pub mod cloud_crdt_operation;
pub mod crdt_operation;
pub mod date_created;
pub mod id;
pub mod identity;
pub mod last_seen;
pub mod locations;
pub mod metadata;
pub mod node_id;
pub mod node_remote_identity;
pub mod pub_id;
pub mod remote_identity;
pub mod timestamp;
use super::{_prisma::*, *};
pub const NAME: &str = "Instance";
#[derive(Debug, Clone)]
pub enum WhereParam {
	Not(Vec<WhereParam>),
	Or(Vec<WhereParam>),
	And(Vec<WhereParam>),
	Id(super::_prisma::read_filters::IntFilter),
	PubId(super::_prisma::read_filters::BytesFilter),
	Identity(super::_prisma::read_filters::BytesNullableFilter),
	RemoteIdentity(super::_prisma::read_filters::BytesFilter),
	NodeId(super::_prisma::read_filters::BytesFilter),
	NodeRemoteIdentity(super::_prisma::read_filters::BytesNullableFilter),
	Metadata(super::_prisma::read_filters::BytesNullableFilter),
	LastSeen(super::_prisma::read_filters::DateTimeFilter),
	DateCreated(super::_prisma::read_filters::DateTimeFilter),
	Timestamp(super::_prisma::read_filters::BigIntNullableFilter),
	LocationsSome(Vec<super::location::WhereParam>),
	LocationsEvery(Vec<super::location::WhereParam>),
	LocationsNone(Vec<super::location::WhereParam>),
	CrdtOperationSome(Vec<super::crdt_operation::WhereParam>),
	CrdtOperationEvery(Vec<super::crdt_operation::WhereParam>),
	CrdtOperationNone(Vec<super::crdt_operation::WhereParam>),
	CloudCrdtOperationSome(Vec<super::cloud_crdt_operation::WhereParam>),
	CloudCrdtOperationEvery(Vec<super::cloud_crdt_operation::WhereParam>),
	CloudCrdtOperationNone(Vec<super::cloud_crdt_operation::WhereParam>),
}
impl ::prisma_client_rust::WhereInput for WhereParam {
	fn serialize(self) -> ::prisma_client_rust::SerializedWhereInput {
		let (name, value) = match self {
			Self::Not(value) => (
				"NOT",
				::prisma_client_rust::SerializedWhereValue::Object(
					::prisma_client_rust::merge_fields(
						value
							.into_iter()
							.map(::prisma_client_rust::WhereInput::serialize)
							.map(Into::into)
							.collect(),
					),
				),
			),
			Self::Or(value) => (
				"OR",
				::prisma_client_rust::SerializedWhereValue::List(
					value
						.into_iter()
						.map(::prisma_client_rust::WhereInput::serialize)
						.map(|p| ::prisma_client_rust::PrismaValue::Object(vec![p.into()]))
						.collect(),
				),
			),
			Self::And(value) => (
				"AND",
				::prisma_client_rust::SerializedWhereValue::Object(
					::prisma_client_rust::merge_fields(
						value
							.into_iter()
							.map(::prisma_client_rust::WhereInput::serialize)
							.map(Into::into)
							.collect(),
					),
				),
			),
			Self::Id(value) => (id::NAME, value.into()),
			Self::PubId(value) => (pub_id::NAME, value.into()),
			Self::Identity(value) => (identity::NAME, value.into()),
			Self::RemoteIdentity(value) => (remote_identity::NAME, value.into()),
			Self::NodeId(value) => (node_id::NAME, value.into()),
			Self::NodeRemoteIdentity(value) => (node_remote_identity::NAME, value.into()),
			Self::Metadata(value) => (metadata::NAME, value.into()),
			Self::LastSeen(value) => (last_seen::NAME, value.into()),
			Self::DateCreated(value) => (date_created::NAME, value.into()),
			Self::Timestamp(value) => (timestamp::NAME, value.into()),
			Self::LocationsSome(where_params) => (
				locations::NAME,
				::prisma_client_rust::SerializedWhereValue::Object(vec![(
					"some".to_string(),
					::prisma_client_rust::PrismaValue::Object(
						where_params
							.into_iter()
							.map(::prisma_client_rust::WhereInput::serialize)
							.map(::prisma_client_rust::SerializedWhereInput::transform_equals)
							.collect(),
					),
				)]),
			),
			Self::LocationsEvery(where_params) => (
				locations::NAME,
				::prisma_client_rust::SerializedWhereValue::Object(vec![(
					"every".to_string(),
					::prisma_client_rust::PrismaValue::Object(
						where_params
							.into_iter()
							.map(::prisma_client_rust::WhereInput::serialize)
							.map(::prisma_client_rust::SerializedWhereInput::transform_equals)
							.collect(),
					),
				)]),
			),
			Self::LocationsNone(where_params) => (
				locations::NAME,
				::prisma_client_rust::SerializedWhereValue::Object(vec![(
					"none".to_string(),
					::prisma_client_rust::PrismaValue::Object(
						where_params
							.into_iter()
							.map(::prisma_client_rust::WhereInput::serialize)
							.map(::prisma_client_rust::SerializedWhereInput::transform_equals)
							.collect(),
					),
				)]),
			),
			Self::CrdtOperationSome(where_params) => (
				crdt_operation::NAME,
				::prisma_client_rust::SerializedWhereValue::Object(vec![(
					"some".to_string(),
					::prisma_client_rust::PrismaValue::Object(
						where_params
							.into_iter()
							.map(::prisma_client_rust::WhereInput::serialize)
							.map(::prisma_client_rust::SerializedWhereInput::transform_equals)
							.collect(),
					),
				)]),
			),
			Self::CrdtOperationEvery(where_params) => (
				crdt_operation::NAME,
				::prisma_client_rust::SerializedWhereValue::Object(vec![(
					"every".to_string(),
					::prisma_client_rust::PrismaValue::Object(
						where_params
							.into_iter()
							.map(::prisma_client_rust::WhereInput::serialize)
							.map(::prisma_client_rust::SerializedWhereInput::transform_equals)
							.collect(),
					),
				)]),
			),
			Self::CrdtOperationNone(where_params) => (
				crdt_operation::NAME,
				::prisma_client_rust::SerializedWhereValue::Object(vec![(
					"none".to_string(),
					::prisma_client_rust::PrismaValue::Object(
						where_params
							.into_iter()
							.map(::prisma_client_rust::WhereInput::serialize)
							.map(::prisma_client_rust::SerializedWhereInput::transform_equals)
							.collect(),
					),
				)]),
			),
			Self::CloudCrdtOperationSome(where_params) => (
				cloud_crdt_operation::NAME,
				::prisma_client_rust::SerializedWhereValue::Object(vec![(
					"some".to_string(),
					::prisma_client_rust::PrismaValue::Object(
						where_params
							.into_iter()
							.map(::prisma_client_rust::WhereInput::serialize)
							.map(::prisma_client_rust::SerializedWhereInput::transform_equals)
							.collect(),
					),
				)]),
			),
			Self::CloudCrdtOperationEvery(where_params) => (
				cloud_crdt_operation::NAME,
				::prisma_client_rust::SerializedWhereValue::Object(vec![(
					"every".to_string(),
					::prisma_client_rust::PrismaValue::Object(
						where_params
							.into_iter()
							.map(::prisma_client_rust::WhereInput::serialize)
							.map(::prisma_client_rust::SerializedWhereInput::transform_equals)
							.collect(),
					),
				)]),
			),
			Self::CloudCrdtOperationNone(where_params) => (
				cloud_crdt_operation::NAME,
				::prisma_client_rust::SerializedWhereValue::Object(vec![(
					"none".to_string(),
					::prisma_client_rust::PrismaValue::Object(
						where_params
							.into_iter()
							.map(::prisma_client_rust::WhereInput::serialize)
							.map(::prisma_client_rust::SerializedWhereInput::transform_equals)
							.collect(),
					),
				)]),
			),
		};
		::prisma_client_rust::SerializedWhereInput::new(name.to_string(), value.into())
	}
}
#[derive(Debug, Clone)]
pub enum UniqueWhereParam {
	PubIdEquals(Bytes),
	IdEquals(Int),
}
impl ::prisma_client_rust::WhereInput for UniqueWhereParam {
	fn serialize(self) -> ::prisma_client_rust::SerializedWhereInput {
		let (name, value) = match self {
			UniqueWhereParam::PubIdEquals(value) => (
				"pub_id",
				::prisma_client_rust::SerializedWhereValue::Value(
					::prisma_client_rust::PrismaValue::Bytes(value),
				),
			),
			UniqueWhereParam::IdEquals(value) => (
				"id",
				::prisma_client_rust::SerializedWhereValue::Value(
					::prisma_client_rust::PrismaValue::Int(value),
				),
			),
		};
		::prisma_client_rust::SerializedWhereInput::new(name.to_string(), value.into())
	}
}
impl From<::prisma_client_rust::Operator<Self>> for WhereParam {
	fn from(op: ::prisma_client_rust::Operator<Self>) -> Self {
		match op {
			::prisma_client_rust::Operator::Not(value) => Self::Not(value),
			::prisma_client_rust::Operator::And(value) => Self::And(value),
			::prisma_client_rust::Operator::Or(value) => Self::Or(value),
		}
	}
}
#[derive(Debug, Clone)]
pub enum OrderByWithRelationParam {
	Id(super::SortOrder),
	PubId(super::SortOrder),
	Identity(super::SortOrder),
	RemoteIdentity(super::SortOrder),
	NodeId(super::SortOrder),
	NodeRemoteIdentity(super::SortOrder),
	Metadata(super::SortOrder),
	LastSeen(super::SortOrder),
	DateCreated(super::SortOrder),
	Timestamp(super::SortOrder),
	Locations(Vec<super::location::OrderByRelationAggregateParam>),
	CrdtOperation(Vec<super::crdt_operation::OrderByRelationAggregateParam>),
	CloudCrdtOperation(Vec<super::cloud_crdt_operation::OrderByRelationAggregateParam>),
}
impl Into<(String, ::prisma_client_rust::PrismaValue)> for OrderByWithRelationParam {
	fn into(self) -> (String, ::prisma_client_rust::PrismaValue) {
		let (k, v) = match self {
			Self::Id(param) => ("id", param.into()),
			Self::PubId(param) => ("pub_id", param.into()),
			Self::Identity(param) => ("identity", param.into()),
			Self::RemoteIdentity(param) => ("remote_identity", param.into()),
			Self::NodeId(param) => ("node_id", param.into()),
			Self::NodeRemoteIdentity(param) => ("node_remote_identity", param.into()),
			Self::Metadata(param) => ("metadata", param.into()),
			Self::LastSeen(param) => ("last_seen", param.into()),
			Self::DateCreated(param) => ("date_created", param.into()),
			Self::Timestamp(param) => ("timestamp", param.into()),
			Self::Locations(param) => (
				"locations",
				::prisma_client_rust::PrismaValue::Object(
					param.into_iter().map(Into::into).collect(),
				),
			),
			Self::CrdtOperation(param) => (
				"CRDTOperation",
				::prisma_client_rust::PrismaValue::Object(
					param.into_iter().map(Into::into).collect(),
				),
			),
			Self::CloudCrdtOperation(param) => (
				"CloudCRDTOperation",
				::prisma_client_rust::PrismaValue::Object(
					param.into_iter().map(Into::into).collect(),
				),
			),
		};
		(k.to_string(), v)
	}
}
#[derive(Debug, Clone)]
pub enum WithParam {
	Locations(super::location::ManyArgs),
	CrdtOperation(super::crdt_operation::ManyArgs),
	CloudCrdtOperation(super::cloud_crdt_operation::ManyArgs),
}
impl Into<::prisma_client_rust::Selection> for WithParam {
	fn into(self) -> ::prisma_client_rust::Selection {
		match self {
			Self::Locations(args) => {
				let (arguments, mut nested_selections) = args.to_graphql();
				nested_selections.extend(
					<super::location::Types as ::prisma_client_rust::ModelTypes>::scalar_selections(
					),
				);
				::prisma_client_rust::Selection::new(
					locations::NAME,
					None,
					arguments,
					nested_selections,
				)
			}
			Self::CrdtOperation(args) => {
				let (arguments, mut nested_selections) = args.to_graphql();
				nested_selections . extend (< super :: crdt_operation :: Types as :: prisma_client_rust :: ModelTypes > :: scalar_selections ()) ;
				::prisma_client_rust::Selection::new(
					crdt_operation::NAME,
					None,
					arguments,
					nested_selections,
				)
			}
			Self::CloudCrdtOperation(args) => {
				let (arguments, mut nested_selections) = args.to_graphql();
				nested_selections . extend (< super :: cloud_crdt_operation :: Types as :: prisma_client_rust :: ModelTypes > :: scalar_selections ()) ;
				::prisma_client_rust::Selection::new(
					cloud_crdt_operation::NAME,
					None,
					arguments,
					nested_selections,
				)
			}
		}
	}
}
#[derive(Debug, Clone)]
pub enum SetParam {
	Id(super::_prisma::write_params::IntParam),
	PubId(super::_prisma::write_params::BytesParam),
	Identity(super::_prisma::write_params::BytesNullableParam),
	RemoteIdentity(super::_prisma::write_params::BytesParam),
	NodeId(super::_prisma::write_params::BytesParam),
	NodeRemoteIdentity(super::_prisma::write_params::BytesNullableParam),
	Metadata(super::_prisma::write_params::BytesNullableParam),
	LastSeen(super::_prisma::write_params::DateTimeParam),
	DateCreated(super::_prisma::write_params::DateTimeParam),
	Timestamp(super::_prisma::write_params::BigIntNullableParam),
	ConnectLocations(Vec<super::location::UniqueWhereParam>),
	DisconnectLocations(Vec<super::location::UniqueWhereParam>),
	SetLocations(Vec<super::location::UniqueWhereParam>),
	ConnectCrdtOperation(Vec<super::crdt_operation::UniqueWhereParam>),
	DisconnectCrdtOperation(Vec<super::crdt_operation::UniqueWhereParam>),
	SetCrdtOperation(Vec<super::crdt_operation::UniqueWhereParam>),
	ConnectCloudCrdtOperation(Vec<super::cloud_crdt_operation::UniqueWhereParam>),
	DisconnectCloudCrdtOperation(Vec<super::cloud_crdt_operation::UniqueWhereParam>),
	SetCloudCrdtOperation(Vec<super::cloud_crdt_operation::UniqueWhereParam>),
}
impl Into<(String, ::prisma_client_rust::PrismaValue)> for SetParam {
	fn into(self) -> (String, ::prisma_client_rust::PrismaValue) {
		let (k, v) = match self {
			Self::Id(value) => (id::NAME, value.into()),
			Self::PubId(value) => (pub_id::NAME, value.into()),
			Self::Identity(value) => (identity::NAME, value.into()),
			Self::RemoteIdentity(value) => (remote_identity::NAME, value.into()),
			Self::NodeId(value) => (node_id::NAME, value.into()),
			Self::NodeRemoteIdentity(value) => (node_remote_identity::NAME, value.into()),
			Self::Metadata(value) => (metadata::NAME, value.into()),
			Self::LastSeen(value) => (last_seen::NAME, value.into()),
			Self::DateCreated(value) => (date_created::NAME, value.into()),
			Self::Timestamp(value) => (timestamp::NAME, value.into()),
			Self::ConnectLocations(where_params) => (
				locations::NAME,
				::prisma_client_rust::PrismaValue::Object(vec![(
					"connect".to_string(),
					::prisma_client_rust::PrismaValue::List(
						where_params
							.into_iter()
							.map(::prisma_client_rust::WhereInput::serialize)
							.map(::prisma_client_rust::SerializedWhereInput::transform_equals)
							.map(|v| ::prisma_client_rust::PrismaValue::Object(vec![v]))
							.collect(),
					),
				)]),
			),
			Self::DisconnectLocations(where_params) => (
				locations::NAME,
				::prisma_client_rust::PrismaValue::Object(vec![(
					"disconnect".to_string(),
					::prisma_client_rust::PrismaValue::List(
						where_params
							.into_iter()
							.map(::prisma_client_rust::WhereInput::serialize)
							.map(::prisma_client_rust::SerializedWhereInput::transform_equals)
							.map(|v| ::prisma_client_rust::PrismaValue::Object(vec![v]))
							.collect(),
					),
				)]),
			),
			Self::SetLocations(where_params) => (
				locations::NAME,
				::prisma_client_rust::PrismaValue::Object(vec![(
					"set".to_string(),
					::prisma_client_rust::PrismaValue::List(
						where_params
							.into_iter()
							.map(::prisma_client_rust::WhereInput::serialize)
							.map(::prisma_client_rust::SerializedWhereInput::transform_equals)
							.map(|v| ::prisma_client_rust::PrismaValue::Object(vec![v]))
							.collect(),
					),
				)]),
			),
			Self::ConnectCrdtOperation(where_params) => (
				crdt_operation::NAME,
				::prisma_client_rust::PrismaValue::Object(vec![(
					"connect".to_string(),
					::prisma_client_rust::PrismaValue::List(
						where_params
							.into_iter()
							.map(::prisma_client_rust::WhereInput::serialize)
							.map(::prisma_client_rust::SerializedWhereInput::transform_equals)
							.map(|v| ::prisma_client_rust::PrismaValue::Object(vec![v]))
							.collect(),
					),
				)]),
			),
			Self::DisconnectCrdtOperation(where_params) => (
				crdt_operation::NAME,
				::prisma_client_rust::PrismaValue::Object(vec![(
					"disconnect".to_string(),
					::prisma_client_rust::PrismaValue::List(
						where_params
							.into_iter()
							.map(::prisma_client_rust::WhereInput::serialize)
							.map(::prisma_client_rust::SerializedWhereInput::transform_equals)
							.map(|v| ::prisma_client_rust::PrismaValue::Object(vec![v]))
							.collect(),
					),
				)]),
			),
			Self::SetCrdtOperation(where_params) => (
				crdt_operation::NAME,
				::prisma_client_rust::PrismaValue::Object(vec![(
					"set".to_string(),
					::prisma_client_rust::PrismaValue::List(
						where_params
							.into_iter()
							.map(::prisma_client_rust::WhereInput::serialize)
							.map(::prisma_client_rust::SerializedWhereInput::transform_equals)
							.map(|v| ::prisma_client_rust::PrismaValue::Object(vec![v]))
							.collect(),
					),
				)]),
			),
			Self::ConnectCloudCrdtOperation(where_params) => (
				cloud_crdt_operation::NAME,
				::prisma_client_rust::PrismaValue::Object(vec![(
					"connect".to_string(),
					::prisma_client_rust::PrismaValue::List(
						where_params
							.into_iter()
							.map(::prisma_client_rust::WhereInput::serialize)
							.map(::prisma_client_rust::SerializedWhereInput::transform_equals)
							.map(|v| ::prisma_client_rust::PrismaValue::Object(vec![v]))
							.collect(),
					),
				)]),
			),
			Self::DisconnectCloudCrdtOperation(where_params) => (
				cloud_crdt_operation::NAME,
				::prisma_client_rust::PrismaValue::Object(vec![(
					"disconnect".to_string(),
					::prisma_client_rust::PrismaValue::List(
						where_params
							.into_iter()
							.map(::prisma_client_rust::WhereInput::serialize)
							.map(::prisma_client_rust::SerializedWhereInput::transform_equals)
							.map(|v| ::prisma_client_rust::PrismaValue::Object(vec![v]))
							.collect(),
					),
				)]),
			),
			Self::SetCloudCrdtOperation(where_params) => (
				cloud_crdt_operation::NAME,
				::prisma_client_rust::PrismaValue::Object(vec![(
					"set".to_string(),
					::prisma_client_rust::PrismaValue::List(
						where_params
							.into_iter()
							.map(::prisma_client_rust::WhereInput::serialize)
							.map(::prisma_client_rust::SerializedWhereInput::transform_equals)
							.map(|v| ::prisma_client_rust::PrismaValue::Object(vec![v]))
							.collect(),
					),
				)]),
			),
		};
		(k.to_string(), v)
	}
}
#[derive(Debug, Clone)]
pub enum UncheckedSetParam {
	Id(super::_prisma::write_params::IntParam),
	PubId(super::_prisma::write_params::BytesParam),
	Identity(super::_prisma::write_params::BytesNullableParam),
	RemoteIdentity(super::_prisma::write_params::BytesParam),
	NodeId(super::_prisma::write_params::BytesParam),
	NodeRemoteIdentity(super::_prisma::write_params::BytesNullableParam),
	Metadata(super::_prisma::write_params::BytesNullableParam),
	LastSeen(super::_prisma::write_params::DateTimeParam),
	DateCreated(super::_prisma::write_params::DateTimeParam),
	Timestamp(super::_prisma::write_params::BigIntNullableParam),
}
impl Into<(String, ::prisma_client_rust::PrismaValue)> for UncheckedSetParam {
	fn into(self) -> (String, ::prisma_client_rust::PrismaValue) {
		let (k, v) = match self {
			Self::Id(value) => ("id", value.into()),
			Self::PubId(value) => ("pub_id", value.into()),
			Self::Identity(value) => ("identity", value.into()),
			Self::RemoteIdentity(value) => ("remote_identity", value.into()),
			Self::NodeId(value) => ("node_id", value.into()),
			Self::NodeRemoteIdentity(value) => ("node_remote_identity", value.into()),
			Self::Metadata(value) => ("metadata", value.into()),
			Self::LastSeen(value) => ("last_seen", value.into()),
			Self::DateCreated(value) => ("date_created", value.into()),
			Self::Timestamp(value) => ("timestamp", value.into()),
		};
		(k.to_string(), v)
	}
}
::prisma_client_rust::macros::select_factory!(
	_select_instance,
	select,
	prisma::instance,
	struct Data {
		#[serde(rename = "id")]
		id: id::Type,
		#[serde(rename = "pub_id")]
		pub_id: pub_id::Type,
		#[serde(rename = "identity")]
		identity: identity::Type,
		#[serde(rename = "remote_identity")]
		remote_identity: remote_identity::Type,
		#[serde(rename = "node_id")]
		node_id: node_id::Type,
		#[serde(rename = "node_remote_identity")]
		node_remote_identity: node_remote_identity::Type,
		#[serde(rename = "metadata")]
		metadata: metadata::Type,
		#[serde(rename = "last_seen")]
		last_seen: last_seen::Type,
		#[serde(rename = "date_created")]
		date_created: date_created::Type,
		#[serde(rename = "timestamp")]
		timestamp: timestamp::Type,
		#[serde(rename = "locations")]
		locations: locations::Type,
		#[serde(rename = "CRDTOperation")]
		crdt_operation: crdt_operation::Type,
		#[serde(rename = "CloudCRDTOperation")]
		cloud_crdt_operation: cloud_crdt_operation::Type,
	},
	[
		(id, Scalar),
		(pub_id, Scalar),
		(identity, Scalar),
		(remote_identity, Scalar),
		(node_id, Scalar),
		(node_remote_identity, Scalar),
		(metadata, Scalar),
		(last_seen, Scalar),
		(date_created, Scalar),
		(timestamp, Scalar),
		(locations, Relation(prisma::location, Many)),
		(crdt_operation, Relation(prisma::crdt_operation, Many)),
		(
			cloud_crdt_operation,
			Relation(prisma::cloud_crdt_operation, Many)
		)
	]
);
pub enum SelectParam {
	Id(id::Select),
	PubId(pub_id::Select),
	Identity(identity::Select),
	RemoteIdentity(remote_identity::Select),
	NodeId(node_id::Select),
	NodeRemoteIdentity(node_remote_identity::Select),
	Metadata(metadata::Select),
	LastSeen(last_seen::Select),
	DateCreated(date_created::Select),
	Timestamp(timestamp::Select),
	Locations(locations::Select),
	CrdtOperation(crdt_operation::Select),
	CloudCrdtOperation(cloud_crdt_operation::Select),
}
impl Into<::prisma_client_rust::Selection> for SelectParam {
	fn into(self) -> ::prisma_client_rust::Selection {
		match self {
			Self::Id(data) => data.into(),
			Self::PubId(data) => data.into(),
			Self::Identity(data) => data.into(),
			Self::RemoteIdentity(data) => data.into(),
			Self::NodeId(data) => data.into(),
			Self::NodeRemoteIdentity(data) => data.into(),
			Self::Metadata(data) => data.into(),
			Self::LastSeen(data) => data.into(),
			Self::DateCreated(data) => data.into(),
			Self::Timestamp(data) => data.into(),
			Self::Locations(data) => data.into(),
			Self::CrdtOperation(data) => data.into(),
			Self::CloudCrdtOperation(data) => data.into(),
		}
	}
}
::prisma_client_rust::macros::include_factory!(
	_include_instance,
	include,
	prisma::instance,
	struct Data {
		#[serde(rename = "id")]
		id: id::Type,
		#[serde(rename = "pub_id")]
		pub_id: pub_id::Type,
		#[serde(rename = "identity")]
		identity: identity::Type,
		#[serde(rename = "remote_identity")]
		remote_identity: remote_identity::Type,
		#[serde(rename = "node_id")]
		node_id: node_id::Type,
		#[serde(rename = "node_remote_identity")]
		node_remote_identity: node_remote_identity::Type,
		#[serde(rename = "metadata")]
		metadata: metadata::Type,
		#[serde(rename = "last_seen")]
		last_seen: last_seen::Type,
		#[serde(rename = "date_created")]
		date_created: date_created::Type,
		#[serde(rename = "timestamp")]
		timestamp: timestamp::Type,
		#[serde(rename = "locations")]
		locations: locations::Type,
		#[serde(rename = "CRDTOperation")]
		crdt_operation: crdt_operation::Type,
		#[serde(rename = "CloudCRDTOperation")]
		cloud_crdt_operation: cloud_crdt_operation::Type,
	},
	[
		(locations, Relation(prisma::location, Many)),
		(crdt_operation, Relation(prisma::crdt_operation, Many)),
		(
			cloud_crdt_operation,
			Relation(prisma::cloud_crdt_operation, Many)
		)
	]
);
pub enum IncludeParam {
	Id(id::Include),
	PubId(pub_id::Include),
	Identity(identity::Include),
	RemoteIdentity(remote_identity::Include),
	NodeId(node_id::Include),
	NodeRemoteIdentity(node_remote_identity::Include),
	Metadata(metadata::Include),
	LastSeen(last_seen::Include),
	DateCreated(date_created::Include),
	Timestamp(timestamp::Include),
	Locations(locations::Include),
	CrdtOperation(crdt_operation::Include),
	CloudCrdtOperation(cloud_crdt_operation::Include),
}
impl Into<::prisma_client_rust::Selection> for IncludeParam {
	fn into(self) -> ::prisma_client_rust::Selection {
		match self {
			Self::Id(data) => data.into(),
			Self::PubId(data) => data.into(),
			Self::Identity(data) => data.into(),
			Self::RemoteIdentity(data) => data.into(),
			Self::NodeId(data) => data.into(),
			Self::NodeRemoteIdentity(data) => data.into(),
			Self::Metadata(data) => data.into(),
			Self::LastSeen(data) => data.into(),
			Self::DateCreated(data) => data.into(),
			Self::Timestamp(data) => data.into(),
			Self::Locations(data) => data.into(),
			Self::CrdtOperation(data) => data.into(),
			Self::CloudCrdtOperation(data) => data.into(),
		}
	}
}
#[derive(Debug, Clone)]
pub struct Create {
	pub pub_id: Bytes,
	pub remote_identity: Bytes,
	pub node_id: Bytes,
	pub last_seen: DateTime,
	pub date_created: DateTime,
	pub _params: Vec<SetParam>,
}
impl Create {
	pub fn to_query<'a>(self, client: &'a PrismaClient) -> CreateQuery<'a> {
		client.instance().create(
			self.pub_id,
			self.remote_identity,
			self.node_id,
			self.last_seen,
			self.date_created,
			self._params,
		)
	}
	pub fn to_params(mut self) -> Vec<SetParam> {
		self._params.extend([
			pub_id::set(self.pub_id),
			remote_identity::set(self.remote_identity),
			node_id::set(self.node_id),
			last_seen::set(self.last_seen),
			date_created::set(self.date_created),
		]);
		self._params
	}
}
pub fn create(
	pub_id: Bytes,
	remote_identity: Bytes,
	node_id: Bytes,
	last_seen: DateTime,
	date_created: DateTime,
	_params: Vec<SetParam>,
) -> Create {
	Create {
		pub_id,
		remote_identity,
		node_id,
		last_seen,
		date_created,
		_params,
	}
}
#[derive(Debug, Clone)]
pub struct CreateUnchecked {
	pub pub_id: Bytes,
	pub remote_identity: Bytes,
	pub node_id: Bytes,
	pub last_seen: DateTime,
	pub date_created: DateTime,
	pub _params: Vec<UncheckedSetParam>,
}
impl CreateUnchecked {
	pub fn to_query<'a>(self, client: &'a PrismaClient) -> CreateUncheckedQuery<'a> {
		client.instance().create_unchecked(
			self.pub_id,
			self.remote_identity,
			self.node_id,
			self.last_seen,
			self.date_created,
			self._params,
		)
	}
	pub fn to_params(mut self) -> Vec<UncheckedSetParam> {
		self._params.extend([
			pub_id::set(self.pub_id),
			remote_identity::set(self.remote_identity),
			node_id::set(self.node_id),
			last_seen::set(self.last_seen),
			date_created::set(self.date_created),
		]);
		self._params
	}
}
pub fn create_unchecked(
	pub_id: Bytes,
	remote_identity: Bytes,
	node_id: Bytes,
	last_seen: DateTime,
	date_created: DateTime,
	_params: Vec<UncheckedSetParam>,
) -> CreateUnchecked {
	CreateUnchecked {
		pub_id,
		remote_identity,
		node_id,
		last_seen,
		date_created,
		_params,
	}
}
#[derive(Debug, Clone)]
pub struct Types;
impl ::prisma_client_rust::ModelTypes for Types {
	type Data = Data;
	type Where = WhereParam;
	type WhereUnique = UniqueWhereParam;
	type UncheckedSet = UncheckedSetParam;
	type Set = SetParam;
	type With = WithParam;
	type OrderBy = OrderByWithRelationParam;
	type Cursor = UniqueWhereParam;
	const MODEL: &'static str = NAME;
	fn scalar_selections() -> Vec<::prisma_client_rust::Selection> {
		vec![
			::prisma_client_rust::sel(id::NAME),
			::prisma_client_rust::sel(pub_id::NAME),
			::prisma_client_rust::sel(identity::NAME),
			::prisma_client_rust::sel(remote_identity::NAME),
			::prisma_client_rust::sel(node_id::NAME),
			::prisma_client_rust::sel(node_remote_identity::NAME),
			::prisma_client_rust::sel(metadata::NAME),
			::prisma_client_rust::sel(last_seen::NAME),
			::prisma_client_rust::sel(date_created::NAME),
			::prisma_client_rust::sel(timestamp::NAME),
		]
	}
}
#[derive(
	Debug,
	Clone,
	:: serde :: Serialize,
	:: serde :: Deserialize,
	:: prisma_client_rust :: specta :: Type,
)]
# [specta (rename = "Instance" , crate = prisma_client_rust :: specta)]
pub struct Data {
	#[serde(rename = "id")]
	pub id: id::Type,
	#[serde(rename = "pub_id")]
	pub pub_id: pub_id::Type,
	#[serde(rename = "identity")]
	pub identity: identity::Type,
	#[serde(rename = "remote_identity")]
	pub remote_identity: remote_identity::Type,
	#[serde(rename = "node_id")]
	pub node_id: node_id::Type,
	#[serde(rename = "node_remote_identity")]
	pub node_remote_identity: node_remote_identity::Type,
	#[serde(rename = "metadata")]
	pub metadata: metadata::Type,
	#[serde(rename = "last_seen")]
	pub last_seen: last_seen::Type,
	#[serde(rename = "date_created")]
	pub date_created: date_created::Type,
	#[serde(rename = "timestamp")]
	pub timestamp: timestamp::Type,
	#[serde(rename = "locations")]
	#[specta(skip)]
	pub locations: Option<locations::RecursiveSafeType>,
	#[serde(rename = "CRDTOperation")]
	#[specta(skip)]
	pub crdt_operation: Option<crdt_operation::RecursiveSafeType>,
	#[serde(rename = "CloudCRDTOperation")]
	#[specta(skip)]
	pub cloud_crdt_operation: Option<cloud_crdt_operation::RecursiveSafeType>,
}
impl Data {
	pub fn locations(
		&self,
	) -> Result<&locations::Type, ::prisma_client_rust::RelationNotFetchedError> {
		self.locations
			.as_ref()
			.ok_or(::prisma_client_rust::RelationNotFetchedError::new(
				stringify!(locations),
			))
	}
	pub fn crdt_operation(
		&self,
	) -> Result<&crdt_operation::Type, ::prisma_client_rust::RelationNotFetchedError> {
		self.crdt_operation
			.as_ref()
			.ok_or(::prisma_client_rust::RelationNotFetchedError::new(
				stringify!(crdt_operation),
			))
	}
	pub fn cloud_crdt_operation(
		&self,
	) -> Result<&cloud_crdt_operation::Type, ::prisma_client_rust::RelationNotFetchedError> {
		self.cloud_crdt_operation.as_ref().ok_or(
			::prisma_client_rust::RelationNotFetchedError::new(stringify!(cloud_crdt_operation)),
		)
	}
}
::prisma_client_rust::macros::partial_unchecked_factory!(
	_partial_unchecked_instance,
	prisma::instance,
	struct Data {
		#[serde(rename = "id")]
		pub id: prisma::instance::id::Type,
		#[serde(rename = "pub_id")]
		pub pub_id: prisma::instance::pub_id::Type,
		#[serde(rename = "identity")]
		#[serde(default, with = "::prisma_client_rust::serde::double_option")]
		pub identity: prisma::instance::identity::Type,
		#[serde(rename = "remote_identity")]
		pub remote_identity: prisma::instance::remote_identity::Type,
		#[serde(rename = "node_id")]
		pub node_id: prisma::instance::node_id::Type,
		#[serde(rename = "node_remote_identity")]
		#[serde(default, with = "::prisma_client_rust::serde::double_option")]
		pub node_remote_identity: prisma::instance::node_remote_identity::Type,
		#[serde(rename = "metadata")]
		#[serde(default, with = "::prisma_client_rust::serde::double_option")]
		pub metadata: prisma::instance::metadata::Type,
		#[serde(rename = "last_seen")]
		pub last_seen: prisma::instance::last_seen::Type,
		#[serde(rename = "date_created")]
		pub date_created: prisma::instance::date_created::Type,
		#[serde(rename = "timestamp")]
		#[serde(default, with = "::prisma_client_rust::serde::double_option")]
		pub timestamp: prisma::instance::timestamp::Type,
	}
);
::prisma_client_rust::macros::filter_factory!(
	_instance_filter,
	prisma::instance,
	[
		(id, Scalar),
		(pub_id, Scalar),
		(identity, Scalar),
		(remote_identity, Scalar),
		(node_id, Scalar),
		(node_remote_identity, Scalar),
		(metadata, Scalar),
		(last_seen, Scalar),
		(date_created, Scalar),
		(timestamp, Scalar),
		(locations, Relation(prisma::location, Many)),
		(crdt_operation, Relation(prisma::crdt_operation, Many)),
		(
			cloud_crdt_operation,
			Relation(prisma::cloud_crdt_operation, Many)
		)
	]
);
pub type UniqueArgs = ::prisma_client_rust::UniqueArgs<Types>;
pub type ManyArgs = ::prisma_client_rust::ManyArgs<Types>;
pub type CountQuery<'a> = ::prisma_client_rust::Count<'a, Types>;
pub type CreateQuery<'a> = ::prisma_client_rust::Create<'a, Types>;
pub type CreateUncheckedQuery<'a> = ::prisma_client_rust::CreateUnchecked<'a, Types>;
pub type CreateManyQuery<'a> = ::prisma_client_rust::CreateMany<'a, Types>;
pub type FindUniqueQuery<'a> = ::prisma_client_rust::FindUnique<'a, Types>;
pub type FindManyQuery<'a> = ::prisma_client_rust::FindMany<'a, Types>;
pub type FindFirstQuery<'a> = ::prisma_client_rust::FindFirst<'a, Types>;
pub type UpdateQuery<'a> = ::prisma_client_rust::Update<'a, Types>;
pub type UpdateUncheckedQuery<'a> = ::prisma_client_rust::UpdateUnchecked<'a, Types>;
pub type UpdateManyQuery<'a> = ::prisma_client_rust::UpdateMany<'a, Types>;
pub type UpsertQuery<'a> = ::prisma_client_rust::Upsert<'a, Types>;
pub type DeleteQuery<'a> = ::prisma_client_rust::Delete<'a, Types>;
pub type DeleteManyQuery<'a> = ::prisma_client_rust::DeleteMany<'a, Types>;
#[derive(Clone)]
pub struct Actions<'a> {
	pub client: &'a ::prisma_client_rust::PrismaClientInternals,
}
impl<'a> Actions<'a> {
	pub fn find_unique(self, _where: UniqueWhereParam) -> FindUniqueQuery<'a> {
		FindUniqueQuery::new(self.client, _where)
	}
	pub fn find_first(self, _where: Vec<WhereParam>) -> FindFirstQuery<'a> {
		FindFirstQuery::new(self.client, _where)
	}
	pub fn find_many(self, _where: Vec<WhereParam>) -> FindManyQuery<'a> {
		FindManyQuery::new(self.client, _where)
	}
	pub fn create(
		self,
		pub_id: Bytes,
		remote_identity: Bytes,
		node_id: Bytes,
		last_seen: DateTime,
		date_created: DateTime,
		mut _params: Vec<SetParam>,
	) -> CreateQuery<'a> {
		_params.extend([
			pub_id::set(pub_id),
			remote_identity::set(remote_identity),
			node_id::set(node_id),
			last_seen::set(last_seen),
			date_created::set(date_created),
		]);
		CreateQuery::new(self.client, _params)
	}
	pub fn create_unchecked(
		self,
		pub_id: Bytes,
		remote_identity: Bytes,
		node_id: Bytes,
		last_seen: DateTime,
		date_created: DateTime,
		mut _params: Vec<UncheckedSetParam>,
	) -> CreateUncheckedQuery<'a> {
		_params.extend([
			pub_id::set(pub_id),
			remote_identity::set(remote_identity),
			node_id::set(node_id),
			last_seen::set(last_seen),
			date_created::set(date_created),
		]);
		CreateUncheckedQuery::new(self.client, _params.into_iter().map(Into::into).collect())
	}
	pub fn create_many(self, data: Vec<CreateUnchecked>) -> CreateManyQuery<'a> {
		let data = data.into_iter().map(CreateUnchecked::to_params).collect();
		CreateManyQuery::new(self.client, data)
	}
	pub fn update(self, _where: UniqueWhereParam, _params: Vec<SetParam>) -> UpdateQuery<'a> {
		UpdateQuery::new(self.client, _where, _params, vec![])
	}
	pub fn update_unchecked(
		self,
		_where: UniqueWhereParam,
		_params: Vec<UncheckedSetParam>,
	) -> UpdateUncheckedQuery<'a> {
		UpdateUncheckedQuery::new(
			self.client,
			_where,
			_params.into_iter().map(Into::into).collect(),
			vec![],
		)
	}
	pub fn update_many(
		self,
		_where: Vec<WhereParam>,
		_params: Vec<SetParam>,
	) -> UpdateManyQuery<'a> {
		UpdateManyQuery::new(self.client, _where, _params)
	}
	pub fn upsert(
		self,
		_where: UniqueWhereParam,
		_create: Create,
		_update: Vec<SetParam>,
	) -> UpsertQuery<'a> {
		UpsertQuery::new(self.client, _where, _create.to_params(), _update)
	}
	pub fn delete(self, _where: UniqueWhereParam) -> DeleteQuery<'a> {
		DeleteQuery::new(self.client, _where, vec![])
	}
	pub fn delete_many(self, _where: Vec<WhereParam>) -> DeleteManyQuery<'a> {
		DeleteManyQuery::new(self.client, _where)
	}
	pub fn count(self, _where: Vec<WhereParam>) -> CountQuery<'a> {
		CountQuery::new(self.client, _where)
	}
}
