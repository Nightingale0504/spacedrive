// File generated by Prisma Client Rust. DO NOT EDIT

pub mod audio_props;
pub mod bit_rate;
pub mod ffmpeg_data_id;
pub mod id;
pub mod kind;
pub mod name;
pub mod profile;
pub mod program_id;
pub mod stream;
pub mod stream_id;
pub mod sub_kind;
pub mod tag;
pub mod video_props;
use super::{_prisma::*, *};
pub const NAME: &str = "FfmpegMediaCodec";
pub fn ffmpeg_data_id_program_id_stream_id<T: From<UniqueWhereParam>>(
	ffmpeg_data_id: Int,
	program_id: Int,
	stream_id: Int,
) -> T {
	UniqueWhereParam::FfmpegDataIdProgramIdStreamIdEquals(ffmpeg_data_id, program_id, stream_id)
		.into()
}
#[derive(Debug, Clone)]
pub enum WhereParam {
	Not(Vec<WhereParam>),
	Or(Vec<WhereParam>),
	And(Vec<WhereParam>),
	Id(super::_prisma::read_filters::IntFilter),
	Kind(super::_prisma::read_filters::StringNullableFilter),
	SubKind(super::_prisma::read_filters::StringNullableFilter),
	Tag(super::_prisma::read_filters::StringNullableFilter),
	Name(super::_prisma::read_filters::StringNullableFilter),
	Profile(super::_prisma::read_filters::StringNullableFilter),
	BitRate(super::_prisma::read_filters::IntFilter),
	VideoPropsIsNull,
	VideoPropsIs(Vec<super::ffmpeg_media_video_props::WhereParam>),
	VideoPropsIsNot(Vec<super::ffmpeg_media_video_props::WhereParam>),
	AudioPropsIsNull,
	AudioPropsIs(Vec<super::ffmpeg_media_audio_props::WhereParam>),
	AudioPropsIsNot(Vec<super::ffmpeg_media_audio_props::WhereParam>),
	StreamIs(Vec<super::ffmpeg_media_stream::WhereParam>),
	StreamIsNot(Vec<super::ffmpeg_media_stream::WhereParam>),
	StreamId(super::_prisma::read_filters::IntFilter),
	ProgramId(super::_prisma::read_filters::IntFilter),
	FfmpegDataId(super::_prisma::read_filters::IntFilter),
}
impl ::prisma_client_rust::WhereInput for WhereParam {
	fn serialize(self) -> ::prisma_client_rust::SerializedWhereInput {
		let (name, value) = match self {
			Self::Not(value) => (
				"NOT",
				::prisma_client_rust::SerializedWhereValue::Object(
					::prisma_client_rust::merge_fields(
						value
							.into_iter()
							.map(::prisma_client_rust::WhereInput::serialize)
							.map(Into::into)
							.collect(),
					),
				),
			),
			Self::Or(value) => (
				"OR",
				::prisma_client_rust::SerializedWhereValue::List(
					value
						.into_iter()
						.map(::prisma_client_rust::WhereInput::serialize)
						.map(|p| ::prisma_client_rust::PrismaValue::Object(vec![p.into()]))
						.collect(),
				),
			),
			Self::And(value) => (
				"AND",
				::prisma_client_rust::SerializedWhereValue::Object(
					::prisma_client_rust::merge_fields(
						value
							.into_iter()
							.map(::prisma_client_rust::WhereInput::serialize)
							.map(Into::into)
							.collect(),
					),
				),
			),
			Self::Id(value) => (id::NAME, value.into()),
			Self::Kind(value) => (kind::NAME, value.into()),
			Self::SubKind(value) => (sub_kind::NAME, value.into()),
			Self::Tag(value) => (tag::NAME, value.into()),
			Self::Name(value) => (name::NAME, value.into()),
			Self::Profile(value) => (profile::NAME, value.into()),
			Self::BitRate(value) => (bit_rate::NAME, value.into()),
			Self::VideoPropsIsNull => (
				video_props::NAME,
				::prisma_client_rust::SerializedWhereValue::Value(
					::prisma_client_rust::PrismaValue::Null,
				),
			),
			Self::VideoPropsIs(where_params) => (
				video_props::NAME,
				::prisma_client_rust::SerializedWhereValue::Object(vec![(
					"is".to_string(),
					::prisma_client_rust::PrismaValue::Object(
						where_params
							.into_iter()
							.map(::prisma_client_rust::WhereInput::serialize)
							.map(::prisma_client_rust::SerializedWhereInput::transform_equals)
							.collect(),
					),
				)]),
			),
			Self::VideoPropsIsNot(where_params) => (
				video_props::NAME,
				::prisma_client_rust::SerializedWhereValue::Object(vec![(
					"isNot".to_string(),
					::prisma_client_rust::PrismaValue::Object(
						where_params
							.into_iter()
							.map(::prisma_client_rust::WhereInput::serialize)
							.map(::prisma_client_rust::SerializedWhereInput::transform_equals)
							.collect(),
					),
				)]),
			),
			Self::AudioPropsIsNull => (
				audio_props::NAME,
				::prisma_client_rust::SerializedWhereValue::Value(
					::prisma_client_rust::PrismaValue::Null,
				),
			),
			Self::AudioPropsIs(where_params) => (
				audio_props::NAME,
				::prisma_client_rust::SerializedWhereValue::Object(vec![(
					"is".to_string(),
					::prisma_client_rust::PrismaValue::Object(
						where_params
							.into_iter()
							.map(::prisma_client_rust::WhereInput::serialize)
							.map(::prisma_client_rust::SerializedWhereInput::transform_equals)
							.collect(),
					),
				)]),
			),
			Self::AudioPropsIsNot(where_params) => (
				audio_props::NAME,
				::prisma_client_rust::SerializedWhereValue::Object(vec![(
					"isNot".to_string(),
					::prisma_client_rust::PrismaValue::Object(
						where_params
							.into_iter()
							.map(::prisma_client_rust::WhereInput::serialize)
							.map(::prisma_client_rust::SerializedWhereInput::transform_equals)
							.collect(),
					),
				)]),
			),
			Self::StreamIs(where_params) => (
				stream::NAME,
				::prisma_client_rust::SerializedWhereValue::Object(vec![(
					"is".to_string(),
					::prisma_client_rust::PrismaValue::Object(
						where_params
							.into_iter()
							.map(::prisma_client_rust::WhereInput::serialize)
							.map(::prisma_client_rust::SerializedWhereInput::transform_equals)
							.collect(),
					),
				)]),
			),
			Self::StreamIsNot(where_params) => (
				stream::NAME,
				::prisma_client_rust::SerializedWhereValue::Object(vec![(
					"isNot".to_string(),
					::prisma_client_rust::PrismaValue::Object(
						where_params
							.into_iter()
							.map(::prisma_client_rust::WhereInput::serialize)
							.map(::prisma_client_rust::SerializedWhereInput::transform_equals)
							.collect(),
					),
				)]),
			),
			Self::StreamId(value) => (stream_id::NAME, value.into()),
			Self::ProgramId(value) => (program_id::NAME, value.into()),
			Self::FfmpegDataId(value) => (ffmpeg_data_id::NAME, value.into()),
		};
		::prisma_client_rust::SerializedWhereInput::new(name.to_string(), value.into())
	}
}
#[derive(Debug, Clone)]
pub enum UniqueWhereParam {
	FfmpegDataIdProgramIdStreamIdEquals(Int, Int, Int),
	IdEquals(Int),
}
impl ::prisma_client_rust::WhereInput for UniqueWhereParam {
	fn serialize(self) -> ::prisma_client_rust::SerializedWhereInput {
		let (name, value) = match self {
			Self::FfmpegDataIdProgramIdStreamIdEquals(ffmpeg_data_id, program_id, stream_id) => (
				"ffmpeg_data_id_program_id_stream_id",
				::prisma_client_rust::SerializedWhereValue::Object(vec![
					(
						ffmpeg_data_id::NAME.to_string(),
						::prisma_client_rust::PrismaValue::Int(ffmpeg_data_id),
					),
					(
						program_id::NAME.to_string(),
						::prisma_client_rust::PrismaValue::Int(program_id),
					),
					(
						stream_id::NAME.to_string(),
						::prisma_client_rust::PrismaValue::Int(stream_id),
					),
				]),
			),
			UniqueWhereParam::IdEquals(value) => (
				"id",
				::prisma_client_rust::SerializedWhereValue::Value(
					::prisma_client_rust::PrismaValue::Int(value),
				),
			),
		};
		::prisma_client_rust::SerializedWhereInput::new(name.to_string(), value.into())
	}
}
impl From<::prisma_client_rust::Operator<Self>> for WhereParam {
	fn from(op: ::prisma_client_rust::Operator<Self>) -> Self {
		match op {
			::prisma_client_rust::Operator::Not(value) => Self::Not(value),
			::prisma_client_rust::Operator::And(value) => Self::And(value),
			::prisma_client_rust::Operator::Or(value) => Self::Or(value),
		}
	}
}
#[derive(Debug, Clone)]
pub enum OrderByWithRelationParam {
	Id(super::SortOrder),
	Kind(super::SortOrder),
	SubKind(super::SortOrder),
	Tag(super::SortOrder),
	Name(super::SortOrder),
	Profile(super::SortOrder),
	BitRate(super::SortOrder),
	StreamId(super::SortOrder),
	ProgramId(super::SortOrder),
	FfmpegDataId(super::SortOrder),
	VideoProps(Vec<super::ffmpeg_media_video_props::OrderByWithRelationParam>),
	AudioProps(Vec<super::ffmpeg_media_audio_props::OrderByWithRelationParam>),
	Stream(Vec<super::ffmpeg_media_stream::OrderByWithRelationParam>),
}
impl Into<(String, ::prisma_client_rust::PrismaValue)> for OrderByWithRelationParam {
	fn into(self) -> (String, ::prisma_client_rust::PrismaValue) {
		let (k, v) = match self {
			Self::Id(param) => ("id", param.into()),
			Self::Kind(param) => ("kind", param.into()),
			Self::SubKind(param) => ("sub_kind", param.into()),
			Self::Tag(param) => ("tag", param.into()),
			Self::Name(param) => ("name", param.into()),
			Self::Profile(param) => ("profile", param.into()),
			Self::BitRate(param) => ("bit_rate", param.into()),
			Self::StreamId(param) => ("stream_id", param.into()),
			Self::ProgramId(param) => ("program_id", param.into()),
			Self::FfmpegDataId(param) => ("ffmpeg_data_id", param.into()),
			Self::VideoProps(param) => (
				"video_props",
				::prisma_client_rust::PrismaValue::Object(
					param.into_iter().map(Into::into).collect(),
				),
			),
			Self::AudioProps(param) => (
				"audio_props",
				::prisma_client_rust::PrismaValue::Object(
					param.into_iter().map(Into::into).collect(),
				),
			),
			Self::Stream(param) => (
				"stream",
				::prisma_client_rust::PrismaValue::Object(
					param.into_iter().map(Into::into).collect(),
				),
			),
		};
		(k.to_string(), v)
	}
}
#[derive(Debug, Clone)]
pub enum WithParam {
	VideoProps(super::ffmpeg_media_video_props::UniqueArgs),
	AudioProps(super::ffmpeg_media_audio_props::UniqueArgs),
	Stream(super::ffmpeg_media_stream::UniqueArgs),
}
impl Into<::prisma_client_rust::Selection> for WithParam {
	fn into(self) -> ::prisma_client_rust::Selection {
		match self {
			Self::VideoProps(args) => {
				let mut selections = < super :: ffmpeg_media_video_props :: Types as :: prisma_client_rust :: ModelTypes > :: scalar_selections () ;
				selections.extend(
					args.with_params
						.into_iter()
						.map(Into::<::prisma_client_rust::Selection>::into),
				);
				::prisma_client_rust::Selection::new(video_props::NAME, None, [], selections)
			}
			Self::AudioProps(args) => {
				let mut selections = < super :: ffmpeg_media_audio_props :: Types as :: prisma_client_rust :: ModelTypes > :: scalar_selections () ;
				selections.extend(
					args.with_params
						.into_iter()
						.map(Into::<::prisma_client_rust::Selection>::into),
				);
				::prisma_client_rust::Selection::new(audio_props::NAME, None, [], selections)
			}
			Self::Stream(args) => {
				let mut selections = < super :: ffmpeg_media_stream :: Types as :: prisma_client_rust :: ModelTypes > :: scalar_selections () ;
				selections.extend(
					args.with_params
						.into_iter()
						.map(Into::<::prisma_client_rust::Selection>::into),
				);
				::prisma_client_rust::Selection::new(stream::NAME, None, [], selections)
			}
		}
	}
}
#[derive(Debug, Clone)]
pub enum SetParam {
	Id(super::_prisma::write_params::IntParam),
	Kind(super::_prisma::write_params::StringNullableParam),
	SubKind(super::_prisma::write_params::StringNullableParam),
	Tag(super::_prisma::write_params::StringNullableParam),
	Name(super::_prisma::write_params::StringNullableParam),
	Profile(super::_prisma::write_params::StringNullableParam),
	BitRate(super::_prisma::write_params::IntParam),
	ConnectVideoProps(super::ffmpeg_media_video_props::UniqueWhereParam),
	DisconnectVideoProps,
	ConnectAudioProps(super::ffmpeg_media_audio_props::UniqueWhereParam),
	DisconnectAudioProps,
	ConnectStream(super::ffmpeg_media_stream::UniqueWhereParam),
	StreamId(super::_prisma::write_params::IntParam),
	ProgramId(super::_prisma::write_params::IntParam),
	FfmpegDataId(super::_prisma::write_params::IntParam),
}
impl Into<(String, ::prisma_client_rust::PrismaValue)> for SetParam {
	fn into(self) -> (String, ::prisma_client_rust::PrismaValue) {
		let (k, v) = match self {
			Self::Id(value) => (id::NAME, value.into()),
			Self::Kind(value) => (kind::NAME, value.into()),
			Self::SubKind(value) => (sub_kind::NAME, value.into()),
			Self::Tag(value) => (tag::NAME, value.into()),
			Self::Name(value) => (name::NAME, value.into()),
			Self::Profile(value) => (profile::NAME, value.into()),
			Self::BitRate(value) => (bit_rate::NAME, value.into()),
			Self::ConnectVideoProps(where_param) => (
				video_props::NAME,
				::prisma_client_rust::PrismaValue::Object(vec![(
					"connect".to_string(),
					::prisma_client_rust::PrismaValue::Object(
						[where_param]
							.into_iter()
							.map(::prisma_client_rust::WhereInput::serialize)
							.map(::prisma_client_rust::SerializedWhereInput::transform_equals)
							.collect(),
					),
				)]),
			),
			Self::DisconnectVideoProps => (
				video_props::NAME,
				::prisma_client_rust::PrismaValue::Object(vec![(
					"disconnect".to_string(),
					::prisma_client_rust::PrismaValue::Boolean(true),
				)]),
			),
			Self::ConnectAudioProps(where_param) => (
				audio_props::NAME,
				::prisma_client_rust::PrismaValue::Object(vec![(
					"connect".to_string(),
					::prisma_client_rust::PrismaValue::Object(
						[where_param]
							.into_iter()
							.map(::prisma_client_rust::WhereInput::serialize)
							.map(::prisma_client_rust::SerializedWhereInput::transform_equals)
							.collect(),
					),
				)]),
			),
			Self::DisconnectAudioProps => (
				audio_props::NAME,
				::prisma_client_rust::PrismaValue::Object(vec![(
					"disconnect".to_string(),
					::prisma_client_rust::PrismaValue::Boolean(true),
				)]),
			),
			Self::ConnectStream(where_param) => (
				stream::NAME,
				::prisma_client_rust::PrismaValue::Object(vec![(
					"connect".to_string(),
					::prisma_client_rust::PrismaValue::Object(
						[where_param]
							.into_iter()
							.map(::prisma_client_rust::WhereInput::serialize)
							.map(::prisma_client_rust::SerializedWhereInput::transform_equals)
							.collect(),
					),
				)]),
			),
			Self::StreamId(value) => (stream_id::NAME, value.into()),
			Self::ProgramId(value) => (program_id::NAME, value.into()),
			Self::FfmpegDataId(value) => (ffmpeg_data_id::NAME, value.into()),
		};
		(k.to_string(), v)
	}
}
#[derive(Debug, Clone)]
pub enum UncheckedSetParam {
	Id(super::_prisma::write_params::IntParam),
	Kind(super::_prisma::write_params::StringNullableParam),
	SubKind(super::_prisma::write_params::StringNullableParam),
	Tag(super::_prisma::write_params::StringNullableParam),
	Name(super::_prisma::write_params::StringNullableParam),
	Profile(super::_prisma::write_params::StringNullableParam),
	BitRate(super::_prisma::write_params::IntParam),
	StreamId(super::_prisma::write_params::IntParam),
	ProgramId(super::_prisma::write_params::IntParam),
	FfmpegDataId(super::_prisma::write_params::IntParam),
}
impl Into<(String, ::prisma_client_rust::PrismaValue)> for UncheckedSetParam {
	fn into(self) -> (String, ::prisma_client_rust::PrismaValue) {
		let (k, v) = match self {
			Self::Id(value) => ("id", value.into()),
			Self::Kind(value) => ("kind", value.into()),
			Self::SubKind(value) => ("sub_kind", value.into()),
			Self::Tag(value) => ("tag", value.into()),
			Self::Name(value) => ("name", value.into()),
			Self::Profile(value) => ("profile", value.into()),
			Self::BitRate(value) => ("bit_rate", value.into()),
			Self::StreamId(value) => ("stream_id", value.into()),
			Self::ProgramId(value) => ("program_id", value.into()),
			Self::FfmpegDataId(value) => ("ffmpeg_data_id", value.into()),
		};
		(k.to_string(), v)
	}
}
::prisma_client_rust::macros::select_factory!(
	_select_ffmpeg_media_codec,
	select,
	prisma::ffmpeg_media_codec,
	struct Data {
		#[serde(rename = "id")]
		id: id::Type,
		#[serde(rename = "kind")]
		kind: kind::Type,
		#[serde(rename = "sub_kind")]
		sub_kind: sub_kind::Type,
		#[serde(rename = "tag")]
		tag: tag::Type,
		#[serde(rename = "name")]
		name: name::Type,
		#[serde(rename = "profile")]
		profile: profile::Type,
		#[serde(rename = "bit_rate")]
		bit_rate: bit_rate::Type,
		#[serde(rename = "video_props")]
		video_props: video_props::Type,
		#[serde(rename = "audio_props")]
		audio_props: audio_props::Type,
		#[serde(rename = "stream")]
		stream: stream::Type,
		#[serde(rename = "stream_id")]
		stream_id: stream_id::Type,
		#[serde(rename = "program_id")]
		program_id: program_id::Type,
		#[serde(rename = "ffmpeg_data_id")]
		ffmpeg_data_id: ffmpeg_data_id::Type,
	},
	[
		(id, Scalar),
		(kind, Scalar),
		(sub_kind, Scalar),
		(tag, Scalar),
		(name, Scalar),
		(profile, Scalar),
		(bit_rate, Scalar),
		(
			video_props,
			Relation(prisma::ffmpeg_media_video_props, Optional)
		),
		(
			audio_props,
			Relation(prisma::ffmpeg_media_audio_props, Optional)
		),
		(stream, Relation(prisma::ffmpeg_media_stream, One)),
		(stream_id, Scalar),
		(program_id, Scalar),
		(ffmpeg_data_id, Scalar)
	]
);
pub enum SelectParam {
	Id(id::Select),
	Kind(kind::Select),
	SubKind(sub_kind::Select),
	Tag(tag::Select),
	Name(name::Select),
	Profile(profile::Select),
	BitRate(bit_rate::Select),
	VideoProps(video_props::Select),
	AudioProps(audio_props::Select),
	Stream(stream::Select),
	StreamId(stream_id::Select),
	ProgramId(program_id::Select),
	FfmpegDataId(ffmpeg_data_id::Select),
}
impl Into<::prisma_client_rust::Selection> for SelectParam {
	fn into(self) -> ::prisma_client_rust::Selection {
		match self {
			Self::Id(data) => data.into(),
			Self::Kind(data) => data.into(),
			Self::SubKind(data) => data.into(),
			Self::Tag(data) => data.into(),
			Self::Name(data) => data.into(),
			Self::Profile(data) => data.into(),
			Self::BitRate(data) => data.into(),
			Self::VideoProps(data) => data.into(),
			Self::AudioProps(data) => data.into(),
			Self::Stream(data) => data.into(),
			Self::StreamId(data) => data.into(),
			Self::ProgramId(data) => data.into(),
			Self::FfmpegDataId(data) => data.into(),
		}
	}
}
::prisma_client_rust::macros::include_factory!(
	_include_ffmpeg_media_codec,
	include,
	prisma::ffmpeg_media_codec,
	struct Data {
		#[serde(rename = "id")]
		id: id::Type,
		#[serde(rename = "kind")]
		kind: kind::Type,
		#[serde(rename = "sub_kind")]
		sub_kind: sub_kind::Type,
		#[serde(rename = "tag")]
		tag: tag::Type,
		#[serde(rename = "name")]
		name: name::Type,
		#[serde(rename = "profile")]
		profile: profile::Type,
		#[serde(rename = "bit_rate")]
		bit_rate: bit_rate::Type,
		#[serde(rename = "video_props")]
		video_props: video_props::Type,
		#[serde(rename = "audio_props")]
		audio_props: audio_props::Type,
		#[serde(rename = "stream")]
		stream: stream::Type,
		#[serde(rename = "stream_id")]
		stream_id: stream_id::Type,
		#[serde(rename = "program_id")]
		program_id: program_id::Type,
		#[serde(rename = "ffmpeg_data_id")]
		ffmpeg_data_id: ffmpeg_data_id::Type,
	},
	[
		(
			video_props,
			Relation(prisma::ffmpeg_media_video_props, Optional)
		),
		(
			audio_props,
			Relation(prisma::ffmpeg_media_audio_props, Optional)
		),
		(stream, Relation(prisma::ffmpeg_media_stream, One))
	]
);
pub enum IncludeParam {
	Id(id::Include),
	Kind(kind::Include),
	SubKind(sub_kind::Include),
	Tag(tag::Include),
	Name(name::Include),
	Profile(profile::Include),
	BitRate(bit_rate::Include),
	VideoProps(video_props::Include),
	AudioProps(audio_props::Include),
	Stream(stream::Include),
	StreamId(stream_id::Include),
	ProgramId(program_id::Include),
	FfmpegDataId(ffmpeg_data_id::Include),
}
impl Into<::prisma_client_rust::Selection> for IncludeParam {
	fn into(self) -> ::prisma_client_rust::Selection {
		match self {
			Self::Id(data) => data.into(),
			Self::Kind(data) => data.into(),
			Self::SubKind(data) => data.into(),
			Self::Tag(data) => data.into(),
			Self::Name(data) => data.into(),
			Self::Profile(data) => data.into(),
			Self::BitRate(data) => data.into(),
			Self::VideoProps(data) => data.into(),
			Self::AudioProps(data) => data.into(),
			Self::Stream(data) => data.into(),
			Self::StreamId(data) => data.into(),
			Self::ProgramId(data) => data.into(),
			Self::FfmpegDataId(data) => data.into(),
		}
	}
}
#[derive(Debug, Clone)]
pub struct Create {
	pub bit_rate: Int,
	pub stream: super::ffmpeg_media_stream::UniqueWhereParam,
	pub _params: Vec<SetParam>,
}
impl Create {
	pub fn to_query<'a>(self, client: &'a PrismaClient) -> CreateQuery<'a> {
		client
			.ffmpeg_media_codec()
			.create(self.bit_rate, self.stream, self._params)
	}
	pub fn to_params(mut self) -> Vec<SetParam> {
		self._params
			.extend([bit_rate::set(self.bit_rate), stream::connect(self.stream)]);
		self._params
	}
}
pub fn create(
	bit_rate: Int,
	stream: super::ffmpeg_media_stream::UniqueWhereParam,
	_params: Vec<SetParam>,
) -> Create {
	Create {
		bit_rate,
		stream,
		_params,
	}
}
#[derive(Debug, Clone)]
pub struct CreateUnchecked {
	pub bit_rate: Int,
	pub stream_id: Int,
	pub program_id: Int,
	pub ffmpeg_data_id: Int,
	pub _params: Vec<UncheckedSetParam>,
}
impl CreateUnchecked {
	pub fn to_query<'a>(self, client: &'a PrismaClient) -> CreateUncheckedQuery<'a> {
		client.ffmpeg_media_codec().create_unchecked(
			self.bit_rate,
			self.stream_id,
			self.program_id,
			self.ffmpeg_data_id,
			self._params,
		)
	}
	pub fn to_params(mut self) -> Vec<UncheckedSetParam> {
		self._params.extend([
			bit_rate::set(self.bit_rate),
			stream_id::set(self.stream_id),
			program_id::set(self.program_id),
			ffmpeg_data_id::set(self.ffmpeg_data_id),
		]);
		self._params
	}
}
pub fn create_unchecked(
	bit_rate: Int,
	stream_id: Int,
	program_id: Int,
	ffmpeg_data_id: Int,
	_params: Vec<UncheckedSetParam>,
) -> CreateUnchecked {
	CreateUnchecked {
		bit_rate,
		stream_id,
		program_id,
		ffmpeg_data_id,
		_params,
	}
}
#[derive(Debug, Clone)]
pub struct Types;
impl ::prisma_client_rust::ModelTypes for Types {
	type Data = Data;
	type Where = WhereParam;
	type WhereUnique = UniqueWhereParam;
	type UncheckedSet = UncheckedSetParam;
	type Set = SetParam;
	type With = WithParam;
	type OrderBy = OrderByWithRelationParam;
	type Cursor = UniqueWhereParam;
	const MODEL: &'static str = NAME;
	fn scalar_selections() -> Vec<::prisma_client_rust::Selection> {
		vec![
			::prisma_client_rust::sel(id::NAME),
			::prisma_client_rust::sel(kind::NAME),
			::prisma_client_rust::sel(sub_kind::NAME),
			::prisma_client_rust::sel(tag::NAME),
			::prisma_client_rust::sel(name::NAME),
			::prisma_client_rust::sel(profile::NAME),
			::prisma_client_rust::sel(bit_rate::NAME),
			::prisma_client_rust::sel(stream_id::NAME),
			::prisma_client_rust::sel(program_id::NAME),
			::prisma_client_rust::sel(ffmpeg_data_id::NAME),
		]
	}
}
#[derive(
	Debug,
	Clone,
	:: serde :: Serialize,
	:: serde :: Deserialize,
	:: prisma_client_rust :: specta :: Type,
)]
# [specta (rename = "FfmpegMediaCodec" , crate = prisma_client_rust :: specta)]
pub struct Data {
	#[serde(rename = "id")]
	pub id: id::Type,
	#[serde(rename = "kind")]
	pub kind: kind::Type,
	#[serde(rename = "sub_kind")]
	pub sub_kind: sub_kind::Type,
	#[serde(rename = "tag")]
	pub tag: tag::Type,
	#[serde(rename = "name")]
	pub name: name::Type,
	#[serde(rename = "profile")]
	pub profile: profile::Type,
	#[serde(rename = "bit_rate")]
	pub bit_rate: bit_rate::Type,
	#[serde(
		rename = "video_props",
		default,
		skip_serializing_if = "Option::is_none",
		with = "prisma_client_rust::serde::double_option"
	)]
	#[specta(skip)]
	pub video_props: Option<video_props::RecursiveSafeType>,
	#[serde(
		rename = "audio_props",
		default,
		skip_serializing_if = "Option::is_none",
		with = "prisma_client_rust::serde::double_option"
	)]
	#[specta(skip)]
	pub audio_props: Option<audio_props::RecursiveSafeType>,
	#[serde(rename = "stream")]
	#[specta(skip)]
	pub stream: Option<stream::RecursiveSafeType>,
	#[serde(rename = "stream_id")]
	pub stream_id: stream_id::Type,
	#[serde(rename = "program_id")]
	pub program_id: program_id::Type,
	#[serde(rename = "ffmpeg_data_id")]
	pub ffmpeg_data_id: ffmpeg_data_id::Type,
}
impl Data {
	pub fn video_props(
		&self,
	) -> Result<
		Option<&super::ffmpeg_media_video_props::Data>,
		::prisma_client_rust::RelationNotFetchedError,
	> {
		self.video_props
			.as_ref()
			.ok_or(::prisma_client_rust::RelationNotFetchedError::new(
				stringify!(video_props),
			))
			.map(|v| v.as_ref().map(|v| v.as_ref()))
	}
	pub fn audio_props(
		&self,
	) -> Result<
		Option<&super::ffmpeg_media_audio_props::Data>,
		::prisma_client_rust::RelationNotFetchedError,
	> {
		self.audio_props
			.as_ref()
			.ok_or(::prisma_client_rust::RelationNotFetchedError::new(
				stringify!(audio_props),
			))
			.map(|v| v.as_ref().map(|v| v.as_ref()))
	}
	pub fn stream(
		&self,
	) -> Result<&super::ffmpeg_media_stream::Data, ::prisma_client_rust::RelationNotFetchedError> {
		self.stream
			.as_ref()
			.ok_or(::prisma_client_rust::RelationNotFetchedError::new(
				stringify!(stream),
			))
			.map(|v| v.as_ref())
	}
}
::prisma_client_rust::macros::partial_unchecked_factory!(
	_partial_unchecked_ffmpeg_media_codec,
	prisma::ffmpeg_media_codec,
	struct Data {
		#[serde(rename = "id")]
		pub id: prisma::ffmpeg_media_codec::id::Type,
		#[serde(rename = "kind")]
		#[serde(default, with = "::prisma_client_rust::serde::double_option")]
		pub kind: prisma::ffmpeg_media_codec::kind::Type,
		#[serde(rename = "sub_kind")]
		#[serde(default, with = "::prisma_client_rust::serde::double_option")]
		pub sub_kind: prisma::ffmpeg_media_codec::sub_kind::Type,
		#[serde(rename = "tag")]
		#[serde(default, with = "::prisma_client_rust::serde::double_option")]
		pub tag: prisma::ffmpeg_media_codec::tag::Type,
		#[serde(rename = "name")]
		#[serde(default, with = "::prisma_client_rust::serde::double_option")]
		pub name: prisma::ffmpeg_media_codec::name::Type,
		#[serde(rename = "profile")]
		#[serde(default, with = "::prisma_client_rust::serde::double_option")]
		pub profile: prisma::ffmpeg_media_codec::profile::Type,
		#[serde(rename = "bit_rate")]
		pub bit_rate: prisma::ffmpeg_media_codec::bit_rate::Type,
		#[serde(rename = "stream_id")]
		pub stream_id: prisma::ffmpeg_media_codec::stream_id::Type,
		#[serde(rename = "program_id")]
		pub program_id: prisma::ffmpeg_media_codec::program_id::Type,
		#[serde(rename = "ffmpeg_data_id")]
		pub ffmpeg_data_id: prisma::ffmpeg_media_codec::ffmpeg_data_id::Type,
	}
);
::prisma_client_rust::macros::filter_factory!(
	_ffmpeg_media_codec_filter,
	prisma::ffmpeg_media_codec,
	[
		(id, Scalar),
		(kind, Scalar),
		(sub_kind, Scalar),
		(tag, Scalar),
		(name, Scalar),
		(profile, Scalar),
		(bit_rate, Scalar),
		(
			video_props,
			Relation(prisma::ffmpeg_media_video_props, Optional)
		),
		(
			audio_props,
			Relation(prisma::ffmpeg_media_audio_props, Optional)
		),
		(stream, Relation(prisma::ffmpeg_media_stream, One)),
		(stream_id, Scalar),
		(program_id, Scalar),
		(ffmpeg_data_id, Scalar)
	]
);
pub type UniqueArgs = ::prisma_client_rust::UniqueArgs<Types>;
pub type ManyArgs = ::prisma_client_rust::ManyArgs<Types>;
pub type CountQuery<'a> = ::prisma_client_rust::Count<'a, Types>;
pub type CreateQuery<'a> = ::prisma_client_rust::Create<'a, Types>;
pub type CreateUncheckedQuery<'a> = ::prisma_client_rust::CreateUnchecked<'a, Types>;
pub type CreateManyQuery<'a> = ::prisma_client_rust::CreateMany<'a, Types>;
pub type FindUniqueQuery<'a> = ::prisma_client_rust::FindUnique<'a, Types>;
pub type FindManyQuery<'a> = ::prisma_client_rust::FindMany<'a, Types>;
pub type FindFirstQuery<'a> = ::prisma_client_rust::FindFirst<'a, Types>;
pub type UpdateQuery<'a> = ::prisma_client_rust::Update<'a, Types>;
pub type UpdateUncheckedQuery<'a> = ::prisma_client_rust::UpdateUnchecked<'a, Types>;
pub type UpdateManyQuery<'a> = ::prisma_client_rust::UpdateMany<'a, Types>;
pub type UpsertQuery<'a> = ::prisma_client_rust::Upsert<'a, Types>;
pub type DeleteQuery<'a> = ::prisma_client_rust::Delete<'a, Types>;
pub type DeleteManyQuery<'a> = ::prisma_client_rust::DeleteMany<'a, Types>;
#[derive(Clone)]
pub struct Actions<'a> {
	pub client: &'a ::prisma_client_rust::PrismaClientInternals,
}
impl<'a> Actions<'a> {
	pub fn find_unique(self, _where: UniqueWhereParam) -> FindUniqueQuery<'a> {
		FindUniqueQuery::new(self.client, _where)
	}
	pub fn find_first(self, _where: Vec<WhereParam>) -> FindFirstQuery<'a> {
		FindFirstQuery::new(self.client, _where)
	}
	pub fn find_many(self, _where: Vec<WhereParam>) -> FindManyQuery<'a> {
		FindManyQuery::new(self.client, _where)
	}
	pub fn create(
		self,
		bit_rate: Int,
		stream: super::ffmpeg_media_stream::UniqueWhereParam,
		mut _params: Vec<SetParam>,
	) -> CreateQuery<'a> {
		_params.extend([bit_rate::set(bit_rate), stream::connect(stream)]);
		CreateQuery::new(self.client, _params)
	}
	pub fn create_unchecked(
		self,
		bit_rate: Int,
		stream_id: Int,
		program_id: Int,
		ffmpeg_data_id: Int,
		mut _params: Vec<UncheckedSetParam>,
	) -> CreateUncheckedQuery<'a> {
		_params.extend([
			bit_rate::set(bit_rate),
			stream_id::set(stream_id),
			program_id::set(program_id),
			ffmpeg_data_id::set(ffmpeg_data_id),
		]);
		CreateUncheckedQuery::new(self.client, _params.into_iter().map(Into::into).collect())
	}
	pub fn create_many(self, data: Vec<CreateUnchecked>) -> CreateManyQuery<'a> {
		let data = data.into_iter().map(CreateUnchecked::to_params).collect();
		CreateManyQuery::new(self.client, data)
	}
	pub fn update(self, _where: UniqueWhereParam, _params: Vec<SetParam>) -> UpdateQuery<'a> {
		UpdateQuery::new(self.client, _where, _params, vec![])
	}
	pub fn update_unchecked(
		self,
		_where: UniqueWhereParam,
		_params: Vec<UncheckedSetParam>,
	) -> UpdateUncheckedQuery<'a> {
		UpdateUncheckedQuery::new(
			self.client,
			_where,
			_params.into_iter().map(Into::into).collect(),
			vec![],
		)
	}
	pub fn update_many(
		self,
		_where: Vec<WhereParam>,
		_params: Vec<SetParam>,
	) -> UpdateManyQuery<'a> {
		UpdateManyQuery::new(self.client, _where, _params)
	}
	pub fn upsert(
		self,
		_where: UniqueWhereParam,
		_create: Create,
		_update: Vec<SetParam>,
	) -> UpsertQuery<'a> {
		UpsertQuery::new(self.client, _where, _create.to_params(), _update)
	}
	pub fn delete(self, _where: UniqueWhereParam) -> DeleteQuery<'a> {
		DeleteQuery::new(self.client, _where, vec![])
	}
	pub fn delete_many(self, _where: Vec<WhereParam>) -> DeleteManyQuery<'a> {
		DeleteManyQuery::new(self.client, _where)
	}
	pub fn count(self, _where: Vec<WhereParam>) -> CountQuery<'a> {
		CountQuery::new(self.client, _where)
	}
}
