// File generated by Prisma Client Rust. DO NOT EDIT

pub mod _count;
pub mod available_capacity;
pub mod date_created;
pub mod file_paths;
pub mod generate_preview_media;
pub mod hidden;
pub mod id;
pub mod indexer_rules;
pub mod instance;
pub mod instance_id;
pub mod is_archived;
pub mod name;
pub mod path;
pub mod pub_id;
pub mod scan_state;
pub mod size_in_bytes;
pub mod sync_preview_media;
pub mod total_capacity;
use super::{_prisma::*, *};
pub const NAME: &str = "Location";
#[derive(Debug, Clone)]
pub enum WhereParam {
	Not(Vec<WhereParam>),
	Or(Vec<WhereParam>),
	And(Vec<WhereParam>),
	Id(super::_prisma::read_filters::IntFilter),
	PubId(super::_prisma::read_filters::BytesFilter),
	Name(super::_prisma::read_filters::StringNullableFilter),
	Path(super::_prisma::read_filters::StringNullableFilter),
	TotalCapacity(super::_prisma::read_filters::IntNullableFilter),
	AvailableCapacity(super::_prisma::read_filters::IntNullableFilter),
	SizeInBytes(super::_prisma::read_filters::BytesNullableFilter),
	IsArchived(super::_prisma::read_filters::BooleanNullableFilter),
	GeneratePreviewMedia(super::_prisma::read_filters::BooleanNullableFilter),
	SyncPreviewMedia(super::_prisma::read_filters::BooleanNullableFilter),
	Hidden(super::_prisma::read_filters::BooleanNullableFilter),
	DateCreated(super::_prisma::read_filters::DateTimeNullableFilter),
	ScanState(super::_prisma::read_filters::IntFilter),
	InstanceId(super::_prisma::read_filters::IntNullableFilter),
	InstanceIsNull,
	InstanceIs(Vec<super::instance::WhereParam>),
	InstanceIsNot(Vec<super::instance::WhereParam>),
	FilePathsSome(Vec<super::file_path::WhereParam>),
	FilePathsEvery(Vec<super::file_path::WhereParam>),
	FilePathsNone(Vec<super::file_path::WhereParam>),
	IndexerRulesSome(Vec<super::indexer_rules_in_location::WhereParam>),
	IndexerRulesEvery(Vec<super::indexer_rules_in_location::WhereParam>),
	IndexerRulesNone(Vec<super::indexer_rules_in_location::WhereParam>),
}
impl ::prisma_client_rust::WhereInput for WhereParam {
	fn serialize(self) -> ::prisma_client_rust::SerializedWhereInput {
		let (name, value) = match self {
			Self::Not(value) => (
				"NOT",
				::prisma_client_rust::SerializedWhereValue::Object(
					::prisma_client_rust::merge_fields(
						value
							.into_iter()
							.map(::prisma_client_rust::WhereInput::serialize)
							.map(Into::into)
							.collect(),
					),
				),
			),
			Self::Or(value) => (
				"OR",
				::prisma_client_rust::SerializedWhereValue::List(
					value
						.into_iter()
						.map(::prisma_client_rust::WhereInput::serialize)
						.map(|p| ::prisma_client_rust::PrismaValue::Object(vec![p.into()]))
						.collect(),
				),
			),
			Self::And(value) => (
				"AND",
				::prisma_client_rust::SerializedWhereValue::Object(
					::prisma_client_rust::merge_fields(
						value
							.into_iter()
							.map(::prisma_client_rust::WhereInput::serialize)
							.map(Into::into)
							.collect(),
					),
				),
			),
			Self::Id(value) => (id::NAME, value.into()),
			Self::PubId(value) => (pub_id::NAME, value.into()),
			Self::Name(value) => (name::NAME, value.into()),
			Self::Path(value) => (path::NAME, value.into()),
			Self::TotalCapacity(value) => (total_capacity::NAME, value.into()),
			Self::AvailableCapacity(value) => (available_capacity::NAME, value.into()),
			Self::SizeInBytes(value) => (size_in_bytes::NAME, value.into()),
			Self::IsArchived(value) => (is_archived::NAME, value.into()),
			Self::GeneratePreviewMedia(value) => (generate_preview_media::NAME, value.into()),
			Self::SyncPreviewMedia(value) => (sync_preview_media::NAME, value.into()),
			Self::Hidden(value) => (hidden::NAME, value.into()),
			Self::DateCreated(value) => (date_created::NAME, value.into()),
			Self::ScanState(value) => (scan_state::NAME, value.into()),
			Self::InstanceId(value) => (instance_id::NAME, value.into()),
			Self::InstanceIsNull => (
				instance::NAME,
				::prisma_client_rust::SerializedWhereValue::Value(
					::prisma_client_rust::PrismaValue::Null,
				),
			),
			Self::InstanceIs(where_params) => (
				instance::NAME,
				::prisma_client_rust::SerializedWhereValue::Object(vec![(
					"is".to_string(),
					::prisma_client_rust::PrismaValue::Object(
						where_params
							.into_iter()
							.map(::prisma_client_rust::WhereInput::serialize)
							.map(::prisma_client_rust::SerializedWhereInput::transform_equals)
							.collect(),
					),
				)]),
			),
			Self::InstanceIsNot(where_params) => (
				instance::NAME,
				::prisma_client_rust::SerializedWhereValue::Object(vec![(
					"isNot".to_string(),
					::prisma_client_rust::PrismaValue::Object(
						where_params
							.into_iter()
							.map(::prisma_client_rust::WhereInput::serialize)
							.map(::prisma_client_rust::SerializedWhereInput::transform_equals)
							.collect(),
					),
				)]),
			),
			Self::FilePathsSome(where_params) => (
				file_paths::NAME,
				::prisma_client_rust::SerializedWhereValue::Object(vec![(
					"some".to_string(),
					::prisma_client_rust::PrismaValue::Object(
						where_params
							.into_iter()
							.map(::prisma_client_rust::WhereInput::serialize)
							.map(::prisma_client_rust::SerializedWhereInput::transform_equals)
							.collect(),
					),
				)]),
			),
			Self::FilePathsEvery(where_params) => (
				file_paths::NAME,
				::prisma_client_rust::SerializedWhereValue::Object(vec![(
					"every".to_string(),
					::prisma_client_rust::PrismaValue::Object(
						where_params
							.into_iter()
							.map(::prisma_client_rust::WhereInput::serialize)
							.map(::prisma_client_rust::SerializedWhereInput::transform_equals)
							.collect(),
					),
				)]),
			),
			Self::FilePathsNone(where_params) => (
				file_paths::NAME,
				::prisma_client_rust::SerializedWhereValue::Object(vec![(
					"none".to_string(),
					::prisma_client_rust::PrismaValue::Object(
						where_params
							.into_iter()
							.map(::prisma_client_rust::WhereInput::serialize)
							.map(::prisma_client_rust::SerializedWhereInput::transform_equals)
							.collect(),
					),
				)]),
			),
			Self::IndexerRulesSome(where_params) => (
				indexer_rules::NAME,
				::prisma_client_rust::SerializedWhereValue::Object(vec![(
					"some".to_string(),
					::prisma_client_rust::PrismaValue::Object(
						where_params
							.into_iter()
							.map(::prisma_client_rust::WhereInput::serialize)
							.map(::prisma_client_rust::SerializedWhereInput::transform_equals)
							.collect(),
					),
				)]),
			),
			Self::IndexerRulesEvery(where_params) => (
				indexer_rules::NAME,
				::prisma_client_rust::SerializedWhereValue::Object(vec![(
					"every".to_string(),
					::prisma_client_rust::PrismaValue::Object(
						where_params
							.into_iter()
							.map(::prisma_client_rust::WhereInput::serialize)
							.map(::prisma_client_rust::SerializedWhereInput::transform_equals)
							.collect(),
					),
				)]),
			),
			Self::IndexerRulesNone(where_params) => (
				indexer_rules::NAME,
				::prisma_client_rust::SerializedWhereValue::Object(vec![(
					"none".to_string(),
					::prisma_client_rust::PrismaValue::Object(
						where_params
							.into_iter()
							.map(::prisma_client_rust::WhereInput::serialize)
							.map(::prisma_client_rust::SerializedWhereInput::transform_equals)
							.collect(),
					),
				)]),
			),
		};
		::prisma_client_rust::SerializedWhereInput::new(name.to_string(), value.into())
	}
}
#[derive(Debug, Clone)]
pub enum UniqueWhereParam {
	PubIdEquals(Bytes),
	IdEquals(Int),
}
impl ::prisma_client_rust::WhereInput for UniqueWhereParam {
	fn serialize(self) -> ::prisma_client_rust::SerializedWhereInput {
		let (name, value) = match self {
			UniqueWhereParam::PubIdEquals(value) => (
				"pub_id",
				::prisma_client_rust::SerializedWhereValue::Value(
					::prisma_client_rust::PrismaValue::Bytes(value),
				),
			),
			UniqueWhereParam::IdEquals(value) => (
				"id",
				::prisma_client_rust::SerializedWhereValue::Value(
					::prisma_client_rust::PrismaValue::Int(value),
				),
			),
		};
		::prisma_client_rust::SerializedWhereInput::new(name.to_string(), value.into())
	}
}
impl From<::prisma_client_rust::Operator<Self>> for WhereParam {
	fn from(op: ::prisma_client_rust::Operator<Self>) -> Self {
		match op {
			::prisma_client_rust::Operator::Not(value) => Self::Not(value),
			::prisma_client_rust::Operator::And(value) => Self::And(value),
			::prisma_client_rust::Operator::Or(value) => Self::Or(value),
		}
	}
}
#[derive(Debug, Clone)]
pub enum OrderByWithRelationParam {
	Id(super::SortOrder),
	PubId(super::SortOrder),
	Name(super::SortOrder),
	Path(super::SortOrder),
	TotalCapacity(super::SortOrder),
	AvailableCapacity(super::SortOrder),
	SizeInBytes(super::SortOrder),
	IsArchived(super::SortOrder),
	GeneratePreviewMedia(super::SortOrder),
	SyncPreviewMedia(super::SortOrder),
	Hidden(super::SortOrder),
	DateCreated(super::SortOrder),
	ScanState(super::SortOrder),
	InstanceId(super::SortOrder),
	Instance(Vec<super::instance::OrderByWithRelationParam>),
	FilePaths(Vec<super::file_path::OrderByRelationAggregateParam>),
	IndexerRules(Vec<super::indexer_rules_in_location::OrderByRelationAggregateParam>),
}
impl Into<(String, ::prisma_client_rust::PrismaValue)> for OrderByWithRelationParam {
	fn into(self) -> (String, ::prisma_client_rust::PrismaValue) {
		let (k, v) = match self {
			Self::Id(param) => ("id", param.into()),
			Self::PubId(param) => ("pub_id", param.into()),
			Self::Name(param) => ("name", param.into()),
			Self::Path(param) => ("path", param.into()),
			Self::TotalCapacity(param) => ("total_capacity", param.into()),
			Self::AvailableCapacity(param) => ("available_capacity", param.into()),
			Self::SizeInBytes(param) => ("size_in_bytes", param.into()),
			Self::IsArchived(param) => ("is_archived", param.into()),
			Self::GeneratePreviewMedia(param) => ("generate_preview_media", param.into()),
			Self::SyncPreviewMedia(param) => ("sync_preview_media", param.into()),
			Self::Hidden(param) => ("hidden", param.into()),
			Self::DateCreated(param) => ("date_created", param.into()),
			Self::ScanState(param) => ("scan_state", param.into()),
			Self::InstanceId(param) => ("instance_id", param.into()),
			Self::Instance(param) => (
				"instance",
				::prisma_client_rust::PrismaValue::Object(
					param.into_iter().map(Into::into).collect(),
				),
			),
			Self::FilePaths(param) => (
				"file_paths",
				::prisma_client_rust::PrismaValue::Object(
					param.into_iter().map(Into::into).collect(),
				),
			),
			Self::IndexerRules(param) => (
				"indexer_rules",
				::prisma_client_rust::PrismaValue::Object(
					param.into_iter().map(Into::into).collect(),
				),
			),
		};
		(k.to_string(), v)
	}
}
#[derive(Debug, Clone)]
pub enum OrderByRelationAggregateParam {
	_Count(super::SortOrder),
}
impl Into<(String, ::prisma_client_rust::PrismaValue)> for OrderByRelationAggregateParam {
	fn into(self) -> (String, ::prisma_client_rust::PrismaValue) {
		let (k, v) = match self {
			Self::_Count(param) => ("_count", param.into()),
		};
		(k.to_string(), v)
	}
}
#[derive(Debug, Clone)]
pub enum WithParam {
	Instance(super::instance::UniqueArgs),
	FilePaths(super::file_path::ManyArgs),
	IndexerRules(super::indexer_rules_in_location::ManyArgs),
}
impl Into<::prisma_client_rust::Selection> for WithParam {
	fn into(self) -> ::prisma_client_rust::Selection {
		match self {
			Self::Instance(args) => {
				let mut selections =
					<super::instance::Types as ::prisma_client_rust::ModelTypes>::scalar_selections(
					);
				selections.extend(
					args.with_params
						.into_iter()
						.map(Into::<::prisma_client_rust::Selection>::into),
				);
				::prisma_client_rust::Selection::new(instance::NAME, None, [], selections)
			}
			Self::FilePaths(args) => {
				let (arguments, mut nested_selections) = args.to_graphql();
				nested_selections . extend (< super :: file_path :: Types as :: prisma_client_rust :: ModelTypes > :: scalar_selections ()) ;
				::prisma_client_rust::Selection::new(
					file_paths::NAME,
					None,
					arguments,
					nested_selections,
				)
			}
			Self::IndexerRules(args) => {
				let (arguments, mut nested_selections) = args.to_graphql();
				nested_selections . extend (< super :: indexer_rules_in_location :: Types as :: prisma_client_rust :: ModelTypes > :: scalar_selections ()) ;
				::prisma_client_rust::Selection::new(
					indexer_rules::NAME,
					None,
					arguments,
					nested_selections,
				)
			}
		}
	}
}
#[derive(Debug, Clone)]
pub enum SetParam {
	Id(super::_prisma::write_params::IntParam),
	PubId(super::_prisma::write_params::BytesParam),
	Name(super::_prisma::write_params::StringNullableParam),
	Path(super::_prisma::write_params::StringNullableParam),
	TotalCapacity(super::_prisma::write_params::IntNullableParam),
	AvailableCapacity(super::_prisma::write_params::IntNullableParam),
	SizeInBytes(super::_prisma::write_params::BytesNullableParam),
	IsArchived(super::_prisma::write_params::BooleanNullableParam),
	GeneratePreviewMedia(super::_prisma::write_params::BooleanNullableParam),
	SyncPreviewMedia(super::_prisma::write_params::BooleanNullableParam),
	Hidden(super::_prisma::write_params::BooleanNullableParam),
	DateCreated(super::_prisma::write_params::DateTimeNullableParam),
	ScanState(super::_prisma::write_params::IntParam),
	InstanceId(super::_prisma::write_params::IntNullableParam),
	ConnectInstance(super::instance::UniqueWhereParam),
	DisconnectInstance,
	ConnectFilePaths(Vec<super::file_path::UniqueWhereParam>),
	DisconnectFilePaths(Vec<super::file_path::UniqueWhereParam>),
	SetFilePaths(Vec<super::file_path::UniqueWhereParam>),
	ConnectIndexerRules(Vec<super::indexer_rules_in_location::UniqueWhereParam>),
	DisconnectIndexerRules(Vec<super::indexer_rules_in_location::UniqueWhereParam>),
	SetIndexerRules(Vec<super::indexer_rules_in_location::UniqueWhereParam>),
}
impl Into<(String, ::prisma_client_rust::PrismaValue)> for SetParam {
	fn into(self) -> (String, ::prisma_client_rust::PrismaValue) {
		let (k, v) = match self {
			Self::Id(value) => (id::NAME, value.into()),
			Self::PubId(value) => (pub_id::NAME, value.into()),
			Self::Name(value) => (name::NAME, value.into()),
			Self::Path(value) => (path::NAME, value.into()),
			Self::TotalCapacity(value) => (total_capacity::NAME, value.into()),
			Self::AvailableCapacity(value) => (available_capacity::NAME, value.into()),
			Self::SizeInBytes(value) => (size_in_bytes::NAME, value.into()),
			Self::IsArchived(value) => (is_archived::NAME, value.into()),
			Self::GeneratePreviewMedia(value) => (generate_preview_media::NAME, value.into()),
			Self::SyncPreviewMedia(value) => (sync_preview_media::NAME, value.into()),
			Self::Hidden(value) => (hidden::NAME, value.into()),
			Self::DateCreated(value) => (date_created::NAME, value.into()),
			Self::ScanState(value) => (scan_state::NAME, value.into()),
			Self::InstanceId(value) => (instance_id::NAME, value.into()),
			Self::ConnectInstance(where_param) => (
				instance::NAME,
				::prisma_client_rust::PrismaValue::Object(vec![(
					"connect".to_string(),
					::prisma_client_rust::PrismaValue::Object(
						[where_param]
							.into_iter()
							.map(::prisma_client_rust::WhereInput::serialize)
							.map(::prisma_client_rust::SerializedWhereInput::transform_equals)
							.collect(),
					),
				)]),
			),
			Self::DisconnectInstance => (
				instance::NAME,
				::prisma_client_rust::PrismaValue::Object(vec![(
					"disconnect".to_string(),
					::prisma_client_rust::PrismaValue::Boolean(true),
				)]),
			),
			Self::ConnectFilePaths(where_params) => (
				file_paths::NAME,
				::prisma_client_rust::PrismaValue::Object(vec![(
					"connect".to_string(),
					::prisma_client_rust::PrismaValue::List(
						where_params
							.into_iter()
							.map(::prisma_client_rust::WhereInput::serialize)
							.map(::prisma_client_rust::SerializedWhereInput::transform_equals)
							.map(|v| ::prisma_client_rust::PrismaValue::Object(vec![v]))
							.collect(),
					),
				)]),
			),
			Self::DisconnectFilePaths(where_params) => (
				file_paths::NAME,
				::prisma_client_rust::PrismaValue::Object(vec![(
					"disconnect".to_string(),
					::prisma_client_rust::PrismaValue::List(
						where_params
							.into_iter()
							.map(::prisma_client_rust::WhereInput::serialize)
							.map(::prisma_client_rust::SerializedWhereInput::transform_equals)
							.map(|v| ::prisma_client_rust::PrismaValue::Object(vec![v]))
							.collect(),
					),
				)]),
			),
			Self::SetFilePaths(where_params) => (
				file_paths::NAME,
				::prisma_client_rust::PrismaValue::Object(vec![(
					"set".to_string(),
					::prisma_client_rust::PrismaValue::List(
						where_params
							.into_iter()
							.map(::prisma_client_rust::WhereInput::serialize)
							.map(::prisma_client_rust::SerializedWhereInput::transform_equals)
							.map(|v| ::prisma_client_rust::PrismaValue::Object(vec![v]))
							.collect(),
					),
				)]),
			),
			Self::ConnectIndexerRules(where_params) => (
				indexer_rules::NAME,
				::prisma_client_rust::PrismaValue::Object(vec![(
					"connect".to_string(),
					::prisma_client_rust::PrismaValue::List(
						where_params
							.into_iter()
							.map(::prisma_client_rust::WhereInput::serialize)
							.map(::prisma_client_rust::SerializedWhereInput::transform_equals)
							.map(|v| ::prisma_client_rust::PrismaValue::Object(vec![v]))
							.collect(),
					),
				)]),
			),
			Self::DisconnectIndexerRules(where_params) => (
				indexer_rules::NAME,
				::prisma_client_rust::PrismaValue::Object(vec![(
					"disconnect".to_string(),
					::prisma_client_rust::PrismaValue::List(
						where_params
							.into_iter()
							.map(::prisma_client_rust::WhereInput::serialize)
							.map(::prisma_client_rust::SerializedWhereInput::transform_equals)
							.map(|v| ::prisma_client_rust::PrismaValue::Object(vec![v]))
							.collect(),
					),
				)]),
			),
			Self::SetIndexerRules(where_params) => (
				indexer_rules::NAME,
				::prisma_client_rust::PrismaValue::Object(vec![(
					"set".to_string(),
					::prisma_client_rust::PrismaValue::List(
						where_params
							.into_iter()
							.map(::prisma_client_rust::WhereInput::serialize)
							.map(::prisma_client_rust::SerializedWhereInput::transform_equals)
							.map(|v| ::prisma_client_rust::PrismaValue::Object(vec![v]))
							.collect(),
					),
				)]),
			),
		};
		(k.to_string(), v)
	}
}
#[derive(Debug, Clone)]
pub enum UncheckedSetParam {
	Id(super::_prisma::write_params::IntParam),
	PubId(super::_prisma::write_params::BytesParam),
	Name(super::_prisma::write_params::StringNullableParam),
	Path(super::_prisma::write_params::StringNullableParam),
	TotalCapacity(super::_prisma::write_params::IntNullableParam),
	AvailableCapacity(super::_prisma::write_params::IntNullableParam),
	SizeInBytes(super::_prisma::write_params::BytesNullableParam),
	IsArchived(super::_prisma::write_params::BooleanNullableParam),
	GeneratePreviewMedia(super::_prisma::write_params::BooleanNullableParam),
	SyncPreviewMedia(super::_prisma::write_params::BooleanNullableParam),
	Hidden(super::_prisma::write_params::BooleanNullableParam),
	DateCreated(super::_prisma::write_params::DateTimeNullableParam),
	ScanState(super::_prisma::write_params::IntParam),
	InstanceId(super::_prisma::write_params::IntNullableParam),
}
impl Into<(String, ::prisma_client_rust::PrismaValue)> for UncheckedSetParam {
	fn into(self) -> (String, ::prisma_client_rust::PrismaValue) {
		let (k, v) = match self {
			Self::Id(value) => ("id", value.into()),
			Self::PubId(value) => ("pub_id", value.into()),
			Self::Name(value) => ("name", value.into()),
			Self::Path(value) => ("path", value.into()),
			Self::TotalCapacity(value) => ("total_capacity", value.into()),
			Self::AvailableCapacity(value) => ("available_capacity", value.into()),
			Self::SizeInBytes(value) => ("size_in_bytes", value.into()),
			Self::IsArchived(value) => ("is_archived", value.into()),
			Self::GeneratePreviewMedia(value) => ("generate_preview_media", value.into()),
			Self::SyncPreviewMedia(value) => ("sync_preview_media", value.into()),
			Self::Hidden(value) => ("hidden", value.into()),
			Self::DateCreated(value) => ("date_created", value.into()),
			Self::ScanState(value) => ("scan_state", value.into()),
			Self::InstanceId(value) => ("instance_id", value.into()),
		};
		(k.to_string(), v)
	}
}
::prisma_client_rust::macros::select_factory!(
	_select_location,
	select,
	prisma::location,
	struct Data {
		#[serde(rename = "id")]
		id: id::Type,
		#[serde(rename = "pub_id")]
		pub_id: pub_id::Type,
		#[serde(rename = "name")]
		name: name::Type,
		#[serde(rename = "path")]
		path: path::Type,
		#[serde(rename = "total_capacity")]
		total_capacity: total_capacity::Type,
		#[serde(rename = "available_capacity")]
		available_capacity: available_capacity::Type,
		#[serde(rename = "size_in_bytes")]
		size_in_bytes: size_in_bytes::Type,
		#[serde(rename = "is_archived")]
		is_archived: is_archived::Type,
		#[serde(rename = "generate_preview_media")]
		generate_preview_media: generate_preview_media::Type,
		#[serde(rename = "sync_preview_media")]
		sync_preview_media: sync_preview_media::Type,
		#[serde(rename = "hidden")]
		hidden: hidden::Type,
		#[serde(rename = "date_created")]
		date_created: date_created::Type,
		#[serde(rename = "scan_state")]
		scan_state: scan_state::Type,
		#[serde(rename = "instance_id")]
		instance_id: instance_id::Type,
		#[serde(rename = "instance")]
		instance: instance::Type,
		#[serde(rename = "file_paths")]
		file_paths: file_paths::Type,
		#[serde(rename = "indexer_rules")]
		indexer_rules: indexer_rules::Type,
	},
	[
		(id, Scalar),
		(pub_id, Scalar),
		(name, Scalar),
		(path, Scalar),
		(total_capacity, Scalar),
		(available_capacity, Scalar),
		(size_in_bytes, Scalar),
		(is_archived, Scalar),
		(generate_preview_media, Scalar),
		(sync_preview_media, Scalar),
		(hidden, Scalar),
		(date_created, Scalar),
		(scan_state, Scalar),
		(instance_id, Scalar),
		(instance, Relation(prisma::instance, Optional)),
		(file_paths, Relation(prisma::file_path, Many)),
		(
			indexer_rules,
			Relation(prisma::indexer_rules_in_location, Many)
		)
	]
);
pub enum SelectParam {
	Id(id::Select),
	PubId(pub_id::Select),
	Name(name::Select),
	Path(path::Select),
	TotalCapacity(total_capacity::Select),
	AvailableCapacity(available_capacity::Select),
	SizeInBytes(size_in_bytes::Select),
	IsArchived(is_archived::Select),
	GeneratePreviewMedia(generate_preview_media::Select),
	SyncPreviewMedia(sync_preview_media::Select),
	Hidden(hidden::Select),
	DateCreated(date_created::Select),
	ScanState(scan_state::Select),
	InstanceId(instance_id::Select),
	Instance(instance::Select),
	FilePaths(file_paths::Select),
	IndexerRules(indexer_rules::Select),
}
impl Into<::prisma_client_rust::Selection> for SelectParam {
	fn into(self) -> ::prisma_client_rust::Selection {
		match self {
			Self::Id(data) => data.into(),
			Self::PubId(data) => data.into(),
			Self::Name(data) => data.into(),
			Self::Path(data) => data.into(),
			Self::TotalCapacity(data) => data.into(),
			Self::AvailableCapacity(data) => data.into(),
			Self::SizeInBytes(data) => data.into(),
			Self::IsArchived(data) => data.into(),
			Self::GeneratePreviewMedia(data) => data.into(),
			Self::SyncPreviewMedia(data) => data.into(),
			Self::Hidden(data) => data.into(),
			Self::DateCreated(data) => data.into(),
			Self::ScanState(data) => data.into(),
			Self::InstanceId(data) => data.into(),
			Self::Instance(data) => data.into(),
			Self::FilePaths(data) => data.into(),
			Self::IndexerRules(data) => data.into(),
		}
	}
}
::prisma_client_rust::macros::include_factory!(
	_include_location,
	include,
	prisma::location,
	struct Data {
		#[serde(rename = "id")]
		id: id::Type,
		#[serde(rename = "pub_id")]
		pub_id: pub_id::Type,
		#[serde(rename = "name")]
		name: name::Type,
		#[serde(rename = "path")]
		path: path::Type,
		#[serde(rename = "total_capacity")]
		total_capacity: total_capacity::Type,
		#[serde(rename = "available_capacity")]
		available_capacity: available_capacity::Type,
		#[serde(rename = "size_in_bytes")]
		size_in_bytes: size_in_bytes::Type,
		#[serde(rename = "is_archived")]
		is_archived: is_archived::Type,
		#[serde(rename = "generate_preview_media")]
		generate_preview_media: generate_preview_media::Type,
		#[serde(rename = "sync_preview_media")]
		sync_preview_media: sync_preview_media::Type,
		#[serde(rename = "hidden")]
		hidden: hidden::Type,
		#[serde(rename = "date_created")]
		date_created: date_created::Type,
		#[serde(rename = "scan_state")]
		scan_state: scan_state::Type,
		#[serde(rename = "instance_id")]
		instance_id: instance_id::Type,
		#[serde(rename = "instance")]
		instance: instance::Type,
		#[serde(rename = "file_paths")]
		file_paths: file_paths::Type,
		#[serde(rename = "indexer_rules")]
		indexer_rules: indexer_rules::Type,
	},
	[
		(instance, Relation(prisma::instance, Optional)),
		(file_paths, Relation(prisma::file_path, Many)),
		(
			indexer_rules,
			Relation(prisma::indexer_rules_in_location, Many)
		)
	]
);
pub enum IncludeParam {
	Id(id::Include),
	PubId(pub_id::Include),
	Name(name::Include),
	Path(path::Include),
	TotalCapacity(total_capacity::Include),
	AvailableCapacity(available_capacity::Include),
	SizeInBytes(size_in_bytes::Include),
	IsArchived(is_archived::Include),
	GeneratePreviewMedia(generate_preview_media::Include),
	SyncPreviewMedia(sync_preview_media::Include),
	Hidden(hidden::Include),
	DateCreated(date_created::Include),
	ScanState(scan_state::Include),
	InstanceId(instance_id::Include),
	Instance(instance::Include),
	FilePaths(file_paths::Include),
	IndexerRules(indexer_rules::Include),
}
impl Into<::prisma_client_rust::Selection> for IncludeParam {
	fn into(self) -> ::prisma_client_rust::Selection {
		match self {
			Self::Id(data) => data.into(),
			Self::PubId(data) => data.into(),
			Self::Name(data) => data.into(),
			Self::Path(data) => data.into(),
			Self::TotalCapacity(data) => data.into(),
			Self::AvailableCapacity(data) => data.into(),
			Self::SizeInBytes(data) => data.into(),
			Self::IsArchived(data) => data.into(),
			Self::GeneratePreviewMedia(data) => data.into(),
			Self::SyncPreviewMedia(data) => data.into(),
			Self::Hidden(data) => data.into(),
			Self::DateCreated(data) => data.into(),
			Self::ScanState(data) => data.into(),
			Self::InstanceId(data) => data.into(),
			Self::Instance(data) => data.into(),
			Self::FilePaths(data) => data.into(),
			Self::IndexerRules(data) => data.into(),
		}
	}
}
#[derive(Debug, Clone)]
pub struct Create {
	pub pub_id: Bytes,
	pub _params: Vec<SetParam>,
}
impl Create {
	pub fn to_query<'a>(self, client: &'a PrismaClient) -> CreateQuery<'a> {
		client.location().create(self.pub_id, self._params)
	}
	pub fn to_params(mut self) -> Vec<SetParam> {
		self._params.extend([pub_id::set(self.pub_id)]);
		self._params
	}
}
pub fn create(pub_id: Bytes, _params: Vec<SetParam>) -> Create {
	Create { pub_id, _params }
}
#[derive(Debug, Clone)]
pub struct CreateUnchecked {
	pub pub_id: Bytes,
	pub _params: Vec<UncheckedSetParam>,
}
impl CreateUnchecked {
	pub fn to_query<'a>(self, client: &'a PrismaClient) -> CreateUncheckedQuery<'a> {
		client
			.location()
			.create_unchecked(self.pub_id, self._params)
	}
	pub fn to_params(mut self) -> Vec<UncheckedSetParam> {
		self._params.extend([pub_id::set(self.pub_id)]);
		self._params
	}
}
pub fn create_unchecked(pub_id: Bytes, _params: Vec<UncheckedSetParam>) -> CreateUnchecked {
	CreateUnchecked { pub_id, _params }
}
#[derive(Debug, Clone)]
pub struct Types;
impl ::prisma_client_rust::ModelTypes for Types {
	type Data = Data;
	type Where = WhereParam;
	type WhereUnique = UniqueWhereParam;
	type UncheckedSet = UncheckedSetParam;
	type Set = SetParam;
	type With = WithParam;
	type OrderBy = OrderByWithRelationParam;
	type Cursor = UniqueWhereParam;
	const MODEL: &'static str = NAME;
	fn scalar_selections() -> Vec<::prisma_client_rust::Selection> {
		vec![
			::prisma_client_rust::sel(id::NAME),
			::prisma_client_rust::sel(pub_id::NAME),
			::prisma_client_rust::sel(name::NAME),
			::prisma_client_rust::sel(path::NAME),
			::prisma_client_rust::sel(total_capacity::NAME),
			::prisma_client_rust::sel(available_capacity::NAME),
			::prisma_client_rust::sel(size_in_bytes::NAME),
			::prisma_client_rust::sel(is_archived::NAME),
			::prisma_client_rust::sel(generate_preview_media::NAME),
			::prisma_client_rust::sel(sync_preview_media::NAME),
			::prisma_client_rust::sel(hidden::NAME),
			::prisma_client_rust::sel(date_created::NAME),
			::prisma_client_rust::sel(scan_state::NAME),
			::prisma_client_rust::sel(instance_id::NAME),
		]
	}
}
#[derive(
	Debug,
	Clone,
	:: serde :: Serialize,
	:: serde :: Deserialize,
	:: prisma_client_rust :: specta :: Type,
)]
# [specta (rename = "Location" , crate = prisma_client_rust :: specta)]
pub struct Data {
	#[serde(rename = "id")]
	pub id: id::Type,
	#[serde(rename = "pub_id")]
	pub pub_id: pub_id::Type,
	#[serde(rename = "name")]
	pub name: name::Type,
	#[serde(rename = "path")]
	pub path: path::Type,
	#[serde(rename = "total_capacity")]
	pub total_capacity: total_capacity::Type,
	#[serde(rename = "available_capacity")]
	pub available_capacity: available_capacity::Type,
	#[serde(rename = "size_in_bytes")]
	pub size_in_bytes: size_in_bytes::Type,
	#[serde(rename = "is_archived")]
	pub is_archived: is_archived::Type,
	#[serde(rename = "generate_preview_media")]
	pub generate_preview_media: generate_preview_media::Type,
	#[serde(rename = "sync_preview_media")]
	pub sync_preview_media: sync_preview_media::Type,
	#[serde(rename = "hidden")]
	pub hidden: hidden::Type,
	#[serde(rename = "date_created")]
	pub date_created: date_created::Type,
	#[serde(rename = "scan_state")]
	pub scan_state: scan_state::Type,
	#[serde(rename = "instance_id")]
	pub instance_id: instance_id::Type,
	#[serde(
		rename = "instance",
		default,
		skip_serializing_if = "Option::is_none",
		with = "prisma_client_rust::serde::double_option"
	)]
	#[specta(skip)]
	pub instance: Option<instance::RecursiveSafeType>,
	#[serde(rename = "file_paths")]
	#[specta(skip)]
	pub file_paths: Option<file_paths::RecursiveSafeType>,
	#[serde(rename = "indexer_rules")]
	#[specta(skip)]
	pub indexer_rules: Option<indexer_rules::RecursiveSafeType>,
}
impl Data {
	pub fn instance(
		&self,
	) -> Result<Option<&super::instance::Data>, ::prisma_client_rust::RelationNotFetchedError> {
		self.instance
			.as_ref()
			.ok_or(::prisma_client_rust::RelationNotFetchedError::new(
				stringify!(instance),
			))
			.map(|v| v.as_ref().map(|v| v.as_ref()))
	}
	pub fn file_paths(
		&self,
	) -> Result<&file_paths::Type, ::prisma_client_rust::RelationNotFetchedError> {
		self.file_paths
			.as_ref()
			.ok_or(::prisma_client_rust::RelationNotFetchedError::new(
				stringify!(file_paths),
			))
	}
	pub fn indexer_rules(
		&self,
	) -> Result<&indexer_rules::Type, ::prisma_client_rust::RelationNotFetchedError> {
		self.indexer_rules
			.as_ref()
			.ok_or(::prisma_client_rust::RelationNotFetchedError::new(
				stringify!(indexer_rules),
			))
	}
}
::prisma_client_rust::macros::partial_unchecked_factory!(
	_partial_unchecked_location,
	prisma::location,
	struct Data {
		#[serde(rename = "id")]
		pub id: prisma::location::id::Type,
		#[serde(rename = "pub_id")]
		pub pub_id: prisma::location::pub_id::Type,
		#[serde(rename = "name")]
		#[serde(default, with = "::prisma_client_rust::serde::double_option")]
		pub name: prisma::location::name::Type,
		#[serde(rename = "path")]
		#[serde(default, with = "::prisma_client_rust::serde::double_option")]
		pub path: prisma::location::path::Type,
		#[serde(rename = "total_capacity")]
		#[serde(default, with = "::prisma_client_rust::serde::double_option")]
		pub total_capacity: prisma::location::total_capacity::Type,
		#[serde(rename = "available_capacity")]
		#[serde(default, with = "::prisma_client_rust::serde::double_option")]
		pub available_capacity: prisma::location::available_capacity::Type,
		#[serde(rename = "size_in_bytes")]
		#[serde(default, with = "::prisma_client_rust::serde::double_option")]
		pub size_in_bytes: prisma::location::size_in_bytes::Type,
		#[serde(rename = "is_archived")]
		#[serde(default, with = "::prisma_client_rust::serde::double_option")]
		pub is_archived: prisma::location::is_archived::Type,
		#[serde(rename = "generate_preview_media")]
		#[serde(default, with = "::prisma_client_rust::serde::double_option")]
		pub generate_preview_media: prisma::location::generate_preview_media::Type,
		#[serde(rename = "sync_preview_media")]
		#[serde(default, with = "::prisma_client_rust::serde::double_option")]
		pub sync_preview_media: prisma::location::sync_preview_media::Type,
		#[serde(rename = "hidden")]
		#[serde(default, with = "::prisma_client_rust::serde::double_option")]
		pub hidden: prisma::location::hidden::Type,
		#[serde(rename = "date_created")]
		#[serde(default, with = "::prisma_client_rust::serde::double_option")]
		pub date_created: prisma::location::date_created::Type,
		#[serde(rename = "scan_state")]
		pub scan_state: prisma::location::scan_state::Type,
		#[serde(rename = "instance_id")]
		#[serde(default, with = "::prisma_client_rust::serde::double_option")]
		pub instance_id: prisma::location::instance_id::Type,
	}
);
::prisma_client_rust::macros::filter_factory!(
	_location_filter,
	prisma::location,
	[
		(id, Scalar),
		(pub_id, Scalar),
		(name, Scalar),
		(path, Scalar),
		(total_capacity, Scalar),
		(available_capacity, Scalar),
		(size_in_bytes, Scalar),
		(is_archived, Scalar),
		(generate_preview_media, Scalar),
		(sync_preview_media, Scalar),
		(hidden, Scalar),
		(date_created, Scalar),
		(scan_state, Scalar),
		(instance_id, Scalar),
		(instance, Relation(prisma::instance, Optional)),
		(file_paths, Relation(prisma::file_path, Many)),
		(
			indexer_rules,
			Relation(prisma::indexer_rules_in_location, Many)
		)
	]
);
pub type UniqueArgs = ::prisma_client_rust::UniqueArgs<Types>;
pub type ManyArgs = ::prisma_client_rust::ManyArgs<Types>;
pub type CountQuery<'a> = ::prisma_client_rust::Count<'a, Types>;
pub type CreateQuery<'a> = ::prisma_client_rust::Create<'a, Types>;
pub type CreateUncheckedQuery<'a> = ::prisma_client_rust::CreateUnchecked<'a, Types>;
pub type CreateManyQuery<'a> = ::prisma_client_rust::CreateMany<'a, Types>;
pub type FindUniqueQuery<'a> = ::prisma_client_rust::FindUnique<'a, Types>;
pub type FindManyQuery<'a> = ::prisma_client_rust::FindMany<'a, Types>;
pub type FindFirstQuery<'a> = ::prisma_client_rust::FindFirst<'a, Types>;
pub type UpdateQuery<'a> = ::prisma_client_rust::Update<'a, Types>;
pub type UpdateUncheckedQuery<'a> = ::prisma_client_rust::UpdateUnchecked<'a, Types>;
pub type UpdateManyQuery<'a> = ::prisma_client_rust::UpdateMany<'a, Types>;
pub type UpsertQuery<'a> = ::prisma_client_rust::Upsert<'a, Types>;
pub type DeleteQuery<'a> = ::prisma_client_rust::Delete<'a, Types>;
pub type DeleteManyQuery<'a> = ::prisma_client_rust::DeleteMany<'a, Types>;
#[derive(Clone)]
pub struct Actions<'a> {
	pub client: &'a ::prisma_client_rust::PrismaClientInternals,
}
impl<'a> Actions<'a> {
	pub fn find_unique(self, _where: UniqueWhereParam) -> FindUniqueQuery<'a> {
		FindUniqueQuery::new(self.client, _where)
	}
	pub fn find_first(self, _where: Vec<WhereParam>) -> FindFirstQuery<'a> {
		FindFirstQuery::new(self.client, _where)
	}
	pub fn find_many(self, _where: Vec<WhereParam>) -> FindManyQuery<'a> {
		FindManyQuery::new(self.client, _where)
	}
	pub fn create(self, pub_id: Bytes, mut _params: Vec<SetParam>) -> CreateQuery<'a> {
		_params.extend([pub_id::set(pub_id)]);
		CreateQuery::new(self.client, _params)
	}
	pub fn create_unchecked(
		self,
		pub_id: Bytes,
		mut _params: Vec<UncheckedSetParam>,
	) -> CreateUncheckedQuery<'a> {
		_params.extend([pub_id::set(pub_id)]);
		CreateUncheckedQuery::new(self.client, _params.into_iter().map(Into::into).collect())
	}
	pub fn create_many(self, data: Vec<CreateUnchecked>) -> CreateManyQuery<'a> {
		let data = data.into_iter().map(CreateUnchecked::to_params).collect();
		CreateManyQuery::new(self.client, data)
	}
	pub fn update(self, _where: UniqueWhereParam, _params: Vec<SetParam>) -> UpdateQuery<'a> {
		UpdateQuery::new(self.client, _where, _params, vec![])
	}
	pub fn update_unchecked(
		self,
		_where: UniqueWhereParam,
		_params: Vec<UncheckedSetParam>,
	) -> UpdateUncheckedQuery<'a> {
		UpdateUncheckedQuery::new(
			self.client,
			_where,
			_params.into_iter().map(Into::into).collect(),
			vec![],
		)
	}
	pub fn update_many(
		self,
		_where: Vec<WhereParam>,
		_params: Vec<SetParam>,
	) -> UpdateManyQuery<'a> {
		UpdateManyQuery::new(self.client, _where, _params)
	}
	pub fn upsert(
		self,
		_where: UniqueWhereParam,
		_create: Create,
		_update: Vec<SetParam>,
	) -> UpsertQuery<'a> {
		UpsertQuery::new(self.client, _where, _create.to_params(), _update)
	}
	pub fn delete(self, _where: UniqueWhereParam) -> DeleteQuery<'a> {
		DeleteQuery::new(self.client, _where, vec![])
	}
	pub fn delete_many(self, _where: Vec<WhereParam>) -> DeleteManyQuery<'a> {
		DeleteManyQuery::new(self.client, _where)
	}
	pub fn count(self, _where: Vec<WhereParam>) -> CountQuery<'a> {
		CountQuery::new(self.client, _where)
	}
}
