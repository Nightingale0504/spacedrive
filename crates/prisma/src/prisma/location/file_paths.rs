// File generated by Prisma Client Rust. DO NOT EDIT

use super::super::{_prisma::*, *};
use super::{SetParam, UncheckedSetParam, UniqueWhereParam, WhereParam, WithParam};
pub const NAME: &str = "file_paths";
pub type Type = Vec<file_path::Data>;
pub type RecursiveSafeType = Type;
pub fn some(value: Vec<file_path::WhereParam>) -> WhereParam {
	WhereParam::FilePathsSome(value)
}
pub fn every(value: Vec<file_path::WhereParam>) -> WhereParam {
	WhereParam::FilePathsEvery(value)
}
pub fn none(value: Vec<file_path::WhereParam>) -> WhereParam {
	WhereParam::FilePathsNone(value)
}
pub struct Order(Vec<file_path::OrderByRelationAggregateParam>);
pub fn order<T: From<Order>>(v: Vec<file_path::OrderByRelationAggregateParam>) -> T {
	Order(v).into()
}
impl From<Order> for super::OrderByWithRelationParam {
	fn from(Order(v): Order) -> Self {
		Self::FilePaths(v)
	}
}
pub struct Fetch(pub file_path::ManyArgs);
impl Fetch {
	pub fn with(mut self, params: impl Into<file_path::WithParam>) -> Self {
		self.0 = self.0.with(params.into());
		self
	}
	pub fn order_by(mut self, param: file_path::OrderByWithRelationParam) -> Self {
		self.0 = self.0.order_by(param);
		self
	}
	pub fn skip(mut self, value: i64) -> Self {
		self.0 = self.0.skip(value);
		self
	}
	pub fn take(mut self, value: i64) -> Self {
		self.0 = self.0.take(value);
		self
	}
	pub fn cursor(mut self, value: file_path::UniqueWhereParam) -> Self {
		self.0 = self.0.cursor(value.into());
		self
	}
}
impl From<Fetch> for WithParam {
	fn from(Fetch(v): Fetch) -> Self {
		WithParam::FilePaths(v)
	}
}
pub fn fetch(params: Vec<file_path::WhereParam>) -> Fetch {
	Fetch(file_path::ManyArgs::new(params))
}
pub struct Connect(pub Vec<file_path::UniqueWhereParam>);
impl From<Connect> for SetParam {
	fn from(Connect(v): Connect) -> Self {
		Self::ConnectFilePaths(v)
	}
}
pub fn connect<T: From<Connect>>(params: Vec<file_path::UniqueWhereParam>) -> T {
	Connect(params).into()
}
pub fn disconnect(params: Vec<file_path::UniqueWhereParam>) -> SetParam {
	SetParam::DisconnectFilePaths(params)
}
pub fn set(params: Vec<file_path::UniqueWhereParam>) -> SetParam {
	SetParam::SetFilePaths(params)
}
pub enum Select {
	Select(file_path::ManyArgs, Vec<file_path::SelectParam>),
	Include(file_path::ManyArgs, Vec<file_path::IncludeParam>),
	Fetch(file_path::ManyArgs),
}
impl Into<super::SelectParam> for Select {
	fn into(self) -> super::SelectParam {
		super::SelectParam::FilePaths(self)
	}
}
impl Select {
	pub fn select(
		args: file_path::ManyArgs,
		nested_selections: Vec<file_path::SelectParam>,
	) -> Self {
		Self::Select(args, nested_selections)
	}
	pub fn include(
		args: file_path::ManyArgs,
		nested_selections: Vec<file_path::IncludeParam>,
	) -> Self {
		Self::Include(args, nested_selections)
	}
}
impl Into<::prisma_client_rust::Selection> for Select {
	fn into(self) -> ::prisma_client_rust::Selection {
		let (args, selections) = match self {
			Self::Select(args, selections) => (
				args.to_graphql().0,
				selections.into_iter().map(Into::into).collect(),
			),
			Self::Include(args, selections) => (args.to_graphql().0, {
				let mut nested_selections = vec![];
				nested_selections.extend(selections.into_iter().map(Into::into));
				nested_selections
			}),
			Self::Fetch(args) => (
				args.to_graphql().0,
				<file_path::Types as ::prisma_client_rust::ModelTypes>::scalar_selections(),
			),
		};
		::prisma_client_rust::Selection::new(NAME, None, args, selections)
	}
}
pub enum Include {
	Select(file_path::ManyArgs, Vec<file_path::SelectParam>),
	Include(file_path::ManyArgs, Vec<file_path::IncludeParam>),
	Fetch(file_path::ManyArgs),
}
impl Into<super::IncludeParam> for Include {
	fn into(self) -> super::IncludeParam {
		super::IncludeParam::FilePaths(self)
	}
}
impl Include {
	pub fn select(
		args: file_path::ManyArgs,
		nested_selections: Vec<file_path::SelectParam>,
	) -> Self {
		Self::Select(args, nested_selections)
	}
	pub fn include(
		args: file_path::ManyArgs,
		nested_selections: Vec<file_path::IncludeParam>,
	) -> Self {
		Self::Include(args, nested_selections)
	}
}
impl Into<::prisma_client_rust::Selection> for Include {
	fn into(self) -> ::prisma_client_rust::Selection {
		let (args, selections) = match self {
			Self::Select(args, selections) => (
				args.to_graphql().0,
				selections.into_iter().map(Into::into).collect(),
			),
			Self::Include(args, selections) => (args.to_graphql().0, {
				let mut nested_selections =
					<file_path::Types as ::prisma_client_rust::ModelTypes>::scalar_selections();
				nested_selections.extend(selections.into_iter().map(Into::into));
				nested_selections
			}),
			Self::Fetch(args) => (
				args.to_graphql().0,
				<file_path::Types as ::prisma_client_rust::ModelTypes>::scalar_selections(),
			),
		};
		::prisma_client_rust::Selection::new(NAME, None, args, selections)
	}
}
