// File generated by Prisma Client Rust. DO NOT EDIT

pub mod bit_per_sample;
pub mod channel_layout;
pub mod codec;
pub mod codec_id;
pub mod delay;
pub mod id;
pub mod padding;
pub mod sample_format;
pub mod sample_rate;
use super::{_prisma::*, *};
pub const NAME: &str = "FfmpegMediaAudioProps";
#[derive(Debug, Clone)]
pub enum WhereParam {
	Not(Vec<WhereParam>),
	Or(Vec<WhereParam>),
	And(Vec<WhereParam>),
	Id(super::_prisma::read_filters::IntFilter),
	Delay(super::_prisma::read_filters::IntFilter),
	Padding(super::_prisma::read_filters::IntFilter),
	SampleRate(super::_prisma::read_filters::IntNullableFilter),
	SampleFormat(super::_prisma::read_filters::StringNullableFilter),
	BitPerSample(super::_prisma::read_filters::IntNullableFilter),
	ChannelLayout(super::_prisma::read_filters::StringNullableFilter),
	CodecIs(Vec<super::ffmpeg_media_codec::WhereParam>),
	CodecIsNot(Vec<super::ffmpeg_media_codec::WhereParam>),
	CodecId(super::_prisma::read_filters::IntFilter),
}
impl ::prisma_client_rust::WhereInput for WhereParam {
	fn serialize(self) -> ::prisma_client_rust::SerializedWhereInput {
		let (name, value) = match self {
			Self::Not(value) => (
				"NOT",
				::prisma_client_rust::SerializedWhereValue::Object(
					::prisma_client_rust::merge_fields(
						value
							.into_iter()
							.map(::prisma_client_rust::WhereInput::serialize)
							.map(Into::into)
							.collect(),
					),
				),
			),
			Self::Or(value) => (
				"OR",
				::prisma_client_rust::SerializedWhereValue::List(
					value
						.into_iter()
						.map(::prisma_client_rust::WhereInput::serialize)
						.map(|p| ::prisma_client_rust::PrismaValue::Object(vec![p.into()]))
						.collect(),
				),
			),
			Self::And(value) => (
				"AND",
				::prisma_client_rust::SerializedWhereValue::Object(
					::prisma_client_rust::merge_fields(
						value
							.into_iter()
							.map(::prisma_client_rust::WhereInput::serialize)
							.map(Into::into)
							.collect(),
					),
				),
			),
			Self::Id(value) => (id::NAME, value.into()),
			Self::Delay(value) => (delay::NAME, value.into()),
			Self::Padding(value) => (padding::NAME, value.into()),
			Self::SampleRate(value) => (sample_rate::NAME, value.into()),
			Self::SampleFormat(value) => (sample_format::NAME, value.into()),
			Self::BitPerSample(value) => (bit_per_sample::NAME, value.into()),
			Self::ChannelLayout(value) => (channel_layout::NAME, value.into()),
			Self::CodecIs(where_params) => (
				codec::NAME,
				::prisma_client_rust::SerializedWhereValue::Object(vec![(
					"is".to_string(),
					::prisma_client_rust::PrismaValue::Object(
						where_params
							.into_iter()
							.map(::prisma_client_rust::WhereInput::serialize)
							.map(::prisma_client_rust::SerializedWhereInput::transform_equals)
							.collect(),
					),
				)]),
			),
			Self::CodecIsNot(where_params) => (
				codec::NAME,
				::prisma_client_rust::SerializedWhereValue::Object(vec![(
					"isNot".to_string(),
					::prisma_client_rust::PrismaValue::Object(
						where_params
							.into_iter()
							.map(::prisma_client_rust::WhereInput::serialize)
							.map(::prisma_client_rust::SerializedWhereInput::transform_equals)
							.collect(),
					),
				)]),
			),
			Self::CodecId(value) => (codec_id::NAME, value.into()),
		};
		::prisma_client_rust::SerializedWhereInput::new(name.to_string(), value.into())
	}
}
#[derive(Debug, Clone)]
pub enum UniqueWhereParam {
	CodecIdEquals(Int),
	IdEquals(Int),
}
impl ::prisma_client_rust::WhereInput for UniqueWhereParam {
	fn serialize(self) -> ::prisma_client_rust::SerializedWhereInput {
		let (name, value) = match self {
			UniqueWhereParam::CodecIdEquals(value) => (
				"codec_id",
				::prisma_client_rust::SerializedWhereValue::Value(
					::prisma_client_rust::PrismaValue::Int(value),
				),
			),
			UniqueWhereParam::IdEquals(value) => (
				"id",
				::prisma_client_rust::SerializedWhereValue::Value(
					::prisma_client_rust::PrismaValue::Int(value),
				),
			),
		};
		::prisma_client_rust::SerializedWhereInput::new(name.to_string(), value.into())
	}
}
impl From<::prisma_client_rust::Operator<Self>> for WhereParam {
	fn from(op: ::prisma_client_rust::Operator<Self>) -> Self {
		match op {
			::prisma_client_rust::Operator::Not(value) => Self::Not(value),
			::prisma_client_rust::Operator::And(value) => Self::And(value),
			::prisma_client_rust::Operator::Or(value) => Self::Or(value),
		}
	}
}
#[derive(Debug, Clone)]
pub enum OrderByWithRelationParam {
	Id(super::SortOrder),
	Delay(super::SortOrder),
	Padding(super::SortOrder),
	SampleRate(super::SortOrder),
	SampleFormat(super::SortOrder),
	BitPerSample(super::SortOrder),
	ChannelLayout(super::SortOrder),
	CodecId(super::SortOrder),
	Codec(Vec<super::ffmpeg_media_codec::OrderByWithRelationParam>),
}
impl Into<(String, ::prisma_client_rust::PrismaValue)> for OrderByWithRelationParam {
	fn into(self) -> (String, ::prisma_client_rust::PrismaValue) {
		let (k, v) = match self {
			Self::Id(param) => ("id", param.into()),
			Self::Delay(param) => ("delay", param.into()),
			Self::Padding(param) => ("padding", param.into()),
			Self::SampleRate(param) => ("sample_rate", param.into()),
			Self::SampleFormat(param) => ("sample_format", param.into()),
			Self::BitPerSample(param) => ("bit_per_sample", param.into()),
			Self::ChannelLayout(param) => ("channel_layout", param.into()),
			Self::CodecId(param) => ("codec_id", param.into()),
			Self::Codec(param) => (
				"codec",
				::prisma_client_rust::PrismaValue::Object(
					param.into_iter().map(Into::into).collect(),
				),
			),
		};
		(k.to_string(), v)
	}
}
#[derive(Debug, Clone)]
pub enum WithParam {
	Codec(super::ffmpeg_media_codec::UniqueArgs),
}
impl Into<::prisma_client_rust::Selection> for WithParam {
	fn into(self) -> ::prisma_client_rust::Selection {
		match self {
			Self::Codec(args) => {
				let mut selections = < super :: ffmpeg_media_codec :: Types as :: prisma_client_rust :: ModelTypes > :: scalar_selections () ;
				selections.extend(
					args.with_params
						.into_iter()
						.map(Into::<::prisma_client_rust::Selection>::into),
				);
				::prisma_client_rust::Selection::new(codec::NAME, None, [], selections)
			}
		}
	}
}
#[derive(Debug, Clone)]
pub enum SetParam {
	Id(super::_prisma::write_params::IntParam),
	Delay(super::_prisma::write_params::IntParam),
	Padding(super::_prisma::write_params::IntParam),
	SampleRate(super::_prisma::write_params::IntNullableParam),
	SampleFormat(super::_prisma::write_params::StringNullableParam),
	BitPerSample(super::_prisma::write_params::IntNullableParam),
	ChannelLayout(super::_prisma::write_params::StringNullableParam),
	ConnectCodec(super::ffmpeg_media_codec::UniqueWhereParam),
	CodecId(super::_prisma::write_params::IntParam),
}
impl Into<(String, ::prisma_client_rust::PrismaValue)> for SetParam {
	fn into(self) -> (String, ::prisma_client_rust::PrismaValue) {
		let (k, v) = match self {
			Self::Id(value) => (id::NAME, value.into()),
			Self::Delay(value) => (delay::NAME, value.into()),
			Self::Padding(value) => (padding::NAME, value.into()),
			Self::SampleRate(value) => (sample_rate::NAME, value.into()),
			Self::SampleFormat(value) => (sample_format::NAME, value.into()),
			Self::BitPerSample(value) => (bit_per_sample::NAME, value.into()),
			Self::ChannelLayout(value) => (channel_layout::NAME, value.into()),
			Self::ConnectCodec(where_param) => (
				codec::NAME,
				::prisma_client_rust::PrismaValue::Object(vec![(
					"connect".to_string(),
					::prisma_client_rust::PrismaValue::Object(
						[where_param]
							.into_iter()
							.map(::prisma_client_rust::WhereInput::serialize)
							.map(::prisma_client_rust::SerializedWhereInput::transform_equals)
							.collect(),
					),
				)]),
			),
			Self::CodecId(value) => (codec_id::NAME, value.into()),
		};
		(k.to_string(), v)
	}
}
#[derive(Debug, Clone)]
pub enum UncheckedSetParam {
	Id(super::_prisma::write_params::IntParam),
	Delay(super::_prisma::write_params::IntParam),
	Padding(super::_prisma::write_params::IntParam),
	SampleRate(super::_prisma::write_params::IntNullableParam),
	SampleFormat(super::_prisma::write_params::StringNullableParam),
	BitPerSample(super::_prisma::write_params::IntNullableParam),
	ChannelLayout(super::_prisma::write_params::StringNullableParam),
	CodecId(super::_prisma::write_params::IntParam),
}
impl Into<(String, ::prisma_client_rust::PrismaValue)> for UncheckedSetParam {
	fn into(self) -> (String, ::prisma_client_rust::PrismaValue) {
		let (k, v) = match self {
			Self::Id(value) => ("id", value.into()),
			Self::Delay(value) => ("delay", value.into()),
			Self::Padding(value) => ("padding", value.into()),
			Self::SampleRate(value) => ("sample_rate", value.into()),
			Self::SampleFormat(value) => ("sample_format", value.into()),
			Self::BitPerSample(value) => ("bit_per_sample", value.into()),
			Self::ChannelLayout(value) => ("channel_layout", value.into()),
			Self::CodecId(value) => ("codec_id", value.into()),
		};
		(k.to_string(), v)
	}
}
::prisma_client_rust::macros::select_factory!(
	_select_ffmpeg_media_audio_props,
	select,
	prisma::ffmpeg_media_audio_props,
	struct Data {
		#[serde(rename = "id")]
		id: id::Type,
		#[serde(rename = "delay")]
		delay: delay::Type,
		#[serde(rename = "padding")]
		padding: padding::Type,
		#[serde(rename = "sample_rate")]
		sample_rate: sample_rate::Type,
		#[serde(rename = "sample_format")]
		sample_format: sample_format::Type,
		#[serde(rename = "bit_per_sample")]
		bit_per_sample: bit_per_sample::Type,
		#[serde(rename = "channel_layout")]
		channel_layout: channel_layout::Type,
		#[serde(rename = "codec")]
		codec: codec::Type,
		#[serde(rename = "codec_id")]
		codec_id: codec_id::Type,
	},
	[
		(id, Scalar),
		(delay, Scalar),
		(padding, Scalar),
		(sample_rate, Scalar),
		(sample_format, Scalar),
		(bit_per_sample, Scalar),
		(channel_layout, Scalar),
		(codec, Relation(prisma::ffmpeg_media_codec, One)),
		(codec_id, Scalar)
	]
);
pub enum SelectParam {
	Id(id::Select),
	Delay(delay::Select),
	Padding(padding::Select),
	SampleRate(sample_rate::Select),
	SampleFormat(sample_format::Select),
	BitPerSample(bit_per_sample::Select),
	ChannelLayout(channel_layout::Select),
	Codec(codec::Select),
	CodecId(codec_id::Select),
}
impl Into<::prisma_client_rust::Selection> for SelectParam {
	fn into(self) -> ::prisma_client_rust::Selection {
		match self {
			Self::Id(data) => data.into(),
			Self::Delay(data) => data.into(),
			Self::Padding(data) => data.into(),
			Self::SampleRate(data) => data.into(),
			Self::SampleFormat(data) => data.into(),
			Self::BitPerSample(data) => data.into(),
			Self::ChannelLayout(data) => data.into(),
			Self::Codec(data) => data.into(),
			Self::CodecId(data) => data.into(),
		}
	}
}
::prisma_client_rust::macros::include_factory!(
	_include_ffmpeg_media_audio_props,
	include,
	prisma::ffmpeg_media_audio_props,
	struct Data {
		#[serde(rename = "id")]
		id: id::Type,
		#[serde(rename = "delay")]
		delay: delay::Type,
		#[serde(rename = "padding")]
		padding: padding::Type,
		#[serde(rename = "sample_rate")]
		sample_rate: sample_rate::Type,
		#[serde(rename = "sample_format")]
		sample_format: sample_format::Type,
		#[serde(rename = "bit_per_sample")]
		bit_per_sample: bit_per_sample::Type,
		#[serde(rename = "channel_layout")]
		channel_layout: channel_layout::Type,
		#[serde(rename = "codec")]
		codec: codec::Type,
		#[serde(rename = "codec_id")]
		codec_id: codec_id::Type,
	},
	[(codec, Relation(prisma::ffmpeg_media_codec, One))]
);
pub enum IncludeParam {
	Id(id::Include),
	Delay(delay::Include),
	Padding(padding::Include),
	SampleRate(sample_rate::Include),
	SampleFormat(sample_format::Include),
	BitPerSample(bit_per_sample::Include),
	ChannelLayout(channel_layout::Include),
	Codec(codec::Include),
	CodecId(codec_id::Include),
}
impl Into<::prisma_client_rust::Selection> for IncludeParam {
	fn into(self) -> ::prisma_client_rust::Selection {
		match self {
			Self::Id(data) => data.into(),
			Self::Delay(data) => data.into(),
			Self::Padding(data) => data.into(),
			Self::SampleRate(data) => data.into(),
			Self::SampleFormat(data) => data.into(),
			Self::BitPerSample(data) => data.into(),
			Self::ChannelLayout(data) => data.into(),
			Self::Codec(data) => data.into(),
			Self::CodecId(data) => data.into(),
		}
	}
}
#[derive(Debug, Clone)]
pub struct Create {
	pub delay: Int,
	pub padding: Int,
	pub codec: super::ffmpeg_media_codec::UniqueWhereParam,
	pub _params: Vec<SetParam>,
}
impl Create {
	pub fn to_query<'a>(self, client: &'a PrismaClient) -> CreateQuery<'a> {
		client
			.ffmpeg_media_audio_props()
			.create(self.delay, self.padding, self.codec, self._params)
	}
	pub fn to_params(mut self) -> Vec<SetParam> {
		self._params.extend([
			delay::set(self.delay),
			padding::set(self.padding),
			codec::connect(self.codec),
		]);
		self._params
	}
}
pub fn create(
	delay: Int,
	padding: Int,
	codec: super::ffmpeg_media_codec::UniqueWhereParam,
	_params: Vec<SetParam>,
) -> Create {
	Create {
		delay,
		padding,
		codec,
		_params,
	}
}
#[derive(Debug, Clone)]
pub struct CreateUnchecked {
	pub delay: Int,
	pub padding: Int,
	pub codec_id: Int,
	pub _params: Vec<UncheckedSetParam>,
}
impl CreateUnchecked {
	pub fn to_query<'a>(self, client: &'a PrismaClient) -> CreateUncheckedQuery<'a> {
		client.ffmpeg_media_audio_props().create_unchecked(
			self.delay,
			self.padding,
			self.codec_id,
			self._params,
		)
	}
	pub fn to_params(mut self) -> Vec<UncheckedSetParam> {
		self._params.extend([
			delay::set(self.delay),
			padding::set(self.padding),
			codec_id::set(self.codec_id),
		]);
		self._params
	}
}
pub fn create_unchecked(
	delay: Int,
	padding: Int,
	codec_id: Int,
	_params: Vec<UncheckedSetParam>,
) -> CreateUnchecked {
	CreateUnchecked {
		delay,
		padding,
		codec_id,
		_params,
	}
}
#[derive(Debug, Clone)]
pub struct Types;
impl ::prisma_client_rust::ModelTypes for Types {
	type Data = Data;
	type Where = WhereParam;
	type WhereUnique = UniqueWhereParam;
	type UncheckedSet = UncheckedSetParam;
	type Set = SetParam;
	type With = WithParam;
	type OrderBy = OrderByWithRelationParam;
	type Cursor = UniqueWhereParam;
	const MODEL: &'static str = NAME;
	fn scalar_selections() -> Vec<::prisma_client_rust::Selection> {
		vec![
			::prisma_client_rust::sel(id::NAME),
			::prisma_client_rust::sel(delay::NAME),
			::prisma_client_rust::sel(padding::NAME),
			::prisma_client_rust::sel(sample_rate::NAME),
			::prisma_client_rust::sel(sample_format::NAME),
			::prisma_client_rust::sel(bit_per_sample::NAME),
			::prisma_client_rust::sel(channel_layout::NAME),
			::prisma_client_rust::sel(codec_id::NAME),
		]
	}
}
#[derive(
	Debug,
	Clone,
	:: serde :: Serialize,
	:: serde :: Deserialize,
	:: prisma_client_rust :: specta :: Type,
)]
# [specta (rename = "FfmpegMediaAudioProps" , crate = prisma_client_rust :: specta)]
pub struct Data {
	#[serde(rename = "id")]
	pub id: id::Type,
	#[serde(rename = "delay")]
	pub delay: delay::Type,
	#[serde(rename = "padding")]
	pub padding: padding::Type,
	#[serde(rename = "sample_rate")]
	pub sample_rate: sample_rate::Type,
	#[serde(rename = "sample_format")]
	pub sample_format: sample_format::Type,
	#[serde(rename = "bit_per_sample")]
	pub bit_per_sample: bit_per_sample::Type,
	#[serde(rename = "channel_layout")]
	pub channel_layout: channel_layout::Type,
	#[serde(rename = "codec")]
	#[specta(skip)]
	pub codec: Option<codec::RecursiveSafeType>,
	#[serde(rename = "codec_id")]
	pub codec_id: codec_id::Type,
}
impl Data {
	pub fn codec(
		&self,
	) -> Result<&super::ffmpeg_media_codec::Data, ::prisma_client_rust::RelationNotFetchedError> {
		self.codec
			.as_ref()
			.ok_or(::prisma_client_rust::RelationNotFetchedError::new(
				stringify!(codec),
			))
			.map(|v| v.as_ref())
	}
}
::prisma_client_rust::macros::partial_unchecked_factory!(
	_partial_unchecked_ffmpeg_media_audio_props,
	prisma::ffmpeg_media_audio_props,
	struct Data {
		#[serde(rename = "id")]
		pub id: prisma::ffmpeg_media_audio_props::id::Type,
		#[serde(rename = "delay")]
		pub delay: prisma::ffmpeg_media_audio_props::delay::Type,
		#[serde(rename = "padding")]
		pub padding: prisma::ffmpeg_media_audio_props::padding::Type,
		#[serde(rename = "sample_rate")]
		#[serde(default, with = "::prisma_client_rust::serde::double_option")]
		pub sample_rate: prisma::ffmpeg_media_audio_props::sample_rate::Type,
		#[serde(rename = "sample_format")]
		#[serde(default, with = "::prisma_client_rust::serde::double_option")]
		pub sample_format: prisma::ffmpeg_media_audio_props::sample_format::Type,
		#[serde(rename = "bit_per_sample")]
		#[serde(default, with = "::prisma_client_rust::serde::double_option")]
		pub bit_per_sample: prisma::ffmpeg_media_audio_props::bit_per_sample::Type,
		#[serde(rename = "channel_layout")]
		#[serde(default, with = "::prisma_client_rust::serde::double_option")]
		pub channel_layout: prisma::ffmpeg_media_audio_props::channel_layout::Type,
		#[serde(rename = "codec_id")]
		pub codec_id: prisma::ffmpeg_media_audio_props::codec_id::Type,
	}
);
::prisma_client_rust::macros::filter_factory!(
	_ffmpeg_media_audio_props_filter,
	prisma::ffmpeg_media_audio_props,
	[
		(id, Scalar),
		(delay, Scalar),
		(padding, Scalar),
		(sample_rate, Scalar),
		(sample_format, Scalar),
		(bit_per_sample, Scalar),
		(channel_layout, Scalar),
		(codec, Relation(prisma::ffmpeg_media_codec, One)),
		(codec_id, Scalar)
	]
);
pub type UniqueArgs = ::prisma_client_rust::UniqueArgs<Types>;
pub type ManyArgs = ::prisma_client_rust::ManyArgs<Types>;
pub type CountQuery<'a> = ::prisma_client_rust::Count<'a, Types>;
pub type CreateQuery<'a> = ::prisma_client_rust::Create<'a, Types>;
pub type CreateUncheckedQuery<'a> = ::prisma_client_rust::CreateUnchecked<'a, Types>;
pub type CreateManyQuery<'a> = ::prisma_client_rust::CreateMany<'a, Types>;
pub type FindUniqueQuery<'a> = ::prisma_client_rust::FindUnique<'a, Types>;
pub type FindManyQuery<'a> = ::prisma_client_rust::FindMany<'a, Types>;
pub type FindFirstQuery<'a> = ::prisma_client_rust::FindFirst<'a, Types>;
pub type UpdateQuery<'a> = ::prisma_client_rust::Update<'a, Types>;
pub type UpdateUncheckedQuery<'a> = ::prisma_client_rust::UpdateUnchecked<'a, Types>;
pub type UpdateManyQuery<'a> = ::prisma_client_rust::UpdateMany<'a, Types>;
pub type UpsertQuery<'a> = ::prisma_client_rust::Upsert<'a, Types>;
pub type DeleteQuery<'a> = ::prisma_client_rust::Delete<'a, Types>;
pub type DeleteManyQuery<'a> = ::prisma_client_rust::DeleteMany<'a, Types>;
#[derive(Clone)]
pub struct Actions<'a> {
	pub client: &'a ::prisma_client_rust::PrismaClientInternals,
}
impl<'a> Actions<'a> {
	pub fn find_unique(self, _where: UniqueWhereParam) -> FindUniqueQuery<'a> {
		FindUniqueQuery::new(self.client, _where)
	}
	pub fn find_first(self, _where: Vec<WhereParam>) -> FindFirstQuery<'a> {
		FindFirstQuery::new(self.client, _where)
	}
	pub fn find_many(self, _where: Vec<WhereParam>) -> FindManyQuery<'a> {
		FindManyQuery::new(self.client, _where)
	}
	pub fn create(
		self,
		delay: Int,
		padding: Int,
		codec: super::ffmpeg_media_codec::UniqueWhereParam,
		mut _params: Vec<SetParam>,
	) -> CreateQuery<'a> {
		_params.extend([
			delay::set(delay),
			padding::set(padding),
			codec::connect(codec),
		]);
		CreateQuery::new(self.client, _params)
	}
	pub fn create_unchecked(
		self,
		delay: Int,
		padding: Int,
		codec_id: Int,
		mut _params: Vec<UncheckedSetParam>,
	) -> CreateUncheckedQuery<'a> {
		_params.extend([
			delay::set(delay),
			padding::set(padding),
			codec_id::set(codec_id),
		]);
		CreateUncheckedQuery::new(self.client, _params.into_iter().map(Into::into).collect())
	}
	pub fn create_many(self, data: Vec<CreateUnchecked>) -> CreateManyQuery<'a> {
		let data = data.into_iter().map(CreateUnchecked::to_params).collect();
		CreateManyQuery::new(self.client, data)
	}
	pub fn update(self, _where: UniqueWhereParam, _params: Vec<SetParam>) -> UpdateQuery<'a> {
		UpdateQuery::new(self.client, _where, _params, vec![])
	}
	pub fn update_unchecked(
		self,
		_where: UniqueWhereParam,
		_params: Vec<UncheckedSetParam>,
	) -> UpdateUncheckedQuery<'a> {
		UpdateUncheckedQuery::new(
			self.client,
			_where,
			_params.into_iter().map(Into::into).collect(),
			vec![],
		)
	}
	pub fn update_many(
		self,
		_where: Vec<WhereParam>,
		_params: Vec<SetParam>,
	) -> UpdateManyQuery<'a> {
		UpdateManyQuery::new(self.client, _where, _params)
	}
	pub fn upsert(
		self,
		_where: UniqueWhereParam,
		_create: Create,
		_update: Vec<SetParam>,
	) -> UpsertQuery<'a> {
		UpsertQuery::new(self.client, _where, _create.to_params(), _update)
	}
	pub fn delete(self, _where: UniqueWhereParam) -> DeleteQuery<'a> {
		DeleteQuery::new(self.client, _where, vec![])
	}
	pub fn delete_many(self, _where: Vec<WhereParam>) -> DeleteManyQuery<'a> {
		DeleteManyQuery::new(self.client, _where)
	}
	pub fn count(self, _where: Vec<WhereParam>) -> CountQuery<'a> {
		CountQuery::new(self.client, _where)
	}
}
