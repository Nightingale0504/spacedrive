// File generated by Prisma Client Rust. DO NOT EDIT

pub mod date_captured;
pub mod id;
pub mod library_db_size;
pub mod total_library_bytes;
pub mod total_library_preview_media_bytes;
pub mod total_library_unique_bytes;
pub mod total_local_bytes_capacity;
pub mod total_local_bytes_free;
pub mod total_local_bytes_used;
pub mod total_object_count;
use super::{_prisma::*, *};
pub const NAME: &str = "Statistics";
#[derive(Debug, Clone)]
pub enum WhereParam {
	Not(Vec<WhereParam>),
	Or(Vec<WhereParam>),
	And(Vec<WhereParam>),
	Id(super::_prisma::read_filters::IntFilter),
	DateCaptured(super::_prisma::read_filters::DateTimeFilter),
	TotalObjectCount(super::_prisma::read_filters::IntFilter),
	LibraryDbSize(super::_prisma::read_filters::StringFilter),
	TotalLocalBytesUsed(super::_prisma::read_filters::StringFilter),
	TotalLocalBytesCapacity(super::_prisma::read_filters::StringFilter),
	TotalLocalBytesFree(super::_prisma::read_filters::StringFilter),
	TotalLibraryBytes(super::_prisma::read_filters::StringFilter),
	TotalLibraryUniqueBytes(super::_prisma::read_filters::StringFilter),
	TotalLibraryPreviewMediaBytes(super::_prisma::read_filters::StringFilter),
}
impl ::prisma_client_rust::WhereInput for WhereParam {
	fn serialize(self) -> ::prisma_client_rust::SerializedWhereInput {
		let (name, value) = match self {
			Self::Not(value) => (
				"NOT",
				::prisma_client_rust::SerializedWhereValue::Object(
					::prisma_client_rust::merge_fields(
						value
							.into_iter()
							.map(::prisma_client_rust::WhereInput::serialize)
							.map(Into::into)
							.collect(),
					),
				),
			),
			Self::Or(value) => (
				"OR",
				::prisma_client_rust::SerializedWhereValue::List(
					value
						.into_iter()
						.map(::prisma_client_rust::WhereInput::serialize)
						.map(|p| ::prisma_client_rust::PrismaValue::Object(vec![p.into()]))
						.collect(),
				),
			),
			Self::And(value) => (
				"AND",
				::prisma_client_rust::SerializedWhereValue::Object(
					::prisma_client_rust::merge_fields(
						value
							.into_iter()
							.map(::prisma_client_rust::WhereInput::serialize)
							.map(Into::into)
							.collect(),
					),
				),
			),
			Self::Id(value) => (id::NAME, value.into()),
			Self::DateCaptured(value) => (date_captured::NAME, value.into()),
			Self::TotalObjectCount(value) => (total_object_count::NAME, value.into()),
			Self::LibraryDbSize(value) => (library_db_size::NAME, value.into()),
			Self::TotalLocalBytesUsed(value) => (total_local_bytes_used::NAME, value.into()),
			Self::TotalLocalBytesCapacity(value) => {
				(total_local_bytes_capacity::NAME, value.into())
			}
			Self::TotalLocalBytesFree(value) => (total_local_bytes_free::NAME, value.into()),
			Self::TotalLibraryBytes(value) => (total_library_bytes::NAME, value.into()),
			Self::TotalLibraryUniqueBytes(value) => {
				(total_library_unique_bytes::NAME, value.into())
			}
			Self::TotalLibraryPreviewMediaBytes(value) => {
				(total_library_preview_media_bytes::NAME, value.into())
			}
		};
		::prisma_client_rust::SerializedWhereInput::new(name.to_string(), value.into())
	}
}
#[derive(Debug, Clone)]
pub enum UniqueWhereParam {
	IdEquals(Int),
}
impl ::prisma_client_rust::WhereInput for UniqueWhereParam {
	fn serialize(self) -> ::prisma_client_rust::SerializedWhereInput {
		let (name, value) = match self {
			UniqueWhereParam::IdEquals(value) => (
				"id",
				::prisma_client_rust::SerializedWhereValue::Value(
					::prisma_client_rust::PrismaValue::Int(value),
				),
			),
		};
		::prisma_client_rust::SerializedWhereInput::new(name.to_string(), value.into())
	}
}
impl From<::prisma_client_rust::Operator<Self>> for WhereParam {
	fn from(op: ::prisma_client_rust::Operator<Self>) -> Self {
		match op {
			::prisma_client_rust::Operator::Not(value) => Self::Not(value),
			::prisma_client_rust::Operator::And(value) => Self::And(value),
			::prisma_client_rust::Operator::Or(value) => Self::Or(value),
		}
	}
}
#[derive(Debug, Clone)]
pub enum OrderByWithRelationParam {
	Id(super::SortOrder),
	DateCaptured(super::SortOrder),
	TotalObjectCount(super::SortOrder),
	LibraryDbSize(super::SortOrder),
	TotalLocalBytesUsed(super::SortOrder),
	TotalLocalBytesCapacity(super::SortOrder),
	TotalLocalBytesFree(super::SortOrder),
	TotalLibraryBytes(super::SortOrder),
	TotalLibraryUniqueBytes(super::SortOrder),
	TotalLibraryPreviewMediaBytes(super::SortOrder),
}
impl Into<(String, ::prisma_client_rust::PrismaValue)> for OrderByWithRelationParam {
	fn into(self) -> (String, ::prisma_client_rust::PrismaValue) {
		let (k, v) = match self {
			Self::Id(param) => ("id", param.into()),
			Self::DateCaptured(param) => ("date_captured", param.into()),
			Self::TotalObjectCount(param) => ("total_object_count", param.into()),
			Self::LibraryDbSize(param) => ("library_db_size", param.into()),
			Self::TotalLocalBytesUsed(param) => ("total_local_bytes_used", param.into()),
			Self::TotalLocalBytesCapacity(param) => ("total_local_bytes_capacity", param.into()),
			Self::TotalLocalBytesFree(param) => ("total_local_bytes_free", param.into()),
			Self::TotalLibraryBytes(param) => ("total_library_bytes", param.into()),
			Self::TotalLibraryUniqueBytes(param) => ("total_library_unique_bytes", param.into()),
			Self::TotalLibraryPreviewMediaBytes(param) => {
				("total_library_preview_media_bytes", param.into())
			}
		};
		(k.to_string(), v)
	}
}
#[derive(Debug, Clone)]
pub enum WithParam {}
impl Into<::prisma_client_rust::Selection> for WithParam {
	fn into(self) -> ::prisma_client_rust::Selection {
		match self {}
	}
}
#[derive(Debug, Clone)]
pub enum SetParam {
	Id(super::_prisma::write_params::IntParam),
	DateCaptured(super::_prisma::write_params::DateTimeParam),
	TotalObjectCount(super::_prisma::write_params::IntParam),
	LibraryDbSize(super::_prisma::write_params::StringParam),
	TotalLocalBytesUsed(super::_prisma::write_params::StringParam),
	TotalLocalBytesCapacity(super::_prisma::write_params::StringParam),
	TotalLocalBytesFree(super::_prisma::write_params::StringParam),
	TotalLibraryBytes(super::_prisma::write_params::StringParam),
	TotalLibraryUniqueBytes(super::_prisma::write_params::StringParam),
	TotalLibraryPreviewMediaBytes(super::_prisma::write_params::StringParam),
}
impl Into<(String, ::prisma_client_rust::PrismaValue)> for SetParam {
	fn into(self) -> (String, ::prisma_client_rust::PrismaValue) {
		let (k, v) = match self {
			Self::Id(value) => (id::NAME, value.into()),
			Self::DateCaptured(value) => (date_captured::NAME, value.into()),
			Self::TotalObjectCount(value) => (total_object_count::NAME, value.into()),
			Self::LibraryDbSize(value) => (library_db_size::NAME, value.into()),
			Self::TotalLocalBytesUsed(value) => (total_local_bytes_used::NAME, value.into()),
			Self::TotalLocalBytesCapacity(value) => {
				(total_local_bytes_capacity::NAME, value.into())
			}
			Self::TotalLocalBytesFree(value) => (total_local_bytes_free::NAME, value.into()),
			Self::TotalLibraryBytes(value) => (total_library_bytes::NAME, value.into()),
			Self::TotalLibraryUniqueBytes(value) => {
				(total_library_unique_bytes::NAME, value.into())
			}
			Self::TotalLibraryPreviewMediaBytes(value) => {
				(total_library_preview_media_bytes::NAME, value.into())
			}
		};
		(k.to_string(), v)
	}
}
#[derive(Debug, Clone)]
pub enum UncheckedSetParam {
	Id(super::_prisma::write_params::IntParam),
	DateCaptured(super::_prisma::write_params::DateTimeParam),
	TotalObjectCount(super::_prisma::write_params::IntParam),
	LibraryDbSize(super::_prisma::write_params::StringParam),
	TotalLocalBytesUsed(super::_prisma::write_params::StringParam),
	TotalLocalBytesCapacity(super::_prisma::write_params::StringParam),
	TotalLocalBytesFree(super::_prisma::write_params::StringParam),
	TotalLibraryBytes(super::_prisma::write_params::StringParam),
	TotalLibraryUniqueBytes(super::_prisma::write_params::StringParam),
	TotalLibraryPreviewMediaBytes(super::_prisma::write_params::StringParam),
}
impl Into<(String, ::prisma_client_rust::PrismaValue)> for UncheckedSetParam {
	fn into(self) -> (String, ::prisma_client_rust::PrismaValue) {
		let (k, v) = match self {
			Self::Id(value) => ("id", value.into()),
			Self::DateCaptured(value) => ("date_captured", value.into()),
			Self::TotalObjectCount(value) => ("total_object_count", value.into()),
			Self::LibraryDbSize(value) => ("library_db_size", value.into()),
			Self::TotalLocalBytesUsed(value) => ("total_local_bytes_used", value.into()),
			Self::TotalLocalBytesCapacity(value) => ("total_local_bytes_capacity", value.into()),
			Self::TotalLocalBytesFree(value) => ("total_local_bytes_free", value.into()),
			Self::TotalLibraryBytes(value) => ("total_library_bytes", value.into()),
			Self::TotalLibraryUniqueBytes(value) => ("total_library_unique_bytes", value.into()),
			Self::TotalLibraryPreviewMediaBytes(value) => {
				("total_library_preview_media_bytes", value.into())
			}
		};
		(k.to_string(), v)
	}
}
::prisma_client_rust::macros::select_factory!(
	_select_statistics,
	select,
	prisma::statistics,
	struct Data {
		#[serde(rename = "id")]
		id: id::Type,
		#[serde(rename = "date_captured")]
		date_captured: date_captured::Type,
		#[serde(rename = "total_object_count")]
		total_object_count: total_object_count::Type,
		#[serde(rename = "library_db_size")]
		library_db_size: library_db_size::Type,
		#[serde(rename = "total_local_bytes_used")]
		total_local_bytes_used: total_local_bytes_used::Type,
		#[serde(rename = "total_local_bytes_capacity")]
		total_local_bytes_capacity: total_local_bytes_capacity::Type,
		#[serde(rename = "total_local_bytes_free")]
		total_local_bytes_free: total_local_bytes_free::Type,
		#[serde(rename = "total_library_bytes")]
		total_library_bytes: total_library_bytes::Type,
		#[serde(rename = "total_library_unique_bytes")]
		total_library_unique_bytes: total_library_unique_bytes::Type,
		#[serde(rename = "total_library_preview_media_bytes")]
		total_library_preview_media_bytes: total_library_preview_media_bytes::Type,
	},
	[
		(id, Scalar),
		(date_captured, Scalar),
		(total_object_count, Scalar),
		(library_db_size, Scalar),
		(total_local_bytes_used, Scalar),
		(total_local_bytes_capacity, Scalar),
		(total_local_bytes_free, Scalar),
		(total_library_bytes, Scalar),
		(total_library_unique_bytes, Scalar),
		(total_library_preview_media_bytes, Scalar)
	]
);
pub enum SelectParam {
	Id(id::Select),
	DateCaptured(date_captured::Select),
	TotalObjectCount(total_object_count::Select),
	LibraryDbSize(library_db_size::Select),
	TotalLocalBytesUsed(total_local_bytes_used::Select),
	TotalLocalBytesCapacity(total_local_bytes_capacity::Select),
	TotalLocalBytesFree(total_local_bytes_free::Select),
	TotalLibraryBytes(total_library_bytes::Select),
	TotalLibraryUniqueBytes(total_library_unique_bytes::Select),
	TotalLibraryPreviewMediaBytes(total_library_preview_media_bytes::Select),
}
impl Into<::prisma_client_rust::Selection> for SelectParam {
	fn into(self) -> ::prisma_client_rust::Selection {
		match self {
			Self::Id(data) => data.into(),
			Self::DateCaptured(data) => data.into(),
			Self::TotalObjectCount(data) => data.into(),
			Self::LibraryDbSize(data) => data.into(),
			Self::TotalLocalBytesUsed(data) => data.into(),
			Self::TotalLocalBytesCapacity(data) => data.into(),
			Self::TotalLocalBytesFree(data) => data.into(),
			Self::TotalLibraryBytes(data) => data.into(),
			Self::TotalLibraryUniqueBytes(data) => data.into(),
			Self::TotalLibraryPreviewMediaBytes(data) => data.into(),
		}
	}
}
::prisma_client_rust::macros::include_factory!(
	_include_statistics,
	include,
	prisma::statistics,
	struct Data {
		#[serde(rename = "id")]
		id: id::Type,
		#[serde(rename = "date_captured")]
		date_captured: date_captured::Type,
		#[serde(rename = "total_object_count")]
		total_object_count: total_object_count::Type,
		#[serde(rename = "library_db_size")]
		library_db_size: library_db_size::Type,
		#[serde(rename = "total_local_bytes_used")]
		total_local_bytes_used: total_local_bytes_used::Type,
		#[serde(rename = "total_local_bytes_capacity")]
		total_local_bytes_capacity: total_local_bytes_capacity::Type,
		#[serde(rename = "total_local_bytes_free")]
		total_local_bytes_free: total_local_bytes_free::Type,
		#[serde(rename = "total_library_bytes")]
		total_library_bytes: total_library_bytes::Type,
		#[serde(rename = "total_library_unique_bytes")]
		total_library_unique_bytes: total_library_unique_bytes::Type,
		#[serde(rename = "total_library_preview_media_bytes")]
		total_library_preview_media_bytes: total_library_preview_media_bytes::Type,
	},
	[]
);
pub enum IncludeParam {
	Id(id::Include),
	DateCaptured(date_captured::Include),
	TotalObjectCount(total_object_count::Include),
	LibraryDbSize(library_db_size::Include),
	TotalLocalBytesUsed(total_local_bytes_used::Include),
	TotalLocalBytesCapacity(total_local_bytes_capacity::Include),
	TotalLocalBytesFree(total_local_bytes_free::Include),
	TotalLibraryBytes(total_library_bytes::Include),
	TotalLibraryUniqueBytes(total_library_unique_bytes::Include),
	TotalLibraryPreviewMediaBytes(total_library_preview_media_bytes::Include),
}
impl Into<::prisma_client_rust::Selection> for IncludeParam {
	fn into(self) -> ::prisma_client_rust::Selection {
		match self {
			Self::Id(data) => data.into(),
			Self::DateCaptured(data) => data.into(),
			Self::TotalObjectCount(data) => data.into(),
			Self::LibraryDbSize(data) => data.into(),
			Self::TotalLocalBytesUsed(data) => data.into(),
			Self::TotalLocalBytesCapacity(data) => data.into(),
			Self::TotalLocalBytesFree(data) => data.into(),
			Self::TotalLibraryBytes(data) => data.into(),
			Self::TotalLibraryUniqueBytes(data) => data.into(),
			Self::TotalLibraryPreviewMediaBytes(data) => data.into(),
		}
	}
}
#[derive(Debug, Clone)]
pub struct Create {
	pub _params: Vec<SetParam>,
}
impl Create {
	pub fn to_query<'a>(self, client: &'a PrismaClient) -> CreateQuery<'a> {
		client.statistics().create(self._params)
	}
	pub fn to_params(mut self) -> Vec<SetParam> {
		self._params.extend([]);
		self._params
	}
}
pub fn create(_params: Vec<SetParam>) -> Create {
	Create { _params }
}
#[derive(Debug, Clone)]
pub struct CreateUnchecked {
	pub _params: Vec<UncheckedSetParam>,
}
impl CreateUnchecked {
	pub fn to_query<'a>(self, client: &'a PrismaClient) -> CreateUncheckedQuery<'a> {
		client.statistics().create_unchecked(self._params)
	}
	pub fn to_params(mut self) -> Vec<UncheckedSetParam> {
		self._params.extend([]);
		self._params
	}
}
pub fn create_unchecked(_params: Vec<UncheckedSetParam>) -> CreateUnchecked {
	CreateUnchecked { _params }
}
#[derive(Debug, Clone)]
pub struct Types;
impl ::prisma_client_rust::ModelTypes for Types {
	type Data = Data;
	type Where = WhereParam;
	type WhereUnique = UniqueWhereParam;
	type UncheckedSet = UncheckedSetParam;
	type Set = SetParam;
	type With = WithParam;
	type OrderBy = OrderByWithRelationParam;
	type Cursor = UniqueWhereParam;
	const MODEL: &'static str = NAME;
	fn scalar_selections() -> Vec<::prisma_client_rust::Selection> {
		vec![
			::prisma_client_rust::sel(id::NAME),
			::prisma_client_rust::sel(date_captured::NAME),
			::prisma_client_rust::sel(total_object_count::NAME),
			::prisma_client_rust::sel(library_db_size::NAME),
			::prisma_client_rust::sel(total_local_bytes_used::NAME),
			::prisma_client_rust::sel(total_local_bytes_capacity::NAME),
			::prisma_client_rust::sel(total_local_bytes_free::NAME),
			::prisma_client_rust::sel(total_library_bytes::NAME),
			::prisma_client_rust::sel(total_library_unique_bytes::NAME),
			::prisma_client_rust::sel(total_library_preview_media_bytes::NAME),
		]
	}
}
#[derive(
	Debug,
	Clone,
	:: serde :: Serialize,
	:: serde :: Deserialize,
	:: prisma_client_rust :: specta :: Type,
)]
# [specta (rename = "Statistics" , crate = prisma_client_rust :: specta)]
pub struct Data {
	#[serde(rename = "id")]
	pub id: id::Type,
	#[serde(rename = "date_captured")]
	pub date_captured: date_captured::Type,
	#[serde(rename = "total_object_count")]
	pub total_object_count: total_object_count::Type,
	#[serde(rename = "library_db_size")]
	pub library_db_size: library_db_size::Type,
	#[serde(rename = "total_local_bytes_used")]
	pub total_local_bytes_used: total_local_bytes_used::Type,
	#[serde(rename = "total_local_bytes_capacity")]
	pub total_local_bytes_capacity: total_local_bytes_capacity::Type,
	#[serde(rename = "total_local_bytes_free")]
	pub total_local_bytes_free: total_local_bytes_free::Type,
	#[serde(rename = "total_library_bytes")]
	pub total_library_bytes: total_library_bytes::Type,
	#[serde(rename = "total_library_unique_bytes")]
	pub total_library_unique_bytes: total_library_unique_bytes::Type,
	#[serde(rename = "total_library_preview_media_bytes")]
	pub total_library_preview_media_bytes: total_library_preview_media_bytes::Type,
}
impl Data {}
::prisma_client_rust::macros::partial_unchecked_factory!(
	_partial_unchecked_statistics,
	prisma::statistics,
	struct Data {
		#[serde(rename = "id")]
		pub id: prisma::statistics::id::Type,
		#[serde(rename = "date_captured")]
		pub date_captured: prisma::statistics::date_captured::Type,
		#[serde(rename = "total_object_count")]
		pub total_object_count: prisma::statistics::total_object_count::Type,
		#[serde(rename = "library_db_size")]
		pub library_db_size: prisma::statistics::library_db_size::Type,
		#[serde(rename = "total_local_bytes_used")]
		pub total_local_bytes_used: prisma::statistics::total_local_bytes_used::Type,
		#[serde(rename = "total_local_bytes_capacity")]
		pub total_local_bytes_capacity: prisma::statistics::total_local_bytes_capacity::Type,
		#[serde(rename = "total_local_bytes_free")]
		pub total_local_bytes_free: prisma::statistics::total_local_bytes_free::Type,
		#[serde(rename = "total_library_bytes")]
		pub total_library_bytes: prisma::statistics::total_library_bytes::Type,
		#[serde(rename = "total_library_unique_bytes")]
		pub total_library_unique_bytes: prisma::statistics::total_library_unique_bytes::Type,
		#[serde(rename = "total_library_preview_media_bytes")]
		pub total_library_preview_media_bytes:
			prisma::statistics::total_library_preview_media_bytes::Type,
	}
);
::prisma_client_rust::macros::filter_factory!(
	_statistics_filter,
	prisma::statistics,
	[
		(id, Scalar),
		(date_captured, Scalar),
		(total_object_count, Scalar),
		(library_db_size, Scalar),
		(total_local_bytes_used, Scalar),
		(total_local_bytes_capacity, Scalar),
		(total_local_bytes_free, Scalar),
		(total_library_bytes, Scalar),
		(total_library_unique_bytes, Scalar),
		(total_library_preview_media_bytes, Scalar)
	]
);
pub type UniqueArgs = ::prisma_client_rust::UniqueArgs<Types>;
pub type ManyArgs = ::prisma_client_rust::ManyArgs<Types>;
pub type CountQuery<'a> = ::prisma_client_rust::Count<'a, Types>;
pub type CreateQuery<'a> = ::prisma_client_rust::Create<'a, Types>;
pub type CreateUncheckedQuery<'a> = ::prisma_client_rust::CreateUnchecked<'a, Types>;
pub type CreateManyQuery<'a> = ::prisma_client_rust::CreateMany<'a, Types>;
pub type FindUniqueQuery<'a> = ::prisma_client_rust::FindUnique<'a, Types>;
pub type FindManyQuery<'a> = ::prisma_client_rust::FindMany<'a, Types>;
pub type FindFirstQuery<'a> = ::prisma_client_rust::FindFirst<'a, Types>;
pub type UpdateQuery<'a> = ::prisma_client_rust::Update<'a, Types>;
pub type UpdateUncheckedQuery<'a> = ::prisma_client_rust::UpdateUnchecked<'a, Types>;
pub type UpdateManyQuery<'a> = ::prisma_client_rust::UpdateMany<'a, Types>;
pub type UpsertQuery<'a> = ::prisma_client_rust::Upsert<'a, Types>;
pub type DeleteQuery<'a> = ::prisma_client_rust::Delete<'a, Types>;
pub type DeleteManyQuery<'a> = ::prisma_client_rust::DeleteMany<'a, Types>;
#[derive(Clone)]
pub struct Actions<'a> {
	pub client: &'a ::prisma_client_rust::PrismaClientInternals,
}
impl<'a> Actions<'a> {
	pub fn find_unique(self, _where: UniqueWhereParam) -> FindUniqueQuery<'a> {
		FindUniqueQuery::new(self.client, _where)
	}
	pub fn find_first(self, _where: Vec<WhereParam>) -> FindFirstQuery<'a> {
		FindFirstQuery::new(self.client, _where)
	}
	pub fn find_many(self, _where: Vec<WhereParam>) -> FindManyQuery<'a> {
		FindManyQuery::new(self.client, _where)
	}
	pub fn create(self, mut _params: Vec<SetParam>) -> CreateQuery<'a> {
		_params.extend([]);
		CreateQuery::new(self.client, _params)
	}
	pub fn create_unchecked(self, mut _params: Vec<UncheckedSetParam>) -> CreateUncheckedQuery<'a> {
		_params.extend([]);
		CreateUncheckedQuery::new(self.client, _params.into_iter().map(Into::into).collect())
	}
	pub fn create_many(self, data: Vec<CreateUnchecked>) -> CreateManyQuery<'a> {
		let data = data.into_iter().map(CreateUnchecked::to_params).collect();
		CreateManyQuery::new(self.client, data)
	}
	pub fn update(self, _where: UniqueWhereParam, _params: Vec<SetParam>) -> UpdateQuery<'a> {
		UpdateQuery::new(self.client, _where, _params, vec![])
	}
	pub fn update_unchecked(
		self,
		_where: UniqueWhereParam,
		_params: Vec<UncheckedSetParam>,
	) -> UpdateUncheckedQuery<'a> {
		UpdateUncheckedQuery::new(
			self.client,
			_where,
			_params.into_iter().map(Into::into).collect(),
			vec![],
		)
	}
	pub fn update_many(
		self,
		_where: Vec<WhereParam>,
		_params: Vec<SetParam>,
	) -> UpdateManyQuery<'a> {
		UpdateManyQuery::new(self.client, _where, _params)
	}
	pub fn upsert(
		self,
		_where: UniqueWhereParam,
		_create: Create,
		_update: Vec<SetParam>,
	) -> UpsertQuery<'a> {
		UpsertQuery::new(self.client, _where, _create.to_params(), _update)
	}
	pub fn delete(self, _where: UniqueWhereParam) -> DeleteQuery<'a> {
		DeleteQuery::new(self.client, _where, vec![])
	}
	pub fn delete_many(self, _where: Vec<WhereParam>) -> DeleteManyQuery<'a> {
		DeleteManyQuery::new(self.client, _where)
	}
	pub fn count(self, _where: Vec<WhereParam>) -> CountQuery<'a> {
		CountQuery::new(self.client, _where)
	}
}
