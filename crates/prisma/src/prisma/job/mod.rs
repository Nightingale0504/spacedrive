// File generated by Prisma Client Rust. DO NOT EDIT

pub mod _count;
pub mod action;
pub mod children;
pub mod completed_task_count;
pub mod critical_error;
pub mod data;
pub mod date_completed;
pub mod date_created;
pub mod date_estimated_completion;
pub mod date_started;
pub mod errors_text;
pub mod id;
pub mod metadata;
pub mod name;
pub mod non_critical_errors;
pub mod parent;
pub mod parent_id;
pub mod status;
pub mod task_count;
use super::{_prisma::*, *};
pub const NAME: &str = "Job";
#[derive(Debug, Clone)]
pub enum WhereParam {
	Not(Vec<WhereParam>),
	Or(Vec<WhereParam>),
	And(Vec<WhereParam>),
	Id(super::_prisma::read_filters::BytesFilter),
	Name(super::_prisma::read_filters::StringNullableFilter),
	Action(super::_prisma::read_filters::StringNullableFilter),
	Status(super::_prisma::read_filters::IntNullableFilter),
	ErrorsText(super::_prisma::read_filters::StringNullableFilter),
	CriticalError(super::_prisma::read_filters::StringNullableFilter),
	NonCriticalErrors(super::_prisma::read_filters::BytesNullableFilter),
	Data(super::_prisma::read_filters::BytesNullableFilter),
	Metadata(super::_prisma::read_filters::BytesNullableFilter),
	ParentId(super::_prisma::read_filters::BytesNullableFilter),
	TaskCount(super::_prisma::read_filters::IntNullableFilter),
	CompletedTaskCount(super::_prisma::read_filters::IntNullableFilter),
	DateEstimatedCompletion(super::_prisma::read_filters::DateTimeNullableFilter),
	DateCreated(super::_prisma::read_filters::DateTimeNullableFilter),
	DateStarted(super::_prisma::read_filters::DateTimeNullableFilter),
	DateCompleted(super::_prisma::read_filters::DateTimeNullableFilter),
	ParentIsNull,
	ParentIs(Vec<super::job::WhereParam>),
	ParentIsNot(Vec<super::job::WhereParam>),
	ChildrenSome(Vec<super::job::WhereParam>),
	ChildrenEvery(Vec<super::job::WhereParam>),
	ChildrenNone(Vec<super::job::WhereParam>),
}
impl ::prisma_client_rust::WhereInput for WhereParam {
	fn serialize(self) -> ::prisma_client_rust::SerializedWhereInput {
		let (name, value) = match self {
			Self::Not(value) => (
				"NOT",
				::prisma_client_rust::SerializedWhereValue::Object(
					::prisma_client_rust::merge_fields(
						value
							.into_iter()
							.map(::prisma_client_rust::WhereInput::serialize)
							.map(Into::into)
							.collect(),
					),
				),
			),
			Self::Or(value) => (
				"OR",
				::prisma_client_rust::SerializedWhereValue::List(
					value
						.into_iter()
						.map(::prisma_client_rust::WhereInput::serialize)
						.map(|p| ::prisma_client_rust::PrismaValue::Object(vec![p.into()]))
						.collect(),
				),
			),
			Self::And(value) => (
				"AND",
				::prisma_client_rust::SerializedWhereValue::Object(
					::prisma_client_rust::merge_fields(
						value
							.into_iter()
							.map(::prisma_client_rust::WhereInput::serialize)
							.map(Into::into)
							.collect(),
					),
				),
			),
			Self::Id(value) => (id::NAME, value.into()),
			Self::Name(value) => (name::NAME, value.into()),
			Self::Action(value) => (action::NAME, value.into()),
			Self::Status(value) => (status::NAME, value.into()),
			Self::ErrorsText(value) => (errors_text::NAME, value.into()),
			Self::CriticalError(value) => (critical_error::NAME, value.into()),
			Self::NonCriticalErrors(value) => (non_critical_errors::NAME, value.into()),
			Self::Data(value) => (data::NAME, value.into()),
			Self::Metadata(value) => (metadata::NAME, value.into()),
			Self::ParentId(value) => (parent_id::NAME, value.into()),
			Self::TaskCount(value) => (task_count::NAME, value.into()),
			Self::CompletedTaskCount(value) => (completed_task_count::NAME, value.into()),
			Self::DateEstimatedCompletion(value) => (date_estimated_completion::NAME, value.into()),
			Self::DateCreated(value) => (date_created::NAME, value.into()),
			Self::DateStarted(value) => (date_started::NAME, value.into()),
			Self::DateCompleted(value) => (date_completed::NAME, value.into()),
			Self::ParentIsNull => (
				parent::NAME,
				::prisma_client_rust::SerializedWhereValue::Value(
					::prisma_client_rust::PrismaValue::Null,
				),
			),
			Self::ParentIs(where_params) => (
				parent::NAME,
				::prisma_client_rust::SerializedWhereValue::Object(vec![(
					"is".to_string(),
					::prisma_client_rust::PrismaValue::Object(
						where_params
							.into_iter()
							.map(::prisma_client_rust::WhereInput::serialize)
							.map(::prisma_client_rust::SerializedWhereInput::transform_equals)
							.collect(),
					),
				)]),
			),
			Self::ParentIsNot(where_params) => (
				parent::NAME,
				::prisma_client_rust::SerializedWhereValue::Object(vec![(
					"isNot".to_string(),
					::prisma_client_rust::PrismaValue::Object(
						where_params
							.into_iter()
							.map(::prisma_client_rust::WhereInput::serialize)
							.map(::prisma_client_rust::SerializedWhereInput::transform_equals)
							.collect(),
					),
				)]),
			),
			Self::ChildrenSome(where_params) => (
				children::NAME,
				::prisma_client_rust::SerializedWhereValue::Object(vec![(
					"some".to_string(),
					::prisma_client_rust::PrismaValue::Object(
						where_params
							.into_iter()
							.map(::prisma_client_rust::WhereInput::serialize)
							.map(::prisma_client_rust::SerializedWhereInput::transform_equals)
							.collect(),
					),
				)]),
			),
			Self::ChildrenEvery(where_params) => (
				children::NAME,
				::prisma_client_rust::SerializedWhereValue::Object(vec![(
					"every".to_string(),
					::prisma_client_rust::PrismaValue::Object(
						where_params
							.into_iter()
							.map(::prisma_client_rust::WhereInput::serialize)
							.map(::prisma_client_rust::SerializedWhereInput::transform_equals)
							.collect(),
					),
				)]),
			),
			Self::ChildrenNone(where_params) => (
				children::NAME,
				::prisma_client_rust::SerializedWhereValue::Object(vec![(
					"none".to_string(),
					::prisma_client_rust::PrismaValue::Object(
						where_params
							.into_iter()
							.map(::prisma_client_rust::WhereInput::serialize)
							.map(::prisma_client_rust::SerializedWhereInput::transform_equals)
							.collect(),
					),
				)]),
			),
		};
		::prisma_client_rust::SerializedWhereInput::new(name.to_string(), value.into())
	}
}
#[derive(Debug, Clone)]
pub enum UniqueWhereParam {
	IdEquals(Bytes),
}
impl ::prisma_client_rust::WhereInput for UniqueWhereParam {
	fn serialize(self) -> ::prisma_client_rust::SerializedWhereInput {
		let (name, value) = match self {
			UniqueWhereParam::IdEquals(value) => (
				"id",
				::prisma_client_rust::SerializedWhereValue::Value(
					::prisma_client_rust::PrismaValue::Bytes(value),
				),
			),
		};
		::prisma_client_rust::SerializedWhereInput::new(name.to_string(), value.into())
	}
}
impl From<::prisma_client_rust::Operator<Self>> for WhereParam {
	fn from(op: ::prisma_client_rust::Operator<Self>) -> Self {
		match op {
			::prisma_client_rust::Operator::Not(value) => Self::Not(value),
			::prisma_client_rust::Operator::And(value) => Self::And(value),
			::prisma_client_rust::Operator::Or(value) => Self::Or(value),
		}
	}
}
#[derive(Debug, Clone)]
pub enum OrderByWithRelationParam {
	Id(super::SortOrder),
	Name(super::SortOrder),
	Action(super::SortOrder),
	Status(super::SortOrder),
	ErrorsText(super::SortOrder),
	CriticalError(super::SortOrder),
	NonCriticalErrors(super::SortOrder),
	Data(super::SortOrder),
	Metadata(super::SortOrder),
	ParentId(super::SortOrder),
	TaskCount(super::SortOrder),
	CompletedTaskCount(super::SortOrder),
	DateEstimatedCompletion(super::SortOrder),
	DateCreated(super::SortOrder),
	DateStarted(super::SortOrder),
	DateCompleted(super::SortOrder),
	Parent(Vec<super::job::OrderByWithRelationParam>),
	Children(Vec<super::job::OrderByRelationAggregateParam>),
}
impl Into<(String, ::prisma_client_rust::PrismaValue)> for OrderByWithRelationParam {
	fn into(self) -> (String, ::prisma_client_rust::PrismaValue) {
		let (k, v) = match self {
			Self::Id(param) => ("id", param.into()),
			Self::Name(param) => ("name", param.into()),
			Self::Action(param) => ("action", param.into()),
			Self::Status(param) => ("status", param.into()),
			Self::ErrorsText(param) => ("errors_text", param.into()),
			Self::CriticalError(param) => ("critical_error", param.into()),
			Self::NonCriticalErrors(param) => ("non_critical_errors", param.into()),
			Self::Data(param) => ("data", param.into()),
			Self::Metadata(param) => ("metadata", param.into()),
			Self::ParentId(param) => ("parent_id", param.into()),
			Self::TaskCount(param) => ("task_count", param.into()),
			Self::CompletedTaskCount(param) => ("completed_task_count", param.into()),
			Self::DateEstimatedCompletion(param) => ("date_estimated_completion", param.into()),
			Self::DateCreated(param) => ("date_created", param.into()),
			Self::DateStarted(param) => ("date_started", param.into()),
			Self::DateCompleted(param) => ("date_completed", param.into()),
			Self::Parent(param) => (
				"parent",
				::prisma_client_rust::PrismaValue::Object(
					param.into_iter().map(Into::into).collect(),
				),
			),
			Self::Children(param) => (
				"children",
				::prisma_client_rust::PrismaValue::Object(
					param.into_iter().map(Into::into).collect(),
				),
			),
		};
		(k.to_string(), v)
	}
}
#[derive(Debug, Clone)]
pub enum OrderByRelationAggregateParam {
	_Count(super::SortOrder),
}
impl Into<(String, ::prisma_client_rust::PrismaValue)> for OrderByRelationAggregateParam {
	fn into(self) -> (String, ::prisma_client_rust::PrismaValue) {
		let (k, v) = match self {
			Self::_Count(param) => ("_count", param.into()),
		};
		(k.to_string(), v)
	}
}
#[derive(Debug, Clone)]
pub enum WithParam {
	Parent(super::job::UniqueArgs),
	Children(super::job::ManyArgs),
}
impl Into<::prisma_client_rust::Selection> for WithParam {
	fn into(self) -> ::prisma_client_rust::Selection {
		match self {
			Self::Parent(args) => {
				let mut selections =
					<super::job::Types as ::prisma_client_rust::ModelTypes>::scalar_selections();
				selections.extend(
					args.with_params
						.into_iter()
						.map(Into::<::prisma_client_rust::Selection>::into),
				);
				::prisma_client_rust::Selection::new(parent::NAME, None, [], selections)
			}
			Self::Children(args) => {
				let (arguments, mut nested_selections) = args.to_graphql();
				nested_selections.extend(
					<super::job::Types as ::prisma_client_rust::ModelTypes>::scalar_selections(),
				);
				::prisma_client_rust::Selection::new(
					children::NAME,
					None,
					arguments,
					nested_selections,
				)
			}
		}
	}
}
#[derive(Debug, Clone)]
pub enum SetParam {
	Id(super::_prisma::write_params::BytesParam),
	Name(super::_prisma::write_params::StringNullableParam),
	Action(super::_prisma::write_params::StringNullableParam),
	Status(super::_prisma::write_params::IntNullableParam),
	ErrorsText(super::_prisma::write_params::StringNullableParam),
	CriticalError(super::_prisma::write_params::StringNullableParam),
	NonCriticalErrors(super::_prisma::write_params::BytesNullableParam),
	Data(super::_prisma::write_params::BytesNullableParam),
	Metadata(super::_prisma::write_params::BytesNullableParam),
	ParentId(super::_prisma::write_params::BytesNullableParam),
	TaskCount(super::_prisma::write_params::IntNullableParam),
	CompletedTaskCount(super::_prisma::write_params::IntNullableParam),
	DateEstimatedCompletion(super::_prisma::write_params::DateTimeNullableParam),
	DateCreated(super::_prisma::write_params::DateTimeNullableParam),
	DateStarted(super::_prisma::write_params::DateTimeNullableParam),
	DateCompleted(super::_prisma::write_params::DateTimeNullableParam),
	ConnectParent(super::job::UniqueWhereParam),
	DisconnectParent,
	ConnectChildren(Vec<super::job::UniqueWhereParam>),
	DisconnectChildren(Vec<super::job::UniqueWhereParam>),
	SetChildren(Vec<super::job::UniqueWhereParam>),
}
impl Into<(String, ::prisma_client_rust::PrismaValue)> for SetParam {
	fn into(self) -> (String, ::prisma_client_rust::PrismaValue) {
		let (k, v) = match self {
			Self::Id(value) => (id::NAME, value.into()),
			Self::Name(value) => (name::NAME, value.into()),
			Self::Action(value) => (action::NAME, value.into()),
			Self::Status(value) => (status::NAME, value.into()),
			Self::ErrorsText(value) => (errors_text::NAME, value.into()),
			Self::CriticalError(value) => (critical_error::NAME, value.into()),
			Self::NonCriticalErrors(value) => (non_critical_errors::NAME, value.into()),
			Self::Data(value) => (data::NAME, value.into()),
			Self::Metadata(value) => (metadata::NAME, value.into()),
			Self::ParentId(value) => (parent_id::NAME, value.into()),
			Self::TaskCount(value) => (task_count::NAME, value.into()),
			Self::CompletedTaskCount(value) => (completed_task_count::NAME, value.into()),
			Self::DateEstimatedCompletion(value) => (date_estimated_completion::NAME, value.into()),
			Self::DateCreated(value) => (date_created::NAME, value.into()),
			Self::DateStarted(value) => (date_started::NAME, value.into()),
			Self::DateCompleted(value) => (date_completed::NAME, value.into()),
			Self::ConnectParent(where_param) => (
				parent::NAME,
				::prisma_client_rust::PrismaValue::Object(vec![(
					"connect".to_string(),
					::prisma_client_rust::PrismaValue::Object(
						[where_param]
							.into_iter()
							.map(::prisma_client_rust::WhereInput::serialize)
							.map(::prisma_client_rust::SerializedWhereInput::transform_equals)
							.collect(),
					),
				)]),
			),
			Self::DisconnectParent => (
				parent::NAME,
				::prisma_client_rust::PrismaValue::Object(vec![(
					"disconnect".to_string(),
					::prisma_client_rust::PrismaValue::Boolean(true),
				)]),
			),
			Self::ConnectChildren(where_params) => (
				children::NAME,
				::prisma_client_rust::PrismaValue::Object(vec![(
					"connect".to_string(),
					::prisma_client_rust::PrismaValue::List(
						where_params
							.into_iter()
							.map(::prisma_client_rust::WhereInput::serialize)
							.map(::prisma_client_rust::SerializedWhereInput::transform_equals)
							.map(|v| ::prisma_client_rust::PrismaValue::Object(vec![v]))
							.collect(),
					),
				)]),
			),
			Self::DisconnectChildren(where_params) => (
				children::NAME,
				::prisma_client_rust::PrismaValue::Object(vec![(
					"disconnect".to_string(),
					::prisma_client_rust::PrismaValue::List(
						where_params
							.into_iter()
							.map(::prisma_client_rust::WhereInput::serialize)
							.map(::prisma_client_rust::SerializedWhereInput::transform_equals)
							.map(|v| ::prisma_client_rust::PrismaValue::Object(vec![v]))
							.collect(),
					),
				)]),
			),
			Self::SetChildren(where_params) => (
				children::NAME,
				::prisma_client_rust::PrismaValue::Object(vec![(
					"set".to_string(),
					::prisma_client_rust::PrismaValue::List(
						where_params
							.into_iter()
							.map(::prisma_client_rust::WhereInput::serialize)
							.map(::prisma_client_rust::SerializedWhereInput::transform_equals)
							.map(|v| ::prisma_client_rust::PrismaValue::Object(vec![v]))
							.collect(),
					),
				)]),
			),
		};
		(k.to_string(), v)
	}
}
#[derive(Debug, Clone)]
pub enum UncheckedSetParam {
	Id(super::_prisma::write_params::BytesParam),
	Name(super::_prisma::write_params::StringNullableParam),
	Action(super::_prisma::write_params::StringNullableParam),
	Status(super::_prisma::write_params::IntNullableParam),
	ErrorsText(super::_prisma::write_params::StringNullableParam),
	CriticalError(super::_prisma::write_params::StringNullableParam),
	NonCriticalErrors(super::_prisma::write_params::BytesNullableParam),
	Data(super::_prisma::write_params::BytesNullableParam),
	Metadata(super::_prisma::write_params::BytesNullableParam),
	ParentId(super::_prisma::write_params::BytesNullableParam),
	TaskCount(super::_prisma::write_params::IntNullableParam),
	CompletedTaskCount(super::_prisma::write_params::IntNullableParam),
	DateEstimatedCompletion(super::_prisma::write_params::DateTimeNullableParam),
	DateCreated(super::_prisma::write_params::DateTimeNullableParam),
	DateStarted(super::_prisma::write_params::DateTimeNullableParam),
	DateCompleted(super::_prisma::write_params::DateTimeNullableParam),
}
impl Into<(String, ::prisma_client_rust::PrismaValue)> for UncheckedSetParam {
	fn into(self) -> (String, ::prisma_client_rust::PrismaValue) {
		let (k, v) = match self {
			Self::Id(value) => ("id", value.into()),
			Self::Name(value) => ("name", value.into()),
			Self::Action(value) => ("action", value.into()),
			Self::Status(value) => ("status", value.into()),
			Self::ErrorsText(value) => ("errors_text", value.into()),
			Self::CriticalError(value) => ("critical_error", value.into()),
			Self::NonCriticalErrors(value) => ("non_critical_errors", value.into()),
			Self::Data(value) => ("data", value.into()),
			Self::Metadata(value) => ("metadata", value.into()),
			Self::ParentId(value) => ("parent_id", value.into()),
			Self::TaskCount(value) => ("task_count", value.into()),
			Self::CompletedTaskCount(value) => ("completed_task_count", value.into()),
			Self::DateEstimatedCompletion(value) => ("date_estimated_completion", value.into()),
			Self::DateCreated(value) => ("date_created", value.into()),
			Self::DateStarted(value) => ("date_started", value.into()),
			Self::DateCompleted(value) => ("date_completed", value.into()),
		};
		(k.to_string(), v)
	}
}
::prisma_client_rust::macros::select_factory!(
	_select_job,
	select,
	prisma::job,
	struct Data {
		#[serde(rename = "id")]
		id: id::Type,
		#[serde(rename = "name")]
		name: name::Type,
		#[serde(rename = "action")]
		action: action::Type,
		#[serde(rename = "status")]
		status: status::Type,
		#[serde(rename = "errors_text")]
		errors_text: errors_text::Type,
		#[serde(rename = "critical_error")]
		critical_error: critical_error::Type,
		#[serde(rename = "non_critical_errors")]
		non_critical_errors: non_critical_errors::Type,
		#[serde(rename = "data")]
		data: data::Type,
		#[serde(rename = "metadata")]
		metadata: metadata::Type,
		#[serde(rename = "parent_id")]
		parent_id: parent_id::Type,
		#[serde(rename = "task_count")]
		task_count: task_count::Type,
		#[serde(rename = "completed_task_count")]
		completed_task_count: completed_task_count::Type,
		#[serde(rename = "date_estimated_completion")]
		date_estimated_completion: date_estimated_completion::Type,
		#[serde(rename = "date_created")]
		date_created: date_created::Type,
		#[serde(rename = "date_started")]
		date_started: date_started::Type,
		#[serde(rename = "date_completed")]
		date_completed: date_completed::Type,
		#[serde(rename = "parent")]
		parent: parent::Type,
		#[serde(rename = "children")]
		children: children::Type,
	},
	[
		(id, Scalar),
		(name, Scalar),
		(action, Scalar),
		(status, Scalar),
		(errors_text, Scalar),
		(critical_error, Scalar),
		(non_critical_errors, Scalar),
		(data, Scalar),
		(metadata, Scalar),
		(parent_id, Scalar),
		(task_count, Scalar),
		(completed_task_count, Scalar),
		(date_estimated_completion, Scalar),
		(date_created, Scalar),
		(date_started, Scalar),
		(date_completed, Scalar),
		(parent, Relation(prisma::job, Optional)),
		(children, Relation(prisma::job, Many))
	]
);
pub enum SelectParam {
	Id(id::Select),
	Name(name::Select),
	Action(action::Select),
	Status(status::Select),
	ErrorsText(errors_text::Select),
	CriticalError(critical_error::Select),
	NonCriticalErrors(non_critical_errors::Select),
	Data(data::Select),
	Metadata(metadata::Select),
	ParentId(parent_id::Select),
	TaskCount(task_count::Select),
	CompletedTaskCount(completed_task_count::Select),
	DateEstimatedCompletion(date_estimated_completion::Select),
	DateCreated(date_created::Select),
	DateStarted(date_started::Select),
	DateCompleted(date_completed::Select),
	Parent(parent::Select),
	Children(children::Select),
}
impl Into<::prisma_client_rust::Selection> for SelectParam {
	fn into(self) -> ::prisma_client_rust::Selection {
		match self {
			Self::Id(data) => data.into(),
			Self::Name(data) => data.into(),
			Self::Action(data) => data.into(),
			Self::Status(data) => data.into(),
			Self::ErrorsText(data) => data.into(),
			Self::CriticalError(data) => data.into(),
			Self::NonCriticalErrors(data) => data.into(),
			Self::Data(data) => data.into(),
			Self::Metadata(data) => data.into(),
			Self::ParentId(data) => data.into(),
			Self::TaskCount(data) => data.into(),
			Self::CompletedTaskCount(data) => data.into(),
			Self::DateEstimatedCompletion(data) => data.into(),
			Self::DateCreated(data) => data.into(),
			Self::DateStarted(data) => data.into(),
			Self::DateCompleted(data) => data.into(),
			Self::Parent(data) => data.into(),
			Self::Children(data) => data.into(),
		}
	}
}
::prisma_client_rust::macros::include_factory!(
	_include_job,
	include,
	prisma::job,
	struct Data {
		#[serde(rename = "id")]
		id: id::Type,
		#[serde(rename = "name")]
		name: name::Type,
		#[serde(rename = "action")]
		action: action::Type,
		#[serde(rename = "status")]
		status: status::Type,
		#[serde(rename = "errors_text")]
		errors_text: errors_text::Type,
		#[serde(rename = "critical_error")]
		critical_error: critical_error::Type,
		#[serde(rename = "non_critical_errors")]
		non_critical_errors: non_critical_errors::Type,
		#[serde(rename = "data")]
		data: data::Type,
		#[serde(rename = "metadata")]
		metadata: metadata::Type,
		#[serde(rename = "parent_id")]
		parent_id: parent_id::Type,
		#[serde(rename = "task_count")]
		task_count: task_count::Type,
		#[serde(rename = "completed_task_count")]
		completed_task_count: completed_task_count::Type,
		#[serde(rename = "date_estimated_completion")]
		date_estimated_completion: date_estimated_completion::Type,
		#[serde(rename = "date_created")]
		date_created: date_created::Type,
		#[serde(rename = "date_started")]
		date_started: date_started::Type,
		#[serde(rename = "date_completed")]
		date_completed: date_completed::Type,
		#[serde(rename = "parent")]
		parent: parent::Type,
		#[serde(rename = "children")]
		children: children::Type,
	},
	[
		(parent, Relation(prisma::job, Optional)),
		(children, Relation(prisma::job, Many))
	]
);
pub enum IncludeParam {
	Id(id::Include),
	Name(name::Include),
	Action(action::Include),
	Status(status::Include),
	ErrorsText(errors_text::Include),
	CriticalError(critical_error::Include),
	NonCriticalErrors(non_critical_errors::Include),
	Data(data::Include),
	Metadata(metadata::Include),
	ParentId(parent_id::Include),
	TaskCount(task_count::Include),
	CompletedTaskCount(completed_task_count::Include),
	DateEstimatedCompletion(date_estimated_completion::Include),
	DateCreated(date_created::Include),
	DateStarted(date_started::Include),
	DateCompleted(date_completed::Include),
	Parent(parent::Include),
	Children(children::Include),
}
impl Into<::prisma_client_rust::Selection> for IncludeParam {
	fn into(self) -> ::prisma_client_rust::Selection {
		match self {
			Self::Id(data) => data.into(),
			Self::Name(data) => data.into(),
			Self::Action(data) => data.into(),
			Self::Status(data) => data.into(),
			Self::ErrorsText(data) => data.into(),
			Self::CriticalError(data) => data.into(),
			Self::NonCriticalErrors(data) => data.into(),
			Self::Data(data) => data.into(),
			Self::Metadata(data) => data.into(),
			Self::ParentId(data) => data.into(),
			Self::TaskCount(data) => data.into(),
			Self::CompletedTaskCount(data) => data.into(),
			Self::DateEstimatedCompletion(data) => data.into(),
			Self::DateCreated(data) => data.into(),
			Self::DateStarted(data) => data.into(),
			Self::DateCompleted(data) => data.into(),
			Self::Parent(data) => data.into(),
			Self::Children(data) => data.into(),
		}
	}
}
#[derive(Debug, Clone)]
pub struct Create {
	pub id: Bytes,
	pub _params: Vec<SetParam>,
}
impl Create {
	pub fn to_query<'a>(self, client: &'a PrismaClient) -> CreateQuery<'a> {
		client.job().create(self.id, self._params)
	}
	pub fn to_params(mut self) -> Vec<SetParam> {
		self._params.extend([id::set(self.id)]);
		self._params
	}
}
pub fn create(id: Bytes, _params: Vec<SetParam>) -> Create {
	Create { id, _params }
}
#[derive(Debug, Clone)]
pub struct CreateUnchecked {
	pub id: Bytes,
	pub _params: Vec<UncheckedSetParam>,
}
impl CreateUnchecked {
	pub fn to_query<'a>(self, client: &'a PrismaClient) -> CreateUncheckedQuery<'a> {
		client.job().create_unchecked(self.id, self._params)
	}
	pub fn to_params(mut self) -> Vec<UncheckedSetParam> {
		self._params.extend([id::set(self.id)]);
		self._params
	}
}
pub fn create_unchecked(id: Bytes, _params: Vec<UncheckedSetParam>) -> CreateUnchecked {
	CreateUnchecked { id, _params }
}
#[derive(Debug, Clone)]
pub struct Types;
impl ::prisma_client_rust::ModelTypes for Types {
	type Data = Data;
	type Where = WhereParam;
	type WhereUnique = UniqueWhereParam;
	type UncheckedSet = UncheckedSetParam;
	type Set = SetParam;
	type With = WithParam;
	type OrderBy = OrderByWithRelationParam;
	type Cursor = UniqueWhereParam;
	const MODEL: &'static str = NAME;
	fn scalar_selections() -> Vec<::prisma_client_rust::Selection> {
		vec![
			::prisma_client_rust::sel(id::NAME),
			::prisma_client_rust::sel(name::NAME),
			::prisma_client_rust::sel(action::NAME),
			::prisma_client_rust::sel(status::NAME),
			::prisma_client_rust::sel(errors_text::NAME),
			::prisma_client_rust::sel(critical_error::NAME),
			::prisma_client_rust::sel(non_critical_errors::NAME),
			::prisma_client_rust::sel(data::NAME),
			::prisma_client_rust::sel(metadata::NAME),
			::prisma_client_rust::sel(parent_id::NAME),
			::prisma_client_rust::sel(task_count::NAME),
			::prisma_client_rust::sel(completed_task_count::NAME),
			::prisma_client_rust::sel(date_estimated_completion::NAME),
			::prisma_client_rust::sel(date_created::NAME),
			::prisma_client_rust::sel(date_started::NAME),
			::prisma_client_rust::sel(date_completed::NAME),
		]
	}
}
#[derive(
	Debug,
	Clone,
	:: serde :: Serialize,
	:: serde :: Deserialize,
	:: prisma_client_rust :: specta :: Type,
)]
# [specta (rename = "Job" , crate = prisma_client_rust :: specta)]
pub struct Data {
	#[serde(rename = "id")]
	pub id: id::Type,
	#[serde(rename = "name")]
	pub name: name::Type,
	#[serde(rename = "action")]
	pub action: action::Type,
	#[serde(rename = "status")]
	pub status: status::Type,
	#[serde(rename = "errors_text")]
	pub errors_text: errors_text::Type,
	#[serde(rename = "critical_error")]
	pub critical_error: critical_error::Type,
	#[serde(rename = "non_critical_errors")]
	pub non_critical_errors: non_critical_errors::Type,
	#[serde(rename = "data")]
	pub data: data::Type,
	#[serde(rename = "metadata")]
	pub metadata: metadata::Type,
	#[serde(rename = "parent_id")]
	pub parent_id: parent_id::Type,
	#[serde(rename = "task_count")]
	pub task_count: task_count::Type,
	#[serde(rename = "completed_task_count")]
	pub completed_task_count: completed_task_count::Type,
	#[serde(rename = "date_estimated_completion")]
	pub date_estimated_completion: date_estimated_completion::Type,
	#[serde(rename = "date_created")]
	pub date_created: date_created::Type,
	#[serde(rename = "date_started")]
	pub date_started: date_started::Type,
	#[serde(rename = "date_completed")]
	pub date_completed: date_completed::Type,
	#[serde(
		rename = "parent",
		default,
		skip_serializing_if = "Option::is_none",
		with = "prisma_client_rust::serde::double_option"
	)]
	#[specta(skip)]
	pub parent: Option<parent::RecursiveSafeType>,
	#[serde(rename = "children")]
	#[specta(skip)]
	pub children: Option<children::RecursiveSafeType>,
}
impl Data {
	pub fn parent(
		&self,
	) -> Result<Option<&super::job::Data>, ::prisma_client_rust::RelationNotFetchedError> {
		self.parent
			.as_ref()
			.ok_or(::prisma_client_rust::RelationNotFetchedError::new(
				stringify!(parent),
			))
			.map(|v| v.as_ref().map(|v| v.as_ref()))
	}
	pub fn children(
		&self,
	) -> Result<&children::Type, ::prisma_client_rust::RelationNotFetchedError> {
		self.children
			.as_ref()
			.ok_or(::prisma_client_rust::RelationNotFetchedError::new(
				stringify!(children),
			))
	}
}
::prisma_client_rust::macros::partial_unchecked_factory!(
	_partial_unchecked_job,
	prisma::job,
	struct Data {
		#[serde(rename = "id")]
		pub id: prisma::job::id::Type,
		#[serde(rename = "name")]
		#[serde(default, with = "::prisma_client_rust::serde::double_option")]
		pub name: prisma::job::name::Type,
		#[serde(rename = "action")]
		#[serde(default, with = "::prisma_client_rust::serde::double_option")]
		pub action: prisma::job::action::Type,
		#[serde(rename = "status")]
		#[serde(default, with = "::prisma_client_rust::serde::double_option")]
		pub status: prisma::job::status::Type,
		#[serde(rename = "errors_text")]
		#[serde(default, with = "::prisma_client_rust::serde::double_option")]
		pub errors_text: prisma::job::errors_text::Type,
		#[serde(rename = "critical_error")]
		#[serde(default, with = "::prisma_client_rust::serde::double_option")]
		pub critical_error: prisma::job::critical_error::Type,
		#[serde(rename = "non_critical_errors")]
		#[serde(default, with = "::prisma_client_rust::serde::double_option")]
		pub non_critical_errors: prisma::job::non_critical_errors::Type,
		#[serde(rename = "data")]
		#[serde(default, with = "::prisma_client_rust::serde::double_option")]
		pub data: prisma::job::data::Type,
		#[serde(rename = "metadata")]
		#[serde(default, with = "::prisma_client_rust::serde::double_option")]
		pub metadata: prisma::job::metadata::Type,
		#[serde(rename = "parent_id")]
		#[serde(default, with = "::prisma_client_rust::serde::double_option")]
		pub parent_id: prisma::job::parent_id::Type,
		#[serde(rename = "task_count")]
		#[serde(default, with = "::prisma_client_rust::serde::double_option")]
		pub task_count: prisma::job::task_count::Type,
		#[serde(rename = "completed_task_count")]
		#[serde(default, with = "::prisma_client_rust::serde::double_option")]
		pub completed_task_count: prisma::job::completed_task_count::Type,
		#[serde(rename = "date_estimated_completion")]
		#[serde(default, with = "::prisma_client_rust::serde::double_option")]
		pub date_estimated_completion: prisma::job::date_estimated_completion::Type,
		#[serde(rename = "date_created")]
		#[serde(default, with = "::prisma_client_rust::serde::double_option")]
		pub date_created: prisma::job::date_created::Type,
		#[serde(rename = "date_started")]
		#[serde(default, with = "::prisma_client_rust::serde::double_option")]
		pub date_started: prisma::job::date_started::Type,
		#[serde(rename = "date_completed")]
		#[serde(default, with = "::prisma_client_rust::serde::double_option")]
		pub date_completed: prisma::job::date_completed::Type,
	}
);
::prisma_client_rust::macros::filter_factory!(
	_job_filter,
	prisma::job,
	[
		(id, Scalar),
		(name, Scalar),
		(action, Scalar),
		(status, Scalar),
		(errors_text, Scalar),
		(critical_error, Scalar),
		(non_critical_errors, Scalar),
		(data, Scalar),
		(metadata, Scalar),
		(parent_id, Scalar),
		(task_count, Scalar),
		(completed_task_count, Scalar),
		(date_estimated_completion, Scalar),
		(date_created, Scalar),
		(date_started, Scalar),
		(date_completed, Scalar),
		(parent, Relation(prisma::job, Optional)),
		(children, Relation(prisma::job, Many))
	]
);
pub type UniqueArgs = ::prisma_client_rust::UniqueArgs<Types>;
pub type ManyArgs = ::prisma_client_rust::ManyArgs<Types>;
pub type CountQuery<'a> = ::prisma_client_rust::Count<'a, Types>;
pub type CreateQuery<'a> = ::prisma_client_rust::Create<'a, Types>;
pub type CreateUncheckedQuery<'a> = ::prisma_client_rust::CreateUnchecked<'a, Types>;
pub type CreateManyQuery<'a> = ::prisma_client_rust::CreateMany<'a, Types>;
pub type FindUniqueQuery<'a> = ::prisma_client_rust::FindUnique<'a, Types>;
pub type FindManyQuery<'a> = ::prisma_client_rust::FindMany<'a, Types>;
pub type FindFirstQuery<'a> = ::prisma_client_rust::FindFirst<'a, Types>;
pub type UpdateQuery<'a> = ::prisma_client_rust::Update<'a, Types>;
pub type UpdateUncheckedQuery<'a> = ::prisma_client_rust::UpdateUnchecked<'a, Types>;
pub type UpdateManyQuery<'a> = ::prisma_client_rust::UpdateMany<'a, Types>;
pub type UpsertQuery<'a> = ::prisma_client_rust::Upsert<'a, Types>;
pub type DeleteQuery<'a> = ::prisma_client_rust::Delete<'a, Types>;
pub type DeleteManyQuery<'a> = ::prisma_client_rust::DeleteMany<'a, Types>;
#[derive(Clone)]
pub struct Actions<'a> {
	pub client: &'a ::prisma_client_rust::PrismaClientInternals,
}
impl<'a> Actions<'a> {
	pub fn find_unique(self, _where: UniqueWhereParam) -> FindUniqueQuery<'a> {
		FindUniqueQuery::new(self.client, _where)
	}
	pub fn find_first(self, _where: Vec<WhereParam>) -> FindFirstQuery<'a> {
		FindFirstQuery::new(self.client, _where)
	}
	pub fn find_many(self, _where: Vec<WhereParam>) -> FindManyQuery<'a> {
		FindManyQuery::new(self.client, _where)
	}
	pub fn create(self, id: Bytes, mut _params: Vec<SetParam>) -> CreateQuery<'a> {
		_params.extend([id::set(id)]);
		CreateQuery::new(self.client, _params)
	}
	pub fn create_unchecked(
		self,
		id: Bytes,
		mut _params: Vec<UncheckedSetParam>,
	) -> CreateUncheckedQuery<'a> {
		_params.extend([id::set(id)]);
		CreateUncheckedQuery::new(self.client, _params.into_iter().map(Into::into).collect())
	}
	pub fn create_many(self, data: Vec<CreateUnchecked>) -> CreateManyQuery<'a> {
		let data = data.into_iter().map(CreateUnchecked::to_params).collect();
		CreateManyQuery::new(self.client, data)
	}
	pub fn update(self, _where: UniqueWhereParam, _params: Vec<SetParam>) -> UpdateQuery<'a> {
		UpdateQuery::new(self.client, _where, _params, vec![])
	}
	pub fn update_unchecked(
		self,
		_where: UniqueWhereParam,
		_params: Vec<UncheckedSetParam>,
	) -> UpdateUncheckedQuery<'a> {
		UpdateUncheckedQuery::new(
			self.client,
			_where,
			_params.into_iter().map(Into::into).collect(),
			vec![],
		)
	}
	pub fn update_many(
		self,
		_where: Vec<WhereParam>,
		_params: Vec<SetParam>,
	) -> UpdateManyQuery<'a> {
		UpdateManyQuery::new(self.client, _where, _params)
	}
	pub fn upsert(
		self,
		_where: UniqueWhereParam,
		_create: Create,
		_update: Vec<SetParam>,
	) -> UpsertQuery<'a> {
		UpsertQuery::new(self.client, _where, _create.to_params(), _update)
	}
	pub fn delete(self, _where: UniqueWhereParam) -> DeleteQuery<'a> {
		DeleteQuery::new(self.client, _where, vec![])
	}
	pub fn delete_many(self, _where: Vec<WhereParam>) -> DeleteManyQuery<'a> {
		DeleteManyQuery::new(self.client, _where)
	}
	pub fn count(self, _where: Vec<WhereParam>) -> CountQuery<'a> {
		CountQuery::new(self.client, _where)
	}
}
