// File generated by Prisma Client Rust. DO NOT EDIT

pub mod _count;
pub mod data;
pub mod id;
pub mod instance;
pub mod instance_id;
pub mod kind;
pub mod model;
pub mod record_id;
pub mod timestamp;
use super::{_prisma::*, *};
pub const NAME: &str = "CloudCRDTOperation";
#[derive(Debug, Clone)]
pub enum WhereParam {
	Not(Vec<WhereParam>),
	Or(Vec<WhereParam>),
	And(Vec<WhereParam>),
	Id(super::_prisma::read_filters::IntFilter),
	Timestamp(super::_prisma::read_filters::BigIntFilter),
	Model(super::_prisma::read_filters::IntFilter),
	RecordId(super::_prisma::read_filters::BytesFilter),
	Kind(super::_prisma::read_filters::StringFilter),
	Data(super::_prisma::read_filters::BytesFilter),
	InstanceId(super::_prisma::read_filters::IntFilter),
	InstanceIs(Vec<super::instance::WhereParam>),
	InstanceIsNot(Vec<super::instance::WhereParam>),
}
impl ::prisma_client_rust::WhereInput for WhereParam {
	fn serialize(self) -> ::prisma_client_rust::SerializedWhereInput {
		let (name, value) = match self {
			Self::Not(value) => (
				"NOT",
				::prisma_client_rust::SerializedWhereValue::Object(
					::prisma_client_rust::merge_fields(
						value
							.into_iter()
							.map(::prisma_client_rust::WhereInput::serialize)
							.map(Into::into)
							.collect(),
					),
				),
			),
			Self::Or(value) => (
				"OR",
				::prisma_client_rust::SerializedWhereValue::List(
					value
						.into_iter()
						.map(::prisma_client_rust::WhereInput::serialize)
						.map(|p| ::prisma_client_rust::PrismaValue::Object(vec![p.into()]))
						.collect(),
				),
			),
			Self::And(value) => (
				"AND",
				::prisma_client_rust::SerializedWhereValue::Object(
					::prisma_client_rust::merge_fields(
						value
							.into_iter()
							.map(::prisma_client_rust::WhereInput::serialize)
							.map(Into::into)
							.collect(),
					),
				),
			),
			Self::Id(value) => (id::NAME, value.into()),
			Self::Timestamp(value) => (timestamp::NAME, value.into()),
			Self::Model(value) => (model::NAME, value.into()),
			Self::RecordId(value) => (record_id::NAME, value.into()),
			Self::Kind(value) => (kind::NAME, value.into()),
			Self::Data(value) => (data::NAME, value.into()),
			Self::InstanceId(value) => (instance_id::NAME, value.into()),
			Self::InstanceIs(where_params) => (
				instance::NAME,
				::prisma_client_rust::SerializedWhereValue::Object(vec![(
					"is".to_string(),
					::prisma_client_rust::PrismaValue::Object(
						where_params
							.into_iter()
							.map(::prisma_client_rust::WhereInput::serialize)
							.map(::prisma_client_rust::SerializedWhereInput::transform_equals)
							.collect(),
					),
				)]),
			),
			Self::InstanceIsNot(where_params) => (
				instance::NAME,
				::prisma_client_rust::SerializedWhereValue::Object(vec![(
					"isNot".to_string(),
					::prisma_client_rust::PrismaValue::Object(
						where_params
							.into_iter()
							.map(::prisma_client_rust::WhereInput::serialize)
							.map(::prisma_client_rust::SerializedWhereInput::transform_equals)
							.collect(),
					),
				)]),
			),
		};
		::prisma_client_rust::SerializedWhereInput::new(name.to_string(), value.into())
	}
}
#[derive(Debug, Clone)]
pub enum UniqueWhereParam {
	IdEquals(Int),
}
impl ::prisma_client_rust::WhereInput for UniqueWhereParam {
	fn serialize(self) -> ::prisma_client_rust::SerializedWhereInput {
		let (name, value) = match self {
			UniqueWhereParam::IdEquals(value) => (
				"id",
				::prisma_client_rust::SerializedWhereValue::Value(
					::prisma_client_rust::PrismaValue::Int(value),
				),
			),
		};
		::prisma_client_rust::SerializedWhereInput::new(name.to_string(), value.into())
	}
}
impl From<::prisma_client_rust::Operator<Self>> for WhereParam {
	fn from(op: ::prisma_client_rust::Operator<Self>) -> Self {
		match op {
			::prisma_client_rust::Operator::Not(value) => Self::Not(value),
			::prisma_client_rust::Operator::And(value) => Self::And(value),
			::prisma_client_rust::Operator::Or(value) => Self::Or(value),
		}
	}
}
#[derive(Debug, Clone)]
pub enum OrderByWithRelationParam {
	Id(super::SortOrder),
	Timestamp(super::SortOrder),
	Model(super::SortOrder),
	RecordId(super::SortOrder),
	Kind(super::SortOrder),
	Data(super::SortOrder),
	InstanceId(super::SortOrder),
	Instance(Vec<super::instance::OrderByWithRelationParam>),
}
impl Into<(String, ::prisma_client_rust::PrismaValue)> for OrderByWithRelationParam {
	fn into(self) -> (String, ::prisma_client_rust::PrismaValue) {
		let (k, v) = match self {
			Self::Id(param) => ("id", param.into()),
			Self::Timestamp(param) => ("timestamp", param.into()),
			Self::Model(param) => ("model", param.into()),
			Self::RecordId(param) => ("record_id", param.into()),
			Self::Kind(param) => ("kind", param.into()),
			Self::Data(param) => ("data", param.into()),
			Self::InstanceId(param) => ("instance_id", param.into()),
			Self::Instance(param) => (
				"instance",
				::prisma_client_rust::PrismaValue::Object(
					param.into_iter().map(Into::into).collect(),
				),
			),
		};
		(k.to_string(), v)
	}
}
#[derive(Debug, Clone)]
pub enum OrderByRelationAggregateParam {
	_Count(super::SortOrder),
}
impl Into<(String, ::prisma_client_rust::PrismaValue)> for OrderByRelationAggregateParam {
	fn into(self) -> (String, ::prisma_client_rust::PrismaValue) {
		let (k, v) = match self {
			Self::_Count(param) => ("_count", param.into()),
		};
		(k.to_string(), v)
	}
}
#[derive(Debug, Clone)]
pub enum WithParam {
	Instance(super::instance::UniqueArgs),
}
impl Into<::prisma_client_rust::Selection> for WithParam {
	fn into(self) -> ::prisma_client_rust::Selection {
		match self {
			Self::Instance(args) => {
				let mut selections =
					<super::instance::Types as ::prisma_client_rust::ModelTypes>::scalar_selections(
					);
				selections.extend(
					args.with_params
						.into_iter()
						.map(Into::<::prisma_client_rust::Selection>::into),
				);
				::prisma_client_rust::Selection::new(instance::NAME, None, [], selections)
			}
		}
	}
}
#[derive(Debug, Clone)]
pub enum SetParam {
	Id(super::_prisma::write_params::IntParam),
	Timestamp(super::_prisma::write_params::BigIntParam),
	Model(super::_prisma::write_params::IntParam),
	RecordId(super::_prisma::write_params::BytesParam),
	Kind(super::_prisma::write_params::StringParam),
	Data(super::_prisma::write_params::BytesParam),
	InstanceId(super::_prisma::write_params::IntParam),
	ConnectInstance(super::instance::UniqueWhereParam),
}
impl Into<(String, ::prisma_client_rust::PrismaValue)> for SetParam {
	fn into(self) -> (String, ::prisma_client_rust::PrismaValue) {
		let (k, v) = match self {
			Self::Id(value) => (id::NAME, value.into()),
			Self::Timestamp(value) => (timestamp::NAME, value.into()),
			Self::Model(value) => (model::NAME, value.into()),
			Self::RecordId(value) => (record_id::NAME, value.into()),
			Self::Kind(value) => (kind::NAME, value.into()),
			Self::Data(value) => (data::NAME, value.into()),
			Self::InstanceId(value) => (instance_id::NAME, value.into()),
			Self::ConnectInstance(where_param) => (
				instance::NAME,
				::prisma_client_rust::PrismaValue::Object(vec![(
					"connect".to_string(),
					::prisma_client_rust::PrismaValue::Object(
						[where_param]
							.into_iter()
							.map(::prisma_client_rust::WhereInput::serialize)
							.map(::prisma_client_rust::SerializedWhereInput::transform_equals)
							.collect(),
					),
				)]),
			),
		};
		(k.to_string(), v)
	}
}
#[derive(Debug, Clone)]
pub enum UncheckedSetParam {
	Id(super::_prisma::write_params::IntParam),
	Timestamp(super::_prisma::write_params::BigIntParam),
	Model(super::_prisma::write_params::IntParam),
	RecordId(super::_prisma::write_params::BytesParam),
	Kind(super::_prisma::write_params::StringParam),
	Data(super::_prisma::write_params::BytesParam),
	InstanceId(super::_prisma::write_params::IntParam),
}
impl Into<(String, ::prisma_client_rust::PrismaValue)> for UncheckedSetParam {
	fn into(self) -> (String, ::prisma_client_rust::PrismaValue) {
		let (k, v) = match self {
			Self::Id(value) => ("id", value.into()),
			Self::Timestamp(value) => ("timestamp", value.into()),
			Self::Model(value) => ("model", value.into()),
			Self::RecordId(value) => ("record_id", value.into()),
			Self::Kind(value) => ("kind", value.into()),
			Self::Data(value) => ("data", value.into()),
			Self::InstanceId(value) => ("instance_id", value.into()),
		};
		(k.to_string(), v)
	}
}
::prisma_client_rust::macros::select_factory!(
	_select_cloud_crdt_operation,
	select,
	prisma::cloud_crdt_operation,
	struct Data {
		#[serde(rename = "id")]
		id: id::Type,
		#[serde(rename = "timestamp")]
		timestamp: timestamp::Type,
		#[serde(rename = "model")]
		model: model::Type,
		#[serde(rename = "record_id")]
		record_id: record_id::Type,
		#[serde(rename = "kind")]
		kind: kind::Type,
		#[serde(rename = "data")]
		data: data::Type,
		#[serde(rename = "instance_id")]
		instance_id: instance_id::Type,
		#[serde(rename = "instance")]
		instance: instance::Type,
	},
	[
		(id, Scalar),
		(timestamp, Scalar),
		(model, Scalar),
		(record_id, Scalar),
		(kind, Scalar),
		(data, Scalar),
		(instance_id, Scalar),
		(instance, Relation(prisma::instance, One))
	]
);
pub enum SelectParam {
	Id(id::Select),
	Timestamp(timestamp::Select),
	Model(model::Select),
	RecordId(record_id::Select),
	Kind(kind::Select),
	Data(data::Select),
	InstanceId(instance_id::Select),
	Instance(instance::Select),
}
impl Into<::prisma_client_rust::Selection> for SelectParam {
	fn into(self) -> ::prisma_client_rust::Selection {
		match self {
			Self::Id(data) => data.into(),
			Self::Timestamp(data) => data.into(),
			Self::Model(data) => data.into(),
			Self::RecordId(data) => data.into(),
			Self::Kind(data) => data.into(),
			Self::Data(data) => data.into(),
			Self::InstanceId(data) => data.into(),
			Self::Instance(data) => data.into(),
		}
	}
}
::prisma_client_rust::macros::include_factory!(
	_include_cloud_crdt_operation,
	include,
	prisma::cloud_crdt_operation,
	struct Data {
		#[serde(rename = "id")]
		id: id::Type,
		#[serde(rename = "timestamp")]
		timestamp: timestamp::Type,
		#[serde(rename = "model")]
		model: model::Type,
		#[serde(rename = "record_id")]
		record_id: record_id::Type,
		#[serde(rename = "kind")]
		kind: kind::Type,
		#[serde(rename = "data")]
		data: data::Type,
		#[serde(rename = "instance_id")]
		instance_id: instance_id::Type,
		#[serde(rename = "instance")]
		instance: instance::Type,
	},
	[(instance, Relation(prisma::instance, One))]
);
pub enum IncludeParam {
	Id(id::Include),
	Timestamp(timestamp::Include),
	Model(model::Include),
	RecordId(record_id::Include),
	Kind(kind::Include),
	Data(data::Include),
	InstanceId(instance_id::Include),
	Instance(instance::Include),
}
impl Into<::prisma_client_rust::Selection> for IncludeParam {
	fn into(self) -> ::prisma_client_rust::Selection {
		match self {
			Self::Id(data) => data.into(),
			Self::Timestamp(data) => data.into(),
			Self::Model(data) => data.into(),
			Self::RecordId(data) => data.into(),
			Self::Kind(data) => data.into(),
			Self::Data(data) => data.into(),
			Self::InstanceId(data) => data.into(),
			Self::Instance(data) => data.into(),
		}
	}
}
#[derive(Debug, Clone)]
pub struct Create {
	pub timestamp: BigInt,
	pub model: Int,
	pub record_id: Bytes,
	pub kind: String,
	pub data: Bytes,
	pub instance: super::instance::UniqueWhereParam,
	pub _params: Vec<SetParam>,
}
impl Create {
	pub fn to_query<'a>(self, client: &'a PrismaClient) -> CreateQuery<'a> {
		client.cloud_crdt_operation().create(
			self.timestamp,
			self.model,
			self.record_id,
			self.kind,
			self.data,
			self.instance,
			self._params,
		)
	}
	pub fn to_params(mut self) -> Vec<SetParam> {
		self._params.extend([
			timestamp::set(self.timestamp),
			model::set(self.model),
			record_id::set(self.record_id),
			kind::set(self.kind),
			data::set(self.data),
			instance::connect(self.instance),
		]);
		self._params
	}
}
pub fn create(
	timestamp: BigInt,
	model: Int,
	record_id: Bytes,
	kind: String,
	data: Bytes,
	instance: super::instance::UniqueWhereParam,
	_params: Vec<SetParam>,
) -> Create {
	Create {
		timestamp,
		model,
		record_id,
		kind,
		data,
		instance,
		_params,
	}
}
#[derive(Debug, Clone)]
pub struct CreateUnchecked {
	pub timestamp: BigInt,
	pub model: Int,
	pub record_id: Bytes,
	pub kind: String,
	pub data: Bytes,
	pub instance_id: Int,
	pub _params: Vec<UncheckedSetParam>,
}
impl CreateUnchecked {
	pub fn to_query<'a>(self, client: &'a PrismaClient) -> CreateUncheckedQuery<'a> {
		client.cloud_crdt_operation().create_unchecked(
			self.timestamp,
			self.model,
			self.record_id,
			self.kind,
			self.data,
			self.instance_id,
			self._params,
		)
	}
	pub fn to_params(mut self) -> Vec<UncheckedSetParam> {
		self._params.extend([
			timestamp::set(self.timestamp),
			model::set(self.model),
			record_id::set(self.record_id),
			kind::set(self.kind),
			data::set(self.data),
			instance_id::set(self.instance_id),
		]);
		self._params
	}
}
pub fn create_unchecked(
	timestamp: BigInt,
	model: Int,
	record_id: Bytes,
	kind: String,
	data: Bytes,
	instance_id: Int,
	_params: Vec<UncheckedSetParam>,
) -> CreateUnchecked {
	CreateUnchecked {
		timestamp,
		model,
		record_id,
		kind,
		data,
		instance_id,
		_params,
	}
}
#[derive(Debug, Clone)]
pub struct Types;
impl ::prisma_client_rust::ModelTypes for Types {
	type Data = Data;
	type Where = WhereParam;
	type WhereUnique = UniqueWhereParam;
	type UncheckedSet = UncheckedSetParam;
	type Set = SetParam;
	type With = WithParam;
	type OrderBy = OrderByWithRelationParam;
	type Cursor = UniqueWhereParam;
	const MODEL: &'static str = NAME;
	fn scalar_selections() -> Vec<::prisma_client_rust::Selection> {
		vec![
			::prisma_client_rust::sel(id::NAME),
			::prisma_client_rust::sel(timestamp::NAME),
			::prisma_client_rust::sel(model::NAME),
			::prisma_client_rust::sel(record_id::NAME),
			::prisma_client_rust::sel(kind::NAME),
			::prisma_client_rust::sel(data::NAME),
			::prisma_client_rust::sel(instance_id::NAME),
		]
	}
}
#[derive(
	Debug,
	Clone,
	:: serde :: Serialize,
	:: serde :: Deserialize,
	:: prisma_client_rust :: specta :: Type,
)]
# [specta (rename = "CloudCrdtOperation" , crate = prisma_client_rust :: specta)]
pub struct Data {
	#[serde(rename = "id")]
	pub id: id::Type,
	#[serde(rename = "timestamp")]
	pub timestamp: timestamp::Type,
	#[serde(rename = "model")]
	pub model: model::Type,
	#[serde(rename = "record_id")]
	pub record_id: record_id::Type,
	#[serde(rename = "kind")]
	pub kind: kind::Type,
	#[serde(rename = "data")]
	pub data: data::Type,
	#[serde(rename = "instance_id")]
	pub instance_id: instance_id::Type,
	#[serde(rename = "instance")]
	#[specta(skip)]
	pub instance: Option<instance::RecursiveSafeType>,
}
impl Data {
	pub fn instance(
		&self,
	) -> Result<&super::instance::Data, ::prisma_client_rust::RelationNotFetchedError> {
		self.instance
			.as_ref()
			.ok_or(::prisma_client_rust::RelationNotFetchedError::new(
				stringify!(instance),
			))
			.map(|v| v.as_ref())
	}
}
::prisma_client_rust::macros::partial_unchecked_factory!(
	_partial_unchecked_cloud_crdt_operation,
	prisma::cloud_crdt_operation,
	struct Data {
		#[serde(rename = "id")]
		pub id: prisma::cloud_crdt_operation::id::Type,
		#[serde(rename = "timestamp")]
		pub timestamp: prisma::cloud_crdt_operation::timestamp::Type,
		#[serde(rename = "model")]
		pub model: prisma::cloud_crdt_operation::model::Type,
		#[serde(rename = "record_id")]
		pub record_id: prisma::cloud_crdt_operation::record_id::Type,
		#[serde(rename = "kind")]
		pub kind: prisma::cloud_crdt_operation::kind::Type,
		#[serde(rename = "data")]
		pub data: prisma::cloud_crdt_operation::data::Type,
		#[serde(rename = "instance_id")]
		pub instance_id: prisma::cloud_crdt_operation::instance_id::Type,
	}
);
::prisma_client_rust::macros::filter_factory!(
	_cloud_crdt_operation_filter,
	prisma::cloud_crdt_operation,
	[
		(id, Scalar),
		(timestamp, Scalar),
		(model, Scalar),
		(record_id, Scalar),
		(kind, Scalar),
		(data, Scalar),
		(instance_id, Scalar),
		(instance, Relation(prisma::instance, One))
	]
);
pub type UniqueArgs = ::prisma_client_rust::UniqueArgs<Types>;
pub type ManyArgs = ::prisma_client_rust::ManyArgs<Types>;
pub type CountQuery<'a> = ::prisma_client_rust::Count<'a, Types>;
pub type CreateQuery<'a> = ::prisma_client_rust::Create<'a, Types>;
pub type CreateUncheckedQuery<'a> = ::prisma_client_rust::CreateUnchecked<'a, Types>;
pub type CreateManyQuery<'a> = ::prisma_client_rust::CreateMany<'a, Types>;
pub type FindUniqueQuery<'a> = ::prisma_client_rust::FindUnique<'a, Types>;
pub type FindManyQuery<'a> = ::prisma_client_rust::FindMany<'a, Types>;
pub type FindFirstQuery<'a> = ::prisma_client_rust::FindFirst<'a, Types>;
pub type UpdateQuery<'a> = ::prisma_client_rust::Update<'a, Types>;
pub type UpdateUncheckedQuery<'a> = ::prisma_client_rust::UpdateUnchecked<'a, Types>;
pub type UpdateManyQuery<'a> = ::prisma_client_rust::UpdateMany<'a, Types>;
pub type UpsertQuery<'a> = ::prisma_client_rust::Upsert<'a, Types>;
pub type DeleteQuery<'a> = ::prisma_client_rust::Delete<'a, Types>;
pub type DeleteManyQuery<'a> = ::prisma_client_rust::DeleteMany<'a, Types>;
#[derive(Clone)]
pub struct Actions<'a> {
	pub client: &'a ::prisma_client_rust::PrismaClientInternals,
}
impl<'a> Actions<'a> {
	pub fn find_unique(self, _where: UniqueWhereParam) -> FindUniqueQuery<'a> {
		FindUniqueQuery::new(self.client, _where)
	}
	pub fn find_first(self, _where: Vec<WhereParam>) -> FindFirstQuery<'a> {
		FindFirstQuery::new(self.client, _where)
	}
	pub fn find_many(self, _where: Vec<WhereParam>) -> FindManyQuery<'a> {
		FindManyQuery::new(self.client, _where)
	}
	pub fn create(
		self,
		timestamp: BigInt,
		model: Int,
		record_id: Bytes,
		kind: String,
		data: Bytes,
		instance: super::instance::UniqueWhereParam,
		mut _params: Vec<SetParam>,
	) -> CreateQuery<'a> {
		_params.extend([
			timestamp::set(timestamp),
			model::set(model),
			record_id::set(record_id),
			kind::set(kind),
			data::set(data),
			instance::connect(instance),
		]);
		CreateQuery::new(self.client, _params)
	}
	pub fn create_unchecked(
		self,
		timestamp: BigInt,
		model: Int,
		record_id: Bytes,
		kind: String,
		data: Bytes,
		instance_id: Int,
		mut _params: Vec<UncheckedSetParam>,
	) -> CreateUncheckedQuery<'a> {
		_params.extend([
			timestamp::set(timestamp),
			model::set(model),
			record_id::set(record_id),
			kind::set(kind),
			data::set(data),
			instance_id::set(instance_id),
		]);
		CreateUncheckedQuery::new(self.client, _params.into_iter().map(Into::into).collect())
	}
	pub fn create_many(self, data: Vec<CreateUnchecked>) -> CreateManyQuery<'a> {
		let data = data.into_iter().map(CreateUnchecked::to_params).collect();
		CreateManyQuery::new(self.client, data)
	}
	pub fn update(self, _where: UniqueWhereParam, _params: Vec<SetParam>) -> UpdateQuery<'a> {
		UpdateQuery::new(self.client, _where, _params, vec![])
	}
	pub fn update_unchecked(
		self,
		_where: UniqueWhereParam,
		_params: Vec<UncheckedSetParam>,
	) -> UpdateUncheckedQuery<'a> {
		UpdateUncheckedQuery::new(
			self.client,
			_where,
			_params.into_iter().map(Into::into).collect(),
			vec![],
		)
	}
	pub fn update_many(
		self,
		_where: Vec<WhereParam>,
		_params: Vec<SetParam>,
	) -> UpdateManyQuery<'a> {
		UpdateManyQuery::new(self.client, _where, _params)
	}
	pub fn upsert(
		self,
		_where: UniqueWhereParam,
		_create: Create,
		_update: Vec<SetParam>,
	) -> UpsertQuery<'a> {
		UpsertQuery::new(self.client, _where, _create.to_params(), _update)
	}
	pub fn delete(self, _where: UniqueWhereParam) -> DeleteQuery<'a> {
		DeleteQuery::new(self.client, _where, vec![])
	}
	pub fn delete_many(self, _where: Vec<WhereParam>) -> DeleteManyQuery<'a> {
		DeleteManyQuery::new(self.client, _where)
	}
	pub fn count(self, _where: Vec<WhereParam>) -> CountQuery<'a> {
		CountQuery::new(self.client, _where)
	}
}
