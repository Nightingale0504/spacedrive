// File generated by Prisma Client Rust. DO NOT EDIT

pub mod _count;
pub mod album;
pub mod album_id;
pub mod date_created;
pub mod object;
pub mod object_id;
use super::{_prisma::*, *};
pub const NAME: &str = "ObjectInAlbum";
pub fn album_id_object_id<T: From<UniqueWhereParam>>(album_id: Int, object_id: Int) -> T {
	UniqueWhereParam::AlbumIdObjectIdEquals(album_id, object_id).into()
}
#[derive(Debug, Clone)]
pub enum WhereParam {
	Not(Vec<WhereParam>),
	Or(Vec<WhereParam>),
	And(Vec<WhereParam>),
	DateCreated(super::_prisma::read_filters::DateTimeNullableFilter),
	AlbumId(super::_prisma::read_filters::IntFilter),
	AlbumIs(Vec<super::album::WhereParam>),
	AlbumIsNot(Vec<super::album::WhereParam>),
	ObjectId(super::_prisma::read_filters::IntFilter),
	ObjectIs(Vec<super::object::WhereParam>),
	ObjectIsNot(Vec<super::object::WhereParam>),
}
impl ::prisma_client_rust::WhereInput for WhereParam {
	fn serialize(self) -> ::prisma_client_rust::SerializedWhereInput {
		let (name, value) = match self {
			Self::Not(value) => (
				"NOT",
				::prisma_client_rust::SerializedWhereValue::Object(
					::prisma_client_rust::merge_fields(
						value
							.into_iter()
							.map(::prisma_client_rust::WhereInput::serialize)
							.map(Into::into)
							.collect(),
					),
				),
			),
			Self::Or(value) => (
				"OR",
				::prisma_client_rust::SerializedWhereValue::List(
					value
						.into_iter()
						.map(::prisma_client_rust::WhereInput::serialize)
						.map(|p| ::prisma_client_rust::PrismaValue::Object(vec![p.into()]))
						.collect(),
				),
			),
			Self::And(value) => (
				"AND",
				::prisma_client_rust::SerializedWhereValue::Object(
					::prisma_client_rust::merge_fields(
						value
							.into_iter()
							.map(::prisma_client_rust::WhereInput::serialize)
							.map(Into::into)
							.collect(),
					),
				),
			),
			Self::DateCreated(value) => (date_created::NAME, value.into()),
			Self::AlbumId(value) => (album_id::NAME, value.into()),
			Self::AlbumIs(where_params) => (
				album::NAME,
				::prisma_client_rust::SerializedWhereValue::Object(vec![(
					"is".to_string(),
					::prisma_client_rust::PrismaValue::Object(
						where_params
							.into_iter()
							.map(::prisma_client_rust::WhereInput::serialize)
							.map(::prisma_client_rust::SerializedWhereInput::transform_equals)
							.collect(),
					),
				)]),
			),
			Self::AlbumIsNot(where_params) => (
				album::NAME,
				::prisma_client_rust::SerializedWhereValue::Object(vec![(
					"isNot".to_string(),
					::prisma_client_rust::PrismaValue::Object(
						where_params
							.into_iter()
							.map(::prisma_client_rust::WhereInput::serialize)
							.map(::prisma_client_rust::SerializedWhereInput::transform_equals)
							.collect(),
					),
				)]),
			),
			Self::ObjectId(value) => (object_id::NAME, value.into()),
			Self::ObjectIs(where_params) => (
				object::NAME,
				::prisma_client_rust::SerializedWhereValue::Object(vec![(
					"is".to_string(),
					::prisma_client_rust::PrismaValue::Object(
						where_params
							.into_iter()
							.map(::prisma_client_rust::WhereInput::serialize)
							.map(::prisma_client_rust::SerializedWhereInput::transform_equals)
							.collect(),
					),
				)]),
			),
			Self::ObjectIsNot(where_params) => (
				object::NAME,
				::prisma_client_rust::SerializedWhereValue::Object(vec![(
					"isNot".to_string(),
					::prisma_client_rust::PrismaValue::Object(
						where_params
							.into_iter()
							.map(::prisma_client_rust::WhereInput::serialize)
							.map(::prisma_client_rust::SerializedWhereInput::transform_equals)
							.collect(),
					),
				)]),
			),
		};
		::prisma_client_rust::SerializedWhereInput::new(name.to_string(), value.into())
	}
}
#[derive(Debug, Clone)]
pub enum UniqueWhereParam {
	AlbumIdObjectIdEquals(Int, Int),
}
impl ::prisma_client_rust::WhereInput for UniqueWhereParam {
	fn serialize(self) -> ::prisma_client_rust::SerializedWhereInput {
		let (name, value) = match self {
			Self::AlbumIdObjectIdEquals(album_id, object_id) => (
				"album_id_object_id",
				::prisma_client_rust::SerializedWhereValue::Object(vec![
					(
						album_id::NAME.to_string(),
						::prisma_client_rust::PrismaValue::Int(album_id),
					),
					(
						object_id::NAME.to_string(),
						::prisma_client_rust::PrismaValue::Int(object_id),
					),
				]),
			),
		};
		::prisma_client_rust::SerializedWhereInput::new(name.to_string(), value.into())
	}
}
impl From<::prisma_client_rust::Operator<Self>> for WhereParam {
	fn from(op: ::prisma_client_rust::Operator<Self>) -> Self {
		match op {
			::prisma_client_rust::Operator::Not(value) => Self::Not(value),
			::prisma_client_rust::Operator::And(value) => Self::And(value),
			::prisma_client_rust::Operator::Or(value) => Self::Or(value),
		}
	}
}
#[derive(Debug, Clone)]
pub enum OrderByWithRelationParam {
	DateCreated(super::SortOrder),
	AlbumId(super::SortOrder),
	ObjectId(super::SortOrder),
	Album(Vec<super::album::OrderByWithRelationParam>),
	Object(Vec<super::object::OrderByWithRelationParam>),
}
impl Into<(String, ::prisma_client_rust::PrismaValue)> for OrderByWithRelationParam {
	fn into(self) -> (String, ::prisma_client_rust::PrismaValue) {
		let (k, v) = match self {
			Self::DateCreated(param) => ("date_created", param.into()),
			Self::AlbumId(param) => ("album_id", param.into()),
			Self::ObjectId(param) => ("object_id", param.into()),
			Self::Album(param) => (
				"album",
				::prisma_client_rust::PrismaValue::Object(
					param.into_iter().map(Into::into).collect(),
				),
			),
			Self::Object(param) => (
				"object",
				::prisma_client_rust::PrismaValue::Object(
					param.into_iter().map(Into::into).collect(),
				),
			),
		};
		(k.to_string(), v)
	}
}
#[derive(Debug, Clone)]
pub enum OrderByRelationAggregateParam {
	_Count(super::SortOrder),
}
impl Into<(String, ::prisma_client_rust::PrismaValue)> for OrderByRelationAggregateParam {
	fn into(self) -> (String, ::prisma_client_rust::PrismaValue) {
		let (k, v) = match self {
			Self::_Count(param) => ("_count", param.into()),
		};
		(k.to_string(), v)
	}
}
#[derive(Debug, Clone)]
pub enum WithParam {
	Album(super::album::UniqueArgs),
	Object(super::object::UniqueArgs),
}
impl Into<::prisma_client_rust::Selection> for WithParam {
	fn into(self) -> ::prisma_client_rust::Selection {
		match self {
			Self::Album(args) => {
				let mut selections =
					<super::album::Types as ::prisma_client_rust::ModelTypes>::scalar_selections();
				selections.extend(
					args.with_params
						.into_iter()
						.map(Into::<::prisma_client_rust::Selection>::into),
				);
				::prisma_client_rust::Selection::new(album::NAME, None, [], selections)
			}
			Self::Object(args) => {
				let mut selections =
					<super::object::Types as ::prisma_client_rust::ModelTypes>::scalar_selections();
				selections.extend(
					args.with_params
						.into_iter()
						.map(Into::<::prisma_client_rust::Selection>::into),
				);
				::prisma_client_rust::Selection::new(object::NAME, None, [], selections)
			}
		}
	}
}
#[derive(Debug, Clone)]
pub enum SetParam {
	DateCreated(super::_prisma::write_params::DateTimeNullableParam),
	AlbumId(super::_prisma::write_params::IntParam),
	ConnectAlbum(super::album::UniqueWhereParam),
	ObjectId(super::_prisma::write_params::IntParam),
	ConnectObject(super::object::UniqueWhereParam),
}
impl Into<(String, ::prisma_client_rust::PrismaValue)> for SetParam {
	fn into(self) -> (String, ::prisma_client_rust::PrismaValue) {
		let (k, v) = match self {
			Self::DateCreated(value) => (date_created::NAME, value.into()),
			Self::AlbumId(value) => (album_id::NAME, value.into()),
			Self::ConnectAlbum(where_param) => (
				album::NAME,
				::prisma_client_rust::PrismaValue::Object(vec![(
					"connect".to_string(),
					::prisma_client_rust::PrismaValue::Object(
						[where_param]
							.into_iter()
							.map(::prisma_client_rust::WhereInput::serialize)
							.map(::prisma_client_rust::SerializedWhereInput::transform_equals)
							.collect(),
					),
				)]),
			),
			Self::ObjectId(value) => (object_id::NAME, value.into()),
			Self::ConnectObject(where_param) => (
				object::NAME,
				::prisma_client_rust::PrismaValue::Object(vec![(
					"connect".to_string(),
					::prisma_client_rust::PrismaValue::Object(
						[where_param]
							.into_iter()
							.map(::prisma_client_rust::WhereInput::serialize)
							.map(::prisma_client_rust::SerializedWhereInput::transform_equals)
							.collect(),
					),
				)]),
			),
		};
		(k.to_string(), v)
	}
}
#[derive(Debug, Clone)]
pub enum UncheckedSetParam {
	DateCreated(super::_prisma::write_params::DateTimeNullableParam),
	AlbumId(super::_prisma::write_params::IntParam),
	ObjectId(super::_prisma::write_params::IntParam),
}
impl Into<(String, ::prisma_client_rust::PrismaValue)> for UncheckedSetParam {
	fn into(self) -> (String, ::prisma_client_rust::PrismaValue) {
		let (k, v) = match self {
			Self::DateCreated(value) => ("date_created", value.into()),
			Self::AlbumId(value) => ("album_id", value.into()),
			Self::ObjectId(value) => ("object_id", value.into()),
		};
		(k.to_string(), v)
	}
}
::prisma_client_rust::macros::select_factory!(
	_select_object_in_album,
	select,
	prisma::object_in_album,
	struct Data {
		#[serde(rename = "date_created")]
		date_created: date_created::Type,
		#[serde(rename = "album_id")]
		album_id: album_id::Type,
		#[serde(rename = "album")]
		album: album::Type,
		#[serde(rename = "object_id")]
		object_id: object_id::Type,
		#[serde(rename = "object")]
		object: object::Type,
	},
	[
		(date_created, Scalar),
		(album_id, Scalar),
		(album, Relation(prisma::album, One)),
		(object_id, Scalar),
		(object, Relation(prisma::object, One))
	]
);
pub enum SelectParam {
	DateCreated(date_created::Select),
	AlbumId(album_id::Select),
	Album(album::Select),
	ObjectId(object_id::Select),
	Object(object::Select),
}
impl Into<::prisma_client_rust::Selection> for SelectParam {
	fn into(self) -> ::prisma_client_rust::Selection {
		match self {
			Self::DateCreated(data) => data.into(),
			Self::AlbumId(data) => data.into(),
			Self::Album(data) => data.into(),
			Self::ObjectId(data) => data.into(),
			Self::Object(data) => data.into(),
		}
	}
}
::prisma_client_rust::macros::include_factory!(
	_include_object_in_album,
	include,
	prisma::object_in_album,
	struct Data {
		#[serde(rename = "date_created")]
		date_created: date_created::Type,
		#[serde(rename = "album_id")]
		album_id: album_id::Type,
		#[serde(rename = "album")]
		album: album::Type,
		#[serde(rename = "object_id")]
		object_id: object_id::Type,
		#[serde(rename = "object")]
		object: object::Type,
	},
	[
		(album, Relation(prisma::album, One)),
		(object, Relation(prisma::object, One))
	]
);
pub enum IncludeParam {
	DateCreated(date_created::Include),
	AlbumId(album_id::Include),
	Album(album::Include),
	ObjectId(object_id::Include),
	Object(object::Include),
}
impl Into<::prisma_client_rust::Selection> for IncludeParam {
	fn into(self) -> ::prisma_client_rust::Selection {
		match self {
			Self::DateCreated(data) => data.into(),
			Self::AlbumId(data) => data.into(),
			Self::Album(data) => data.into(),
			Self::ObjectId(data) => data.into(),
			Self::Object(data) => data.into(),
		}
	}
}
#[derive(Debug, Clone)]
pub struct Create {
	pub album: super::album::UniqueWhereParam,
	pub object: super::object::UniqueWhereParam,
	pub _params: Vec<SetParam>,
}
impl Create {
	pub fn to_query<'a>(self, client: &'a PrismaClient) -> CreateQuery<'a> {
		client
			.object_in_album()
			.create(self.album, self.object, self._params)
	}
	pub fn to_params(mut self) -> Vec<SetParam> {
		self._params
			.extend([album::connect(self.album), object::connect(self.object)]);
		self._params
	}
}
pub fn create(
	album: super::album::UniqueWhereParam,
	object: super::object::UniqueWhereParam,
	_params: Vec<SetParam>,
) -> Create {
	Create {
		album,
		object,
		_params,
	}
}
#[derive(Debug, Clone)]
pub struct CreateUnchecked {
	pub album_id: Int,
	pub object_id: Int,
	pub _params: Vec<UncheckedSetParam>,
}
impl CreateUnchecked {
	pub fn to_query<'a>(self, client: &'a PrismaClient) -> CreateUncheckedQuery<'a> {
		client
			.object_in_album()
			.create_unchecked(self.album_id, self.object_id, self._params)
	}
	pub fn to_params(mut self) -> Vec<UncheckedSetParam> {
		self._params
			.extend([album_id::set(self.album_id), object_id::set(self.object_id)]);
		self._params
	}
}
pub fn create_unchecked(
	album_id: Int,
	object_id: Int,
	_params: Vec<UncheckedSetParam>,
) -> CreateUnchecked {
	CreateUnchecked {
		album_id,
		object_id,
		_params,
	}
}
#[derive(Debug, Clone)]
pub struct Types;
impl ::prisma_client_rust::ModelTypes for Types {
	type Data = Data;
	type Where = WhereParam;
	type WhereUnique = UniqueWhereParam;
	type UncheckedSet = UncheckedSetParam;
	type Set = SetParam;
	type With = WithParam;
	type OrderBy = OrderByWithRelationParam;
	type Cursor = UniqueWhereParam;
	const MODEL: &'static str = NAME;
	fn scalar_selections() -> Vec<::prisma_client_rust::Selection> {
		vec![
			::prisma_client_rust::sel(date_created::NAME),
			::prisma_client_rust::sel(album_id::NAME),
			::prisma_client_rust::sel(object_id::NAME),
		]
	}
}
#[derive(
	Debug,
	Clone,
	:: serde :: Serialize,
	:: serde :: Deserialize,
	:: prisma_client_rust :: specta :: Type,
)]
# [specta (rename = "ObjectInAlbum" , crate = prisma_client_rust :: specta)]
pub struct Data {
	#[serde(rename = "date_created")]
	pub date_created: date_created::Type,
	#[serde(rename = "album_id")]
	pub album_id: album_id::Type,
	#[serde(rename = "album")]
	#[specta(skip)]
	pub album: Option<album::RecursiveSafeType>,
	#[serde(rename = "object_id")]
	pub object_id: object_id::Type,
	#[serde(rename = "object")]
	#[specta(skip)]
	pub object: Option<object::RecursiveSafeType>,
}
impl Data {
	pub fn album(
		&self,
	) -> Result<&super::album::Data, ::prisma_client_rust::RelationNotFetchedError> {
		self.album
			.as_ref()
			.ok_or(::prisma_client_rust::RelationNotFetchedError::new(
				stringify!(album),
			))
			.map(|v| v.as_ref())
	}
	pub fn object(
		&self,
	) -> Result<&super::object::Data, ::prisma_client_rust::RelationNotFetchedError> {
		self.object
			.as_ref()
			.ok_or(::prisma_client_rust::RelationNotFetchedError::new(
				stringify!(object),
			))
			.map(|v| v.as_ref())
	}
}
::prisma_client_rust::macros::partial_unchecked_factory!(
	_partial_unchecked_object_in_album,
	prisma::object_in_album,
	struct Data {
		#[serde(rename = "date_created")]
		#[serde(default, with = "::prisma_client_rust::serde::double_option")]
		pub date_created: prisma::object_in_album::date_created::Type,
		#[serde(rename = "album_id")]
		pub album_id: prisma::object_in_album::album_id::Type,
		#[serde(rename = "object_id")]
		pub object_id: prisma::object_in_album::object_id::Type,
	}
);
::prisma_client_rust::macros::filter_factory!(
	_object_in_album_filter,
	prisma::object_in_album,
	[
		(date_created, Scalar),
		(album_id, Scalar),
		(album, Relation(prisma::album, One)),
		(object_id, Scalar),
		(object, Relation(prisma::object, One))
	]
);
pub type UniqueArgs = ::prisma_client_rust::UniqueArgs<Types>;
pub type ManyArgs = ::prisma_client_rust::ManyArgs<Types>;
pub type CountQuery<'a> = ::prisma_client_rust::Count<'a, Types>;
pub type CreateQuery<'a> = ::prisma_client_rust::Create<'a, Types>;
pub type CreateUncheckedQuery<'a> = ::prisma_client_rust::CreateUnchecked<'a, Types>;
pub type CreateManyQuery<'a> = ::prisma_client_rust::CreateMany<'a, Types>;
pub type FindUniqueQuery<'a> = ::prisma_client_rust::FindUnique<'a, Types>;
pub type FindManyQuery<'a> = ::prisma_client_rust::FindMany<'a, Types>;
pub type FindFirstQuery<'a> = ::prisma_client_rust::FindFirst<'a, Types>;
pub type UpdateQuery<'a> = ::prisma_client_rust::Update<'a, Types>;
pub type UpdateUncheckedQuery<'a> = ::prisma_client_rust::UpdateUnchecked<'a, Types>;
pub type UpdateManyQuery<'a> = ::prisma_client_rust::UpdateMany<'a, Types>;
pub type UpsertQuery<'a> = ::prisma_client_rust::Upsert<'a, Types>;
pub type DeleteQuery<'a> = ::prisma_client_rust::Delete<'a, Types>;
pub type DeleteManyQuery<'a> = ::prisma_client_rust::DeleteMany<'a, Types>;
#[derive(Clone)]
pub struct Actions<'a> {
	pub client: &'a ::prisma_client_rust::PrismaClientInternals,
}
impl<'a> Actions<'a> {
	pub fn find_unique(self, _where: UniqueWhereParam) -> FindUniqueQuery<'a> {
		FindUniqueQuery::new(self.client, _where)
	}
	pub fn find_first(self, _where: Vec<WhereParam>) -> FindFirstQuery<'a> {
		FindFirstQuery::new(self.client, _where)
	}
	pub fn find_many(self, _where: Vec<WhereParam>) -> FindManyQuery<'a> {
		FindManyQuery::new(self.client, _where)
	}
	pub fn create(
		self,
		album: super::album::UniqueWhereParam,
		object: super::object::UniqueWhereParam,
		mut _params: Vec<SetParam>,
	) -> CreateQuery<'a> {
		_params.extend([album::connect(album), object::connect(object)]);
		CreateQuery::new(self.client, _params)
	}
	pub fn create_unchecked(
		self,
		album_id: Int,
		object_id: Int,
		mut _params: Vec<UncheckedSetParam>,
	) -> CreateUncheckedQuery<'a> {
		_params.extend([album_id::set(album_id), object_id::set(object_id)]);
		CreateUncheckedQuery::new(self.client, _params.into_iter().map(Into::into).collect())
	}
	pub fn create_many(self, data: Vec<CreateUnchecked>) -> CreateManyQuery<'a> {
		let data = data.into_iter().map(CreateUnchecked::to_params).collect();
		CreateManyQuery::new(self.client, data)
	}
	pub fn update(self, _where: UniqueWhereParam, _params: Vec<SetParam>) -> UpdateQuery<'a> {
		UpdateQuery::new(self.client, _where, _params, vec![])
	}
	pub fn update_unchecked(
		self,
		_where: UniqueWhereParam,
		_params: Vec<UncheckedSetParam>,
	) -> UpdateUncheckedQuery<'a> {
		UpdateUncheckedQuery::new(
			self.client,
			_where,
			_params.into_iter().map(Into::into).collect(),
			vec![],
		)
	}
	pub fn update_many(
		self,
		_where: Vec<WhereParam>,
		_params: Vec<SetParam>,
	) -> UpdateManyQuery<'a> {
		UpdateManyQuery::new(self.client, _where, _params)
	}
	pub fn upsert(
		self,
		_where: UniqueWhereParam,
		_create: Create,
		_update: Vec<SetParam>,
	) -> UpsertQuery<'a> {
		UpsertQuery::new(self.client, _where, _create.to_params(), _update)
	}
	pub fn delete(self, _where: UniqueWhereParam) -> DeleteQuery<'a> {
		DeleteQuery::new(self.client, _where, vec![])
	}
	pub fn delete_many(self, _where: Vec<WhereParam>) -> DeleteManyQuery<'a> {
		DeleteManyQuery::new(self.client, _where)
	}
	pub fn count(self, _where: Vec<WhereParam>) -> CountQuery<'a> {
		CountQuery::new(self.client, _where)
	}
}
