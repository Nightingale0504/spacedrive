// File generated by SD Sync Generator. DO NOT EDIT

pub mod album;
pub mod cloud_crdt_operation;
pub mod crdt_operation;
pub mod exif_data;
pub mod ffmpeg_data;
pub mod ffmpeg_media_audio_props;
pub mod ffmpeg_media_chapter;
pub mod ffmpeg_media_codec;
pub mod ffmpeg_media_program;
pub mod ffmpeg_media_stream;
pub mod ffmpeg_media_video_props;
pub mod file_path;
pub mod indexer_rule;
pub mod indexer_rules_in_location;
pub mod instance;
pub mod job;
pub mod label;
pub mod label_on_object;
pub mod location;
pub mod node;
pub mod notification;
pub mod object;
pub mod object_in_album;
pub mod object_in_space;
pub mod preference;
pub mod saved_search;
pub mod space;
pub mod statistics;
pub mod tag;
pub mod tag_on_object;
pub mod volume;
use crate::prisma;
pub enum ModelSyncData {
	Location(location::SyncId, sd_sync::CRDTOperationData),
	FilePath(file_path::SyncId, sd_sync::CRDTOperationData),
	Object(object::SyncId, sd_sync::CRDTOperationData),
	ExifData(exif_data::SyncId, sd_sync::CRDTOperationData),
	Tag(tag::SyncId, sd_sync::CRDTOperationData),
	TagOnObject(tag_on_object::SyncId, sd_sync::CRDTOperationData),
	Label(label::SyncId, sd_sync::CRDTOperationData),
	LabelOnObject(label_on_object::SyncId, sd_sync::CRDTOperationData),
	Preference(preference::SyncId, sd_sync::CRDTOperationData),
	SavedSearch(saved_search::SyncId, sd_sync::CRDTOperationData),
}
impl ModelSyncData {
	pub fn from_op(op: sd_sync::CRDTOperation) -> Option<Self> {
		Some(match op.model {
			location::MODEL_ID => {
				Self::Location(rmpv::ext::from_value(op.record_id).ok()?, op.data)
			}
			file_path::MODEL_ID => {
				Self::FilePath(rmpv::ext::from_value(op.record_id).ok()?, op.data)
			}
			object::MODEL_ID => Self::Object(rmpv::ext::from_value(op.record_id).ok()?, op.data),
			exif_data::MODEL_ID => {
				Self::ExifData(rmpv::ext::from_value(op.record_id).ok()?, op.data)
			}
			tag::MODEL_ID => Self::Tag(rmpv::ext::from_value(op.record_id).ok()?, op.data),
			tag_on_object::MODEL_ID => {
				Self::TagOnObject(rmpv::ext::from_value(op.record_id).ok()?, op.data)
			}
			label::MODEL_ID => Self::Label(rmpv::ext::from_value(op.record_id).ok()?, op.data),
			label_on_object::MODEL_ID => {
				Self::LabelOnObject(rmpv::ext::from_value(op.record_id).ok()?, op.data)
			}
			preference::MODEL_ID => {
				Self::Preference(rmpv::ext::from_value(op.record_id).ok()?, op.data)
			}
			saved_search::MODEL_ID => {
				Self::SavedSearch(rmpv::ext::from_value(op.record_id).ok()?, op.data)
			}
			_ => return None,
		})
	}
	pub async fn exec(self, db: &prisma::PrismaClient) -> prisma_client_rust::Result<()> {
		match self {
			Self::Location(id, data) => match data {
				sd_sync::CRDTOperationData::Create(data) => {
					let data: Vec<_> = data
						.into_iter()
						.map(|(field, value)| {
							prisma::location::SetParam::deserialize(&field, value).unwrap()
						})
						.collect();
					db.location()
						.upsert(
							prisma::location::pub_id::equals(id.pub_id.clone()),
							prisma::location::create(id.pub_id.clone(), data.clone()),
							data,
						)
						.exec()
						.await?;
				}
				sd_sync::CRDTOperationData::Update { field, value } => {
					let data =
						vec![prisma::location::SetParam::deserialize(&field, value).unwrap()];
					db.location()
						.upsert(
							prisma::location::pub_id::equals(id.pub_id.clone()),
							prisma::location::create(id.pub_id.clone(), data.clone()),
							data,
						)
						.exec()
						.await?;
				}
				sd_sync::CRDTOperationData::Delete => {
					db.location()
						.delete(prisma::location::pub_id::equals(id.pub_id.clone()))
						.exec()
						.await?;
					db.crdt_operation()
						.delete_many(vec![
							prisma::crdt_operation::model::equals(1u16 as i32),
							prisma::crdt_operation::record_id::equals(
								rmp_serde::to_vec(&id).unwrap(),
							),
							prisma::crdt_operation::kind::equals(
								sd_sync::OperationKind::Create.to_string(),
							),
						])
						.exec()
						.await?;
				}
			},
			Self::FilePath(id, data) => match data {
				sd_sync::CRDTOperationData::Create(data) => {
					let data: Vec<_> = data
						.into_iter()
						.map(|(field, value)| {
							prisma::file_path::SetParam::deserialize(&field, value).unwrap()
						})
						.collect();
					db.file_path()
						.upsert(
							prisma::file_path::pub_id::equals(id.pub_id.clone()),
							prisma::file_path::create(id.pub_id.clone(), data.clone()),
							data,
						)
						.exec()
						.await?;
				}
				sd_sync::CRDTOperationData::Update { field, value } => {
					let data =
						vec![prisma::file_path::SetParam::deserialize(&field, value).unwrap()];
					db.file_path()
						.upsert(
							prisma::file_path::pub_id::equals(id.pub_id.clone()),
							prisma::file_path::create(id.pub_id.clone(), data.clone()),
							data,
						)
						.exec()
						.await?;
				}
				sd_sync::CRDTOperationData::Delete => {
					db.file_path()
						.delete(prisma::file_path::pub_id::equals(id.pub_id.clone()))
						.exec()
						.await?;
					db.crdt_operation()
						.delete_many(vec![
							prisma::crdt_operation::model::equals(2u16 as i32),
							prisma::crdt_operation::record_id::equals(
								rmp_serde::to_vec(&id).unwrap(),
							),
							prisma::crdt_operation::kind::equals(
								sd_sync::OperationKind::Create.to_string(),
							),
						])
						.exec()
						.await?;
				}
			},
			Self::Object(id, data) => match data {
				sd_sync::CRDTOperationData::Create(data) => {
					let data: Vec<_> = data
						.into_iter()
						.map(|(field, value)| {
							prisma::object::SetParam::deserialize(&field, value).unwrap()
						})
						.collect();
					db.object()
						.upsert(
							prisma::object::pub_id::equals(id.pub_id.clone()),
							prisma::object::create(id.pub_id.clone(), data.clone()),
							data,
						)
						.exec()
						.await?;
				}
				sd_sync::CRDTOperationData::Update { field, value } => {
					let data = vec![prisma::object::SetParam::deserialize(&field, value).unwrap()];
					db.object()
						.upsert(
							prisma::object::pub_id::equals(id.pub_id.clone()),
							prisma::object::create(id.pub_id.clone(), data.clone()),
							data,
						)
						.exec()
						.await?;
				}
				sd_sync::CRDTOperationData::Delete => {
					db.object()
						.delete(prisma::object::pub_id::equals(id.pub_id.clone()))
						.exec()
						.await?;
					db.crdt_operation()
						.delete_many(vec![
							prisma::crdt_operation::model::equals(3u16 as i32),
							prisma::crdt_operation::record_id::equals(
								rmp_serde::to_vec(&id).unwrap(),
							),
							prisma::crdt_operation::kind::equals(
								sd_sync::OperationKind::Create.to_string(),
							),
						])
						.exec()
						.await?;
				}
			},
			Self::ExifData(id, data) => {
				let rel = db
					.object()
					.find_unique(prisma::object::pub_id::equals(id.object.pub_id.clone()))
					.exec()
					.await?
					.unwrap();
				match data {
					sd_sync::CRDTOperationData::Create(data) => {
						let data: Vec<_> = data
							.into_iter()
							.map(|(field, value)| {
								prisma::exif_data::SetParam::deserialize(&field, value).unwrap()
							})
							.collect();
						db.exif_data()
							.upsert(
								prisma::exif_data::object_id::equals(rel.id),
								prisma::exif_data::create(
									prisma::object::pub_id::equals(id.object.pub_id.clone()),
									data.clone(),
								),
								data,
							)
							.exec()
							.await?;
					}
					sd_sync::CRDTOperationData::Update { field, value } => {
						let data =
							vec![prisma::exif_data::SetParam::deserialize(&field, value).unwrap()];
						db.exif_data()
							.upsert(
								prisma::exif_data::object_id::equals(rel.id),
								prisma::exif_data::create(
									prisma::object::pub_id::equals(id.object.pub_id.clone()),
									data.clone(),
								),
								data,
							)
							.exec()
							.await?;
					}
					sd_sync::CRDTOperationData::Delete => {
						db.exif_data()
							.delete(prisma::exif_data::object_id::equals(rel.id))
							.exec()
							.await?;
						db.crdt_operation()
							.delete_many(vec![
								prisma::crdt_operation::model::equals(4u16 as i32),
								prisma::crdt_operation::record_id::equals(
									rmp_serde::to_vec(&id).unwrap(),
								),
								prisma::crdt_operation::kind::equals(
									sd_sync::OperationKind::Create.to_string(),
								),
							])
							.exec()
							.await?;
					}
				}
			}
			Self::Tag(id, data) => match data {
				sd_sync::CRDTOperationData::Create(data) => {
					let data: Vec<_> = data
						.into_iter()
						.map(|(field, value)| {
							prisma::tag::SetParam::deserialize(&field, value).unwrap()
						})
						.collect();
					db.tag()
						.upsert(
							prisma::tag::pub_id::equals(id.pub_id.clone()),
							prisma::tag::create(id.pub_id.clone(), data.clone()),
							data,
						)
						.exec()
						.await?;
				}
				sd_sync::CRDTOperationData::Update { field, value } => {
					let data = vec![prisma::tag::SetParam::deserialize(&field, value).unwrap()];
					db.tag()
						.upsert(
							prisma::tag::pub_id::equals(id.pub_id.clone()),
							prisma::tag::create(id.pub_id.clone(), data.clone()),
							data,
						)
						.exec()
						.await?;
				}
				sd_sync::CRDTOperationData::Delete => {
					db.tag()
						.delete(prisma::tag::pub_id::equals(id.pub_id.clone()))
						.exec()
						.await?;
					db.crdt_operation()
						.delete_many(vec![
							prisma::crdt_operation::model::equals(5u16 as i32),
							prisma::crdt_operation::record_id::equals(
								rmp_serde::to_vec(&id).unwrap(),
							),
							prisma::crdt_operation::kind::equals(
								sd_sync::OperationKind::Create.to_string(),
							),
						])
						.exec()
						.await?;
				}
			},
			Self::TagOnObject(id, data) => {
				let (Some(group), Some(item)) = (
					db.tag()
						.find_unique(prisma::tag::pub_id::equals(id.tag.pub_id.clone()))
						.select(prisma::tag::select!({ id }))
						.exec()
						.await?,
					db.object()
						.find_unique(prisma::object::pub_id::equals(id.object.pub_id.clone()))
						.select(prisma::object::select!({ id }))
						.exec()
						.await?,
				) else {
					panic!("item and group not found!");
				};
				let id = prisma::tag_on_object::tag_id_object_id(group.id, item.id);
				match data {
					sd_sync::CRDTOperationData::Create(_) => {
						db.tag_on_object()
							.upsert(
								id,
								prisma::tag_on_object::create(
									prisma::object::id::equals(item.id),
									prisma::tag::id::equals(group.id),
									vec![],
								),
								vec![],
							)
							.exec()
							.await
							.ok();
					}
					sd_sync::CRDTOperationData::Update { field, value } => {
						let data =
							vec![prisma::tag_on_object::SetParam::deserialize(&field, value)
								.unwrap()];
						db.tag_on_object()
							.upsert(
								id,
								prisma::tag_on_object::create(
									prisma::object::id::equals(item.id),
									prisma::tag::id::equals(group.id),
									data.clone(),
								),
								data,
							)
							.exec()
							.await
							.ok();
					}
					sd_sync::CRDTOperationData::Delete => {
						db.tag_on_object().delete(id).exec().await.ok();
					}
				}
			}
			Self::Label(id, data) => match data {
				sd_sync::CRDTOperationData::Create(data) => {
					let data: Vec<_> = data
						.into_iter()
						.map(|(field, value)| {
							prisma::label::SetParam::deserialize(&field, value).unwrap()
						})
						.collect();
					db.label()
						.upsert(
							prisma::label::name::equals(id.name.clone()),
							prisma::label::create(id.name.clone(), data.clone()),
							data,
						)
						.exec()
						.await?;
				}
				sd_sync::CRDTOperationData::Update { field, value } => {
					let data = vec![prisma::label::SetParam::deserialize(&field, value).unwrap()];
					db.label()
						.upsert(
							prisma::label::name::equals(id.name.clone()),
							prisma::label::create(id.name.clone(), data.clone()),
							data,
						)
						.exec()
						.await?;
				}
				sd_sync::CRDTOperationData::Delete => {
					db.label()
						.delete(prisma::label::name::equals(id.name.clone()))
						.exec()
						.await?;
					db.crdt_operation()
						.delete_many(vec![
							prisma::crdt_operation::model::equals(7u16 as i32),
							prisma::crdt_operation::record_id::equals(
								rmp_serde::to_vec(&id).unwrap(),
							),
							prisma::crdt_operation::kind::equals(
								sd_sync::OperationKind::Create.to_string(),
							),
						])
						.exec()
						.await?;
				}
			},
			Self::LabelOnObject(id, data) => {
				let (Some(group), Some(item)) = (
					db.label()
						.find_unique(prisma::label::name::equals(id.label.name.clone()))
						.select(prisma::label::select!({ id }))
						.exec()
						.await?,
					db.object()
						.find_unique(prisma::object::pub_id::equals(id.object.pub_id.clone()))
						.select(prisma::object::select!({ id }))
						.exec()
						.await?,
				) else {
					panic!("item and group not found!");
				};
				let id = prisma::label_on_object::label_id_object_id(group.id, item.id);
				match data {
					sd_sync::CRDTOperationData::Create(_) => {
						db.label_on_object()
							.upsert(
								id,
								prisma::label_on_object::create(
									prisma::object::id::equals(item.id),
									prisma::label::id::equals(group.id),
									vec![],
								),
								vec![],
							)
							.exec()
							.await
							.ok();
					}
					sd_sync::CRDTOperationData::Update { field, value } => {
						let data =
							vec![
								prisma::label_on_object::SetParam::deserialize(&field, value)
									.unwrap(),
							];
						db.label_on_object()
							.upsert(
								id,
								prisma::label_on_object::create(
									prisma::object::id::equals(item.id),
									prisma::label::id::equals(group.id),
									data.clone(),
								),
								data,
							)
							.exec()
							.await
							.ok();
					}
					sd_sync::CRDTOperationData::Delete => {
						db.label_on_object().delete(id).exec().await.ok();
					}
				}
			}
			Self::Preference(id, data) => match data {
				sd_sync::CRDTOperationData::Create(data) => {
					let data: Vec<_> = data
						.into_iter()
						.map(|(field, value)| {
							prisma::preference::SetParam::deserialize(&field, value).unwrap()
						})
						.collect();
					db.preference()
						.upsert(
							prisma::preference::key::equals(id.key.clone()),
							prisma::preference::create(id.key.clone(), data.clone()),
							data,
						)
						.exec()
						.await?;
				}
				sd_sync::CRDTOperationData::Update { field, value } => {
					let data =
						vec![prisma::preference::SetParam::deserialize(&field, value).unwrap()];
					db.preference()
						.upsert(
							prisma::preference::key::equals(id.key.clone()),
							prisma::preference::create(id.key.clone(), data.clone()),
							data,
						)
						.exec()
						.await?;
				}
				sd_sync::CRDTOperationData::Delete => {
					db.preference()
						.delete(prisma::preference::key::equals(id.key.clone()))
						.exec()
						.await?;
					db.crdt_operation()
						.delete_many(vec![
							prisma::crdt_operation::model::equals(9u16 as i32),
							prisma::crdt_operation::record_id::equals(
								rmp_serde::to_vec(&id).unwrap(),
							),
							prisma::crdt_operation::kind::equals(
								sd_sync::OperationKind::Create.to_string(),
							),
						])
						.exec()
						.await?;
				}
			},
			Self::SavedSearch(id, data) => match data {
				sd_sync::CRDTOperationData::Create(data) => {
					let data: Vec<_> = data
						.into_iter()
						.map(|(field, value)| {
							prisma::saved_search::SetParam::deserialize(&field, value).unwrap()
						})
						.collect();
					db.saved_search()
						.upsert(
							prisma::saved_search::pub_id::equals(id.pub_id.clone()),
							prisma::saved_search::create(id.pub_id.clone(), data.clone()),
							data,
						)
						.exec()
						.await?;
				}
				sd_sync::CRDTOperationData::Update { field, value } => {
					let data =
						vec![prisma::saved_search::SetParam::deserialize(&field, value).unwrap()];
					db.saved_search()
						.upsert(
							prisma::saved_search::pub_id::equals(id.pub_id.clone()),
							prisma::saved_search::create(id.pub_id.clone(), data.clone()),
							data,
						)
						.exec()
						.await?;
				}
				sd_sync::CRDTOperationData::Delete => {
					db.saved_search()
						.delete(prisma::saved_search::pub_id::equals(id.pub_id.clone()))
						.exec()
						.await?;
					db.crdt_operation()
						.delete_many(vec![
							prisma::crdt_operation::model::equals(10u16 as i32),
							prisma::crdt_operation::record_id::equals(
								rmp_serde::to_vec(&id).unwrap(),
							),
							prisma::crdt_operation::kind::equals(
								sd_sync::OperationKind::Create.to_string(),
							),
						])
						.exec()
						.await?;
				}
			},
		}
		Ok(())
	}
}
