// File generated by SD Sync Generator. DO NOT EDIT

use super::prisma::*;
use prisma_client_rust::scalar_types::*;
impl ffmpeg_media_audio_props::SetParam {
	pub fn deserialize(field: &str, val: ::rmpv::Value) -> Option<Self> {
		Some(match field {
			ffmpeg_media_audio_props::id::NAME => {
				ffmpeg_media_audio_props::id::set(::rmpv::ext::from_value(val).unwrap())
			}
			ffmpeg_media_audio_props::delay::NAME => {
				ffmpeg_media_audio_props::delay::set(::rmpv::ext::from_value(val).unwrap())
			}
			ffmpeg_media_audio_props::padding::NAME => {
				ffmpeg_media_audio_props::padding::set(::rmpv::ext::from_value(val).unwrap())
			}
			ffmpeg_media_audio_props::sample_rate::NAME => {
				ffmpeg_media_audio_props::sample_rate::set(::rmpv::ext::from_value(val).unwrap())
			}
			ffmpeg_media_audio_props::sample_format::NAME => {
				ffmpeg_media_audio_props::sample_format::set(::rmpv::ext::from_value(val).unwrap())
			}
			ffmpeg_media_audio_props::bit_per_sample::NAME => {
				ffmpeg_media_audio_props::bit_per_sample::set(::rmpv::ext::from_value(val).unwrap())
			}
			ffmpeg_media_audio_props::channel_layout::NAME => {
				ffmpeg_media_audio_props::channel_layout::set(::rmpv::ext::from_value(val).unwrap())
			}
			ffmpeg_media_audio_props::codec::NAME => {
				let val: std::collections::HashMap<String, rmpv::Value> =
					::rmpv::ext::from_value(val).unwrap();
				let val = val.into_iter().next().unwrap();
				ffmpeg_media_audio_props::codec::connect(
					ffmpeg_media_codec::UniqueWhereParam::deserialize(&val.0, val.1).unwrap(),
				)
			}
			_ => return None,
		})
	}
}
impl ffmpeg_media_audio_props::UniqueWhereParam {
	pub fn deserialize(field: &str, val: ::rmpv::Value) -> Option<Self> {
		Some(match field {
			ffmpeg_media_audio_props::id::NAME => {
				ffmpeg_media_audio_props::id::equals(::rmpv::ext::from_value(val).unwrap())
			}
			ffmpeg_media_audio_props::codec_id::NAME => {
				ffmpeg_media_audio_props::codec_id::equals(::rmpv::ext::from_value(val).unwrap())
			}
			_ => return None,
		})
	}
}
