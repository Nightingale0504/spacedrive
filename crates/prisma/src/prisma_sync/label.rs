// File generated by SD Sync Generator. DO NOT EDIT

use super::prisma::*;
use prisma_client_rust::scalar_types::*;
#[derive(serde :: Serialize, serde :: Deserialize, Clone, Debug)]
pub struct SyncId {
	pub name: String,
}
impl sd_sync::SyncId for SyncId {
	type Model = label::Types;
}
pub const MODEL_ID: u16 = 7u16;
impl sd_sync::SyncModel for label::Types {
	const MODEL_ID: u16 = MODEL_ID;
}
impl sd_sync::SharedSyncModel for label::Types {
	type SyncId = SyncId;
}
impl label::SetParam {
	pub fn deserialize(field: &str, val: ::rmpv::Value) -> Option<Self> {
		Some(match field {
			label::id::NAME => label::id::set(::rmpv::ext::from_value(val).unwrap()),
			label::name::NAME => label::name::set(::rmpv::ext::from_value(val).unwrap()),
			label::date_created::NAME => {
				label::date_created::set(::rmpv::ext::from_value(val).unwrap())
			}
			label::date_modified::NAME => {
				label::date_modified::set(::rmpv::ext::from_value(val).unwrap())
			}
			_ => return None,
		})
	}
}
impl label::UniqueWhereParam {
	pub fn deserialize(field: &str, val: ::rmpv::Value) -> Option<Self> {
		Some(match field {
			label::id::NAME => label::id::equals(::rmpv::ext::from_value(val).unwrap()),
			label::name::NAME => label::name::equals(::rmpv::ext::from_value(val).unwrap()),
			_ => return None,
		})
	}
}
