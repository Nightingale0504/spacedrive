// File generated by SD Sync Generator. DO NOT EDIT

use super::prisma::*;
use prisma_client_rust::scalar_types::*;
#[derive(serde :: Serialize, serde :: Deserialize, Clone, Debug)]
pub struct SyncId {
	pub pub_id: Bytes,
}
impl sd_sync::SyncId for SyncId {
	type Model = tag::Types;
}
pub const MODEL_ID: u16 = 5u16;
impl sd_sync::SyncModel for tag::Types {
	const MODEL_ID: u16 = MODEL_ID;
}
impl sd_sync::SharedSyncModel for tag::Types {
	type SyncId = SyncId;
}
impl tag::SetParam {
	pub fn deserialize(field: &str, val: ::rmpv::Value) -> Option<Self> {
		Some(match field {
			tag::id::NAME => tag::id::set(::rmpv::ext::from_value(val).unwrap()),
			tag::pub_id::NAME => tag::pub_id::set(::rmpv::ext::from_value(val).unwrap()),
			tag::name::NAME => tag::name::set(::rmpv::ext::from_value(val).unwrap()),
			tag::color::NAME => tag::color::set(::rmpv::ext::from_value(val).unwrap()),
			tag::is_hidden::NAME => tag::is_hidden::set(::rmpv::ext::from_value(val).unwrap()),
			tag::date_created::NAME => {
				tag::date_created::set(::rmpv::ext::from_value(val).unwrap())
			}
			tag::date_modified::NAME => {
				tag::date_modified::set(::rmpv::ext::from_value(val).unwrap())
			}
			_ => return None,
		})
	}
}
impl tag::UniqueWhereParam {
	pub fn deserialize(field: &str, val: ::rmpv::Value) -> Option<Self> {
		Some(match field {
			tag::id::NAME => tag::id::equals(::rmpv::ext::from_value(val).unwrap()),
			tag::pub_id::NAME => tag::pub_id::equals(::rmpv::ext::from_value(val).unwrap()),
			_ => return None,
		})
	}
}
