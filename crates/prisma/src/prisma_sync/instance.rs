// File generated by SD Sync Generator. DO NOT EDIT

use super::prisma::*;
use prisma_client_rust::scalar_types::*;
#[derive(serde :: Serialize, serde :: Deserialize, Clone, Debug)]
pub struct SyncId {
	pub pub_id: Bytes,
}
impl sd_sync::SyncId for SyncId {
	type Model = instance::Types;
}
impl instance::SetParam {
	pub fn deserialize(field: &str, val: ::rmpv::Value) -> Option<Self> {
		Some(match field {
			instance::id::NAME => instance::id::set(::rmpv::ext::from_value(val).unwrap()),
			instance::pub_id::NAME => instance::pub_id::set(::rmpv::ext::from_value(val).unwrap()),
			instance::identity::NAME => {
				instance::identity::set(::rmpv::ext::from_value(val).unwrap())
			}
			instance::remote_identity::NAME => {
				instance::remote_identity::set(::rmpv::ext::from_value(val).unwrap())
			}
			instance::node_id::NAME => {
				instance::node_id::set(::rmpv::ext::from_value(val).unwrap())
			}
			instance::node_remote_identity::NAME => {
				instance::node_remote_identity::set(::rmpv::ext::from_value(val).unwrap())
			}
			instance::metadata::NAME => {
				instance::metadata::set(::rmpv::ext::from_value(val).unwrap())
			}
			instance::last_seen::NAME => {
				instance::last_seen::set(::rmpv::ext::from_value(val).unwrap())
			}
			instance::date_created::NAME => {
				instance::date_created::set(::rmpv::ext::from_value(val).unwrap())
			}
			instance::timestamp::NAME => {
				instance::timestamp::set(::rmpv::ext::from_value(val).unwrap())
			}
			_ => return None,
		})
	}
}
impl instance::UniqueWhereParam {
	pub fn deserialize(field: &str, val: ::rmpv::Value) -> Option<Self> {
		Some(match field {
			instance::id::NAME => instance::id::equals(::rmpv::ext::from_value(val).unwrap()),
			instance::pub_id::NAME => {
				instance::pub_id::equals(::rmpv::ext::from_value(val).unwrap())
			}
			_ => return None,
		})
	}
}
