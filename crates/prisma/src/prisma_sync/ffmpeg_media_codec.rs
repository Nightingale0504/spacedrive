// File generated by SD Sync Generator. DO NOT EDIT

use super::prisma::*;
use prisma_client_rust::scalar_types::*;
impl ffmpeg_media_codec::SetParam {
	pub fn deserialize(field: &str, val: ::rmpv::Value) -> Option<Self> {
		Some(match field {
			ffmpeg_media_codec::id::NAME => {
				ffmpeg_media_codec::id::set(::rmpv::ext::from_value(val).unwrap())
			}
			ffmpeg_media_codec::kind::NAME => {
				ffmpeg_media_codec::kind::set(::rmpv::ext::from_value(val).unwrap())
			}
			ffmpeg_media_codec::sub_kind::NAME => {
				ffmpeg_media_codec::sub_kind::set(::rmpv::ext::from_value(val).unwrap())
			}
			ffmpeg_media_codec::tag::NAME => {
				ffmpeg_media_codec::tag::set(::rmpv::ext::from_value(val).unwrap())
			}
			ffmpeg_media_codec::name::NAME => {
				ffmpeg_media_codec::name::set(::rmpv::ext::from_value(val).unwrap())
			}
			ffmpeg_media_codec::profile::NAME => {
				ffmpeg_media_codec::profile::set(::rmpv::ext::from_value(val).unwrap())
			}
			ffmpeg_media_codec::bit_rate::NAME => {
				ffmpeg_media_codec::bit_rate::set(::rmpv::ext::from_value(val).unwrap())
			}
			_ => return None,
		})
	}
}
impl ffmpeg_media_codec::UniqueWhereParam {
	pub fn deserialize(field: &str, val: ::rmpv::Value) -> Option<Self> {
		Some(match field {
			ffmpeg_media_codec::id::NAME => {
				ffmpeg_media_codec::id::equals(::rmpv::ext::from_value(val).unwrap())
			}
			_ => return None,
		})
	}
}
