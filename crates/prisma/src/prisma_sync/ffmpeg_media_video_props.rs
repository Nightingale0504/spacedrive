// File generated by SD Sync Generator. DO NOT EDIT

use super::prisma::*;
use prisma_client_rust::scalar_types::*;
impl ffmpeg_media_video_props::SetParam {
	pub fn deserialize(field: &str, val: ::rmpv::Value) -> Option<Self> {
		Some(match field {
			ffmpeg_media_video_props::id::NAME => {
				ffmpeg_media_video_props::id::set(::rmpv::ext::from_value(val).unwrap())
			}
			ffmpeg_media_video_props::pixel_format::NAME => {
				ffmpeg_media_video_props::pixel_format::set(::rmpv::ext::from_value(val).unwrap())
			}
			ffmpeg_media_video_props::color_range::NAME => {
				ffmpeg_media_video_props::color_range::set(::rmpv::ext::from_value(val).unwrap())
			}
			ffmpeg_media_video_props::bits_per_channel::NAME => {
				ffmpeg_media_video_props::bits_per_channel::set(
					::rmpv::ext::from_value(val).unwrap(),
				)
			}
			ffmpeg_media_video_props::color_space::NAME => {
				ffmpeg_media_video_props::color_space::set(::rmpv::ext::from_value(val).unwrap())
			}
			ffmpeg_media_video_props::color_primaries::NAME => {
				ffmpeg_media_video_props::color_primaries::set(
					::rmpv::ext::from_value(val).unwrap(),
				)
			}
			ffmpeg_media_video_props::color_transfer::NAME => {
				ffmpeg_media_video_props::color_transfer::set(::rmpv::ext::from_value(val).unwrap())
			}
			ffmpeg_media_video_props::field_order::NAME => {
				ffmpeg_media_video_props::field_order::set(::rmpv::ext::from_value(val).unwrap())
			}
			ffmpeg_media_video_props::chroma_location::NAME => {
				ffmpeg_media_video_props::chroma_location::set(
					::rmpv::ext::from_value(val).unwrap(),
				)
			}
			ffmpeg_media_video_props::width::NAME => {
				ffmpeg_media_video_props::width::set(::rmpv::ext::from_value(val).unwrap())
			}
			ffmpeg_media_video_props::height::NAME => {
				ffmpeg_media_video_props::height::set(::rmpv::ext::from_value(val).unwrap())
			}
			ffmpeg_media_video_props::aspect_ratio_num::NAME => {
				ffmpeg_media_video_props::aspect_ratio_num::set(
					::rmpv::ext::from_value(val).unwrap(),
				)
			}
			ffmpeg_media_video_props::aspect_ratio_den::NAME => {
				ffmpeg_media_video_props::aspect_ratio_den::set(
					::rmpv::ext::from_value(val).unwrap(),
				)
			}
			ffmpeg_media_video_props::properties::NAME => {
				ffmpeg_media_video_props::properties::set(::rmpv::ext::from_value(val).unwrap())
			}
			ffmpeg_media_video_props::codec::NAME => {
				let val: std::collections::HashMap<String, rmpv::Value> =
					::rmpv::ext::from_value(val).unwrap();
				let val = val.into_iter().next().unwrap();
				ffmpeg_media_video_props::codec::connect(
					ffmpeg_media_codec::UniqueWhereParam::deserialize(&val.0, val.1).unwrap(),
				)
			}
			_ => return None,
		})
	}
}
impl ffmpeg_media_video_props::UniqueWhereParam {
	pub fn deserialize(field: &str, val: ::rmpv::Value) -> Option<Self> {
		Some(match field {
			ffmpeg_media_video_props::id::NAME => {
				ffmpeg_media_video_props::id::equals(::rmpv::ext::from_value(val).unwrap())
			}
			ffmpeg_media_video_props::codec_id::NAME => {
				ffmpeg_media_video_props::codec_id::equals(::rmpv::ext::from_value(val).unwrap())
			}
			_ => return None,
		})
	}
}
