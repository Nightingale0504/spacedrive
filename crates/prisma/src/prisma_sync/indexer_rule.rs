// File generated by SD Sync Generator. DO NOT EDIT

use super::prisma::*;
use prisma_client_rust::scalar_types::*;
impl indexer_rule::SetParam {
	pub fn deserialize(field: &str, val: ::rmpv::Value) -> Option<Self> {
		Some(match field {
			indexer_rule::id::NAME => indexer_rule::id::set(::rmpv::ext::from_value(val).unwrap()),
			indexer_rule::pub_id::NAME => {
				indexer_rule::pub_id::set(::rmpv::ext::from_value(val).unwrap())
			}
			indexer_rule::name::NAME => {
				indexer_rule::name::set(::rmpv::ext::from_value(val).unwrap())
			}
			indexer_rule::default::NAME => {
				indexer_rule::default::set(::rmpv::ext::from_value(val).unwrap())
			}
			indexer_rule::rules_per_kind::NAME => {
				indexer_rule::rules_per_kind::set(::rmpv::ext::from_value(val).unwrap())
			}
			indexer_rule::date_created::NAME => {
				indexer_rule::date_created::set(::rmpv::ext::from_value(val).unwrap())
			}
			indexer_rule::date_modified::NAME => {
				indexer_rule::date_modified::set(::rmpv::ext::from_value(val).unwrap())
			}
			_ => return None,
		})
	}
}
impl indexer_rule::UniqueWhereParam {
	pub fn deserialize(field: &str, val: ::rmpv::Value) -> Option<Self> {
		Some(match field {
			indexer_rule::id::NAME => {
				indexer_rule::id::equals(::rmpv::ext::from_value(val).unwrap())
			}
			indexer_rule::pub_id::NAME => {
				indexer_rule::pub_id::equals(::rmpv::ext::from_value(val).unwrap())
			}
			indexer_rule::name::NAME => {
				indexer_rule::name::equals(::rmpv::ext::from_value(val).unwrap())
			}
			_ => return None,
		})
	}
}
