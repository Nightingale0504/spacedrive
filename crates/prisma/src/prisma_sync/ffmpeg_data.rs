// File generated by SD Sync Generator. DO NOT EDIT

use super::prisma::*;
use prisma_client_rust::scalar_types::*;
impl ffmpeg_data::SetParam {
	pub fn deserialize(field: &str, val: ::rmpv::Value) -> Option<Self> {
		Some(match field {
			ffmpeg_data::id::NAME => ffmpeg_data::id::set(::rmpv::ext::from_value(val).unwrap()),
			ffmpeg_data::formats::NAME => {
				ffmpeg_data::formats::set(::rmpv::ext::from_value(val).unwrap())
			}
			ffmpeg_data::bit_rate::NAME => {
				ffmpeg_data::bit_rate::set(::rmpv::ext::from_value(val).unwrap())
			}
			ffmpeg_data::duration::NAME => {
				ffmpeg_data::duration::set(::rmpv::ext::from_value(val).unwrap())
			}
			ffmpeg_data::start_time::NAME => {
				ffmpeg_data::start_time::set(::rmpv::ext::from_value(val).unwrap())
			}
			ffmpeg_data::title::NAME => {
				ffmpeg_data::title::set(::rmpv::ext::from_value(val).unwrap())
			}
			ffmpeg_data::creation_time::NAME => {
				ffmpeg_data::creation_time::set(::rmpv::ext::from_value(val).unwrap())
			}
			ffmpeg_data::date::NAME => {
				ffmpeg_data::date::set(::rmpv::ext::from_value(val).unwrap())
			}
			ffmpeg_data::album_artist::NAME => {
				ffmpeg_data::album_artist::set(::rmpv::ext::from_value(val).unwrap())
			}
			ffmpeg_data::disc::NAME => {
				ffmpeg_data::disc::set(::rmpv::ext::from_value(val).unwrap())
			}
			ffmpeg_data::track::NAME => {
				ffmpeg_data::track::set(::rmpv::ext::from_value(val).unwrap())
			}
			ffmpeg_data::album::NAME => {
				ffmpeg_data::album::set(::rmpv::ext::from_value(val).unwrap())
			}
			ffmpeg_data::artist::NAME => {
				ffmpeg_data::artist::set(::rmpv::ext::from_value(val).unwrap())
			}
			ffmpeg_data::metadata::NAME => {
				ffmpeg_data::metadata::set(::rmpv::ext::from_value(val).unwrap())
			}
			ffmpeg_data::object::NAME => {
				let val: std::collections::HashMap<String, rmpv::Value> =
					::rmpv::ext::from_value(val).unwrap();
				let val = val.into_iter().next().unwrap();
				ffmpeg_data::object::connect(
					object::UniqueWhereParam::deserialize(&val.0, val.1).unwrap(),
				)
			}
			_ => return None,
		})
	}
}
impl ffmpeg_data::UniqueWhereParam {
	pub fn deserialize(field: &str, val: ::rmpv::Value) -> Option<Self> {
		Some(match field {
			ffmpeg_data::id::NAME => ffmpeg_data::id::equals(::rmpv::ext::from_value(val).unwrap()),
			ffmpeg_data::object_id::NAME => {
				ffmpeg_data::object_id::equals(::rmpv::ext::from_value(val).unwrap())
			}
			_ => return None,
		})
	}
}
