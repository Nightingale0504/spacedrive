// File generated by SD Sync Generator. DO NOT EDIT

use super::prisma::*;
use prisma_client_rust::scalar_types::*;
impl ffmpeg_media_stream::SetParam {
	pub fn deserialize(field: &str, val: ::rmpv::Value) -> Option<Self> {
		Some(match field {
			ffmpeg_media_stream::stream_id::NAME => {
				ffmpeg_media_stream::stream_id::set(::rmpv::ext::from_value(val).unwrap())
			}
			ffmpeg_media_stream::name::NAME => {
				ffmpeg_media_stream::name::set(::rmpv::ext::from_value(val).unwrap())
			}
			ffmpeg_media_stream::aspect_ratio_num::NAME => {
				ffmpeg_media_stream::aspect_ratio_num::set(::rmpv::ext::from_value(val).unwrap())
			}
			ffmpeg_media_stream::aspect_ratio_den::NAME => {
				ffmpeg_media_stream::aspect_ratio_den::set(::rmpv::ext::from_value(val).unwrap())
			}
			ffmpeg_media_stream::frames_per_second_num::NAME => {
				ffmpeg_media_stream::frames_per_second_num::set(
					::rmpv::ext::from_value(val).unwrap(),
				)
			}
			ffmpeg_media_stream::frames_per_second_den::NAME => {
				ffmpeg_media_stream::frames_per_second_den::set(
					::rmpv::ext::from_value(val).unwrap(),
				)
			}
			ffmpeg_media_stream::time_base_real_den::NAME => {
				ffmpeg_media_stream::time_base_real_den::set(::rmpv::ext::from_value(val).unwrap())
			}
			ffmpeg_media_stream::time_base_real_num::NAME => {
				ffmpeg_media_stream::time_base_real_num::set(::rmpv::ext::from_value(val).unwrap())
			}
			ffmpeg_media_stream::dispositions::NAME => {
				ffmpeg_media_stream::dispositions::set(::rmpv::ext::from_value(val).unwrap())
			}
			ffmpeg_media_stream::title::NAME => {
				ffmpeg_media_stream::title::set(::rmpv::ext::from_value(val).unwrap())
			}
			ffmpeg_media_stream::encoder::NAME => {
				ffmpeg_media_stream::encoder::set(::rmpv::ext::from_value(val).unwrap())
			}
			ffmpeg_media_stream::language::NAME => {
				ffmpeg_media_stream::language::set(::rmpv::ext::from_value(val).unwrap())
			}
			ffmpeg_media_stream::duration::NAME => {
				ffmpeg_media_stream::duration::set(::rmpv::ext::from_value(val).unwrap())
			}
			ffmpeg_media_stream::metadata::NAME => {
				ffmpeg_media_stream::metadata::set(::rmpv::ext::from_value(val).unwrap())
			}
			_ => return None,
		})
	}
}
