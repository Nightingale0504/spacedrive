// File generated by SD Sync Generator. DO NOT EDIT

use super::prisma::*;
use prisma_client_rust::scalar_types::*;
impl job::SetParam {
	pub fn deserialize(field: &str, val: ::rmpv::Value) -> Option<Self> {
		Some(match field {
			job::id::NAME => job::id::set(::rmpv::ext::from_value(val).unwrap()),
			job::name::NAME => job::name::set(::rmpv::ext::from_value(val).unwrap()),
			job::action::NAME => job::action::set(::rmpv::ext::from_value(val).unwrap()),
			job::status::NAME => job::status::set(::rmpv::ext::from_value(val).unwrap()),
			job::errors_text::NAME => job::errors_text::set(::rmpv::ext::from_value(val).unwrap()),
			job::critical_error::NAME => {
				job::critical_error::set(::rmpv::ext::from_value(val).unwrap())
			}
			job::non_critical_errors::NAME => {
				job::non_critical_errors::set(::rmpv::ext::from_value(val).unwrap())
			}
			job::data::NAME => job::data::set(::rmpv::ext::from_value(val).unwrap()),
			job::metadata::NAME => job::metadata::set(::rmpv::ext::from_value(val).unwrap()),
			job::task_count::NAME => job::task_count::set(::rmpv::ext::from_value(val).unwrap()),
			job::completed_task_count::NAME => {
				job::completed_task_count::set(::rmpv::ext::from_value(val).unwrap())
			}
			job::date_estimated_completion::NAME => {
				job::date_estimated_completion::set(::rmpv::ext::from_value(val).unwrap())
			}
			job::date_created::NAME => {
				job::date_created::set(::rmpv::ext::from_value(val).unwrap())
			}
			job::date_started::NAME => {
				job::date_started::set(::rmpv::ext::from_value(val).unwrap())
			}
			job::date_completed::NAME => {
				job::date_completed::set(::rmpv::ext::from_value(val).unwrap())
			}
			job::parent::NAME => {
				let val: std::collections::HashMap<String, rmpv::Value> =
					::rmpv::ext::from_value(val).unwrap();
				let val = val.into_iter().next().unwrap();
				job::parent::connect(job::UniqueWhereParam::deserialize(&val.0, val.1).unwrap())
			}
			_ => return None,
		})
	}
}
impl job::UniqueWhereParam {
	pub fn deserialize(field: &str, val: ::rmpv::Value) -> Option<Self> {
		Some(match field {
			job::id::NAME => job::id::equals(::rmpv::ext::from_value(val).unwrap()),
			_ => return None,
		})
	}
}
