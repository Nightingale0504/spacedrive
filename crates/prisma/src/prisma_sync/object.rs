// File generated by SD Sync Generator. DO NOT EDIT

use super::prisma::*;
use prisma_client_rust::scalar_types::*;
#[derive(serde :: Serialize, serde :: Deserialize, Clone, Debug)]
pub struct SyncId {
	pub pub_id: Bytes,
}
impl sd_sync::SyncId for SyncId {
	type Model = object::Types;
}
pub const MODEL_ID: u16 = 3u16;
impl sd_sync::SyncModel for object::Types {
	const MODEL_ID: u16 = MODEL_ID;
}
impl sd_sync::SharedSyncModel for object::Types {
	type SyncId = SyncId;
}
impl object::SetParam {
	pub fn deserialize(field: &str, val: ::rmpv::Value) -> Option<Self> {
		Some(match field {
			object::id::NAME => object::id::set(::rmpv::ext::from_value(val).unwrap()),
			object::pub_id::NAME => object::pub_id::set(::rmpv::ext::from_value(val).unwrap()),
			object::kind::NAME => object::kind::set(::rmpv::ext::from_value(val).unwrap()),
			object::key_id::NAME => object::key_id::set(::rmpv::ext::from_value(val).unwrap()),
			object::hidden::NAME => object::hidden::set(::rmpv::ext::from_value(val).unwrap()),
			object::favorite::NAME => object::favorite::set(::rmpv::ext::from_value(val).unwrap()),
			object::important::NAME => {
				object::important::set(::rmpv::ext::from_value(val).unwrap())
			}
			object::note::NAME => object::note::set(::rmpv::ext::from_value(val).unwrap()),
			object::date_created::NAME => {
				object::date_created::set(::rmpv::ext::from_value(val).unwrap())
			}
			object::date_accessed::NAME => {
				object::date_accessed::set(::rmpv::ext::from_value(val).unwrap())
			}
			_ => return None,
		})
	}
}
impl object::UniqueWhereParam {
	pub fn deserialize(field: &str, val: ::rmpv::Value) -> Option<Self> {
		Some(match field {
			object::id::NAME => object::id::equals(::rmpv::ext::from_value(val).unwrap()),
			object::pub_id::NAME => object::pub_id::equals(::rmpv::ext::from_value(val).unwrap()),
			_ => return None,
		})
	}
}
