// File generated by SD Sync Generator. DO NOT EDIT

use super::prisma::*;
use prisma_client_rust::scalar_types::*;
#[derive(serde :: Serialize, serde :: Deserialize, Clone, Debug)]
pub struct SyncId {
	pub object: super::object::SyncId,
}
impl sd_sync::SyncId for SyncId {
	type Model = exif_data::Types;
}
pub const MODEL_ID: u16 = 4u16;
impl sd_sync::SyncModel for exif_data::Types {
	const MODEL_ID: u16 = MODEL_ID;
}
impl sd_sync::SharedSyncModel for exif_data::Types {
	type SyncId = SyncId;
}
impl exif_data::SetParam {
	pub fn deserialize(field: &str, val: ::rmpv::Value) -> Option<Self> {
		Some(match field {
			exif_data::id::NAME => exif_data::id::set(::rmpv::ext::from_value(val).unwrap()),
			exif_data::resolution::NAME => {
				exif_data::resolution::set(::rmpv::ext::from_value(val).unwrap())
			}
			exif_data::media_date::NAME => {
				exif_data::media_date::set(::rmpv::ext::from_value(val).unwrap())
			}
			exif_data::media_location::NAME => {
				exif_data::media_location::set(::rmpv::ext::from_value(val).unwrap())
			}
			exif_data::camera_data::NAME => {
				exif_data::camera_data::set(::rmpv::ext::from_value(val).unwrap())
			}
			exif_data::artist::NAME => {
				exif_data::artist::set(::rmpv::ext::from_value(val).unwrap())
			}
			exif_data::description::NAME => {
				exif_data::description::set(::rmpv::ext::from_value(val).unwrap())
			}
			exif_data::copyright::NAME => {
				exif_data::copyright::set(::rmpv::ext::from_value(val).unwrap())
			}
			exif_data::exif_version::NAME => {
				exif_data::exif_version::set(::rmpv::ext::from_value(val).unwrap())
			}
			exif_data::epoch_time::NAME => {
				exif_data::epoch_time::set(::rmpv::ext::from_value(val).unwrap())
			}
			exif_data::object::NAME => {
				let val: std::collections::HashMap<String, rmpv::Value> =
					::rmpv::ext::from_value(val).unwrap();
				let val = val.into_iter().next().unwrap();
				exif_data::object::connect(
					object::UniqueWhereParam::deserialize(&val.0, val.1).unwrap(),
				)
			}
			_ => return None,
		})
	}
}
impl exif_data::UniqueWhereParam {
	pub fn deserialize(field: &str, val: ::rmpv::Value) -> Option<Self> {
		Some(match field {
			exif_data::id::NAME => exif_data::id::equals(::rmpv::ext::from_value(val).unwrap()),
			exif_data::object_id::NAME => {
				exif_data::object_id::equals(::rmpv::ext::from_value(val).unwrap())
			}
			_ => return None,
		})
	}
}
